        -:    0:Source:C:/Users/henri/Documents/GitHub/BAP-Rover-Deployment-Software-System/test/TestingRepositoryBEP/electronics_components_control_system_lib/temp_sensors.cpp
        -:    0:Graph:C:\Users\henri\Documents\GitHub\BAP-Rover-Deployment-Software-System\test\TestingRepositoryBEP\cmake-build-debug-coverage-1\electronics_components_control_system_lib\CMakeFiles\electronics_components_control_system_lib.dir\temp_sensors.cpp.gcno
        -:    0:Data:C:\Users\henri\Documents\GitHub\BAP-Rover-Deployment-Software-System\test\TestingRepositoryBEP\cmake-build-debug-coverage-1\electronics_components_control_system_lib\CMakeFiles\electronics_components_control_system_lib.dir\temp_sensors.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by henri on 16/06/2024.
        -:    3://
        -:    4:
        -:    5:// Function to calculate frequency from the period
function _Z18calculateFrequencyf called 3 returned 100% blocks executed 100%
        3:    6:float calculateFrequency(float period) {
        3:    7:    if (period == 0.0) {
        3:    7-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:    8:        return 0.0;
        1:    8-block  0
        -:    9:    }
        2:   10:    const float clockFrequency = 4000000; // Assume SMCLK is 4 MHz
        2:   11:    return clockFrequency / period;       // Calculate the frequency
        2:   11-block  0
        -:   12:}
        -:   13:
        -:   14:// Function to convert frequency to temperature
function _Z24frequency_to_temperaturef called 6 returned 100% blocks executed 100%
        6:   15:float frequency_to_temperature(float frequency) {
        6:   16:    if (frequency >= 150 && frequency <= 800) {
        6:   16-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:   16-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 1
        3:   17:        float capacitance = 0.0000022; // Capacitance in Farads
        3:   18:        float x = 1.0 / (0.4055 * 2.0 * capacitance * frequency); // Intermediate calculation using the frequency
        3:   19:        float temperature = (x - 1000.0) / 3.85; // Convert intermediate value to temperature
        3:   20:        return temperature; // Return the calculated temperature
        3:   20-block  0
        -:   21:    } else {
        3:   22:        return -99.0;  // returns an error value that is impossible to record
        3:   22-block  0
        -:   23:    }
        -:   24:}
