        -:    0:Source:C:/Users/henri/Documents/GitHub/BAP-Rover-Deployment-Software-System/test/TestingRepositoryBEP/Google_tests/lib/googletest/src/gtest.cc
        -:    0:Graph:C:\Users\henri\Documents\GitHub\BAP-Rover-Deployment-Software-System\test\TestingRepositoryBEP\cmake-build-debug-coverage-1\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\henri\Documents\GitHub\BAP-Rover-Deployment-Software-System\test\TestingRepositoryBEP\cmake-build-debug-coverage-1\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <csignal>  // NOLINT: raise(3) is used on some platforms
        -:   47:#include <cstdint>
        -:   48:#include <cstdlib>
        -:   49:#include <cstring>
        -:   50:#include <initializer_list>
        -:   51:#include <iomanip>
        -:   52:#include <ios>
        -:   53:#include <iostream>
        -:   54:#include <iterator>
        -:   55:#include <limits>
        -:   56:#include <list>
        -:   57:#include <map>
        -:   58:#include <ostream>  // NOLINT
        -:   59:#include <set>
        -:   60:#include <sstream>
        -:   61:#include <unordered_set>
        -:   62:#include <utility>
        -:   63:#include <vector>
        -:   64:
        -:   65:#include "gtest/gtest-assertion-result.h"
        -:   66:#include "gtest/gtest-spi.h"
        -:   67:#include "gtest/internal/custom/gtest.h"
        -:   68:#include "gtest/internal/gtest-port.h"
        -:   69:
        -:   70:#ifdef GTEST_OS_LINUX
        -:   71:
        -:   72:#include <fcntl.h>   // NOLINT
        -:   73:#include <limits.h>  // NOLINT
        -:   74:#include <sched.h>   // NOLINT
        -:   75:// Declares vsnprintf().  This header is not available on Windows.
        -:   76:#include <strings.h>   // NOLINT
        -:   77:#include <sys/mman.h>  // NOLINT
        -:   78:#include <sys/time.h>  // NOLINT
        -:   79:#include <unistd.h>    // NOLINT
        -:   80:
        -:   81:#include <string>
        -:   82:
        -:   83:#elif defined(GTEST_OS_ZOS)
        -:   84:#include <sys/time.h>  // NOLINT
        -:   85:
        -:   86:// On z/OS we additionally need strings.h for strcasecmp.
        -:   87:#include <strings.h>   // NOLINT
        -:   88:
        -:   89:#elif defined(GTEST_OS_WINDOWS_MOBILE)  // We are on Windows CE.
        -:   90:
        -:   91:#include <windows.h>  // NOLINT
        -:   92:#undef min
        -:   93:
        -:   94:#elif defined(GTEST_OS_WINDOWS)  // We are on Windows proper.
        -:   95:
        -:   96:#include <windows.h>  // NOLINT
        -:   97:#undef min
        -:   98:
        -:   99:#ifdef _MSC_VER
        -:  100:#include <crtdbg.h>  // NOLINT
        -:  101:#endif
        -:  102:
        -:  103:#include <io.h>         // NOLINT
        -:  104:#include <sys/stat.h>   // NOLINT
        -:  105:#include <sys/timeb.h>  // NOLINT
        -:  106:#include <sys/types.h>  // NOLINT
        -:  107:
        -:  108:#ifdef GTEST_OS_WINDOWS_MINGW
        -:  109:#include <sys/time.h>  // NOLINT
        -:  110:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  111:
        -:  112:#else
        -:  113:
        -:  114:// cpplint thinks that the header is already included, so we want to
        -:  115:// silence it.
        -:  116:#include <sys/time.h>  // NOLINT
        -:  117:#include <unistd.h>    // NOLINT
        -:  118:
        -:  119:#endif  // GTEST_OS_LINUX
        -:  120:
        -:  121:#if GTEST_HAS_EXCEPTIONS
        -:  122:#include <stdexcept>
        -:  123:#endif
        -:  124:
        -:  125:#if GTEST_CAN_STREAM_RESULTS_
        -:  126:#include <arpa/inet.h>   // NOLINT
        -:  127:#include <netdb.h>       // NOLINT
        -:  128:#include <sys/socket.h>  // NOLINT
        -:  129:#include <sys/types.h>   // NOLINT
        -:  130:#endif
        -:  131:
        -:  132:#include "src/gtest-internal-inl.h"
        -:  133:
        -:  134:#ifdef GTEST_OS_WINDOWS
        -:  135:#define vsnprintf _vsnprintf
        -:  136:#endif  // GTEST_OS_WINDOWS
        -:  137:
        -:  138:#ifdef GTEST_OS_MAC
        -:  139:#ifndef GTEST_OS_IOS
        -:  140:#include <crt_externs.h>
        -:  141:#endif
        -:  142:#endif
        -:  143:
        -:  144:#ifdef GTEST_HAS_ABSL
        -:  145:#include "absl/container/flat_hash_set.h"
        -:  146:#include "absl/debugging/failure_signal_handler.h"
        -:  147:#include "absl/debugging/stacktrace.h"
        -:  148:#include "absl/debugging/symbolize.h"
        -:  149:#include "absl/flags/parse.h"
        -:  150:#include "absl/flags/usage.h"
        -:  151:#include "absl/strings/str_cat.h"
        -:  152:#include "absl/strings/str_replace.h"
        -:  153:#include "absl/strings/string_view.h"
        -:  154:#include "absl/strings/strip.h"
        -:  155:#endif  // GTEST_HAS_ABSL
        -:  156:
        -:  157:// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs
        -:  158:// at the callsite.
        -:  159:#if defined(__has_builtin)
        -:  160:#define GTEST_HAS_BUILTIN(x) __has_builtin(x)
        -:  161:#else
        -:  162:#define GTEST_HAS_BUILTIN(x) 0
        -:  163:#endif  // defined(__has_builtin)
        -:  164:
        -:  165:#if defined(GTEST_HAS_ABSL) && !defined(GTEST_NO_ABSL_FLAGS)
        -:  166:#define GTEST_HAS_ABSL_FLAGS
        -:  167:#endif
        -:  168:
        -:  169:namespace testing {
        -:  170:
        -:  171:using internal::CountIf;
        -:  172:using internal::ForEach;
        -:  173:using internal::GetElementOr;
        -:  174:using internal::Shuffle;
        -:  175:
        -:  176:// Constants.
        -:  177:
        -:  178:// A test whose test suite name or test name matches this filter is
        -:  179:// disabled and not run.
        -:  180:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  181:
        -:  182:// A test suite whose name matches this filter is considered a death
        -:  183:// test suite and will be run before test suites whose name doesn't
        -:  184:// match this filter.
        -:  185:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  186:
        -:  187:// A test filter that matches everything.
        -:  188:static const char kUniversalFilter[] = "*";
        -:  189:
        -:  190:// The default output format.
        -:  191:static const char kDefaultOutputFormat[] = "xml";
        -:  192:// The default output file.
        -:  193:static const char kDefaultOutputFile[] = "test_detail";
        -:  194:
        -:  195:// The environment variable name for the test shard index.
        -:  196:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  197:// The environment variable name for the total number of test shards.
        -:  198:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  199:// The environment variable name for the test shard status file.
        -:  200:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  201:
        -:  202:namespace internal {
        -:  203:
        -:  204:// The text used in failure messages to indicate the start of the
        -:  205:// stack trace.
        -:  206:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  207:
        -:  208:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  209:// is specified on the command line.
        -:  210:bool g_help_flag = false;
        -:  211:
        -:  212:#if GTEST_HAS_FILE_SYSTEM
        -:  213:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  214:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  215:  FILE* fileout = nullptr;
    #####:  216:  FilePath output_file_path(output_file);
    %%%%%:  216-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  216-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  216-block  2
call    6 never executed
    $$$$$:  216-block  3
call    7 never executed
    $$$$$:  216-block  4
    #####:  217:  FilePath output_dir(output_file_path.RemoveFileName());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  218:
    #####:  219:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  219-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  220:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  220-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  220-block  1
        -:  221:  }
    #####:  222:  if (fileout == nullptr) {
    %%%%%:  222-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  223:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  223-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  223-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  223-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  223-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  223-block  4
call   13 never executed
    $$$$$:  223-block  5
call   14 never executed
    $$$$$:  223-block  6
        -:  224:  }
    #####:  225:  return fileout;
    %%%%%:  225-block  0
    #####:  226:}
    %%%%%:  226-block  0
call    0 never executed
call    1 never executed
    $$$$$:  226-block  1
call    2 never executed
    $$$$$:  226-block  2
call    3 never executed
        -:  227:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  228:
        -:  229:}  // namespace internal
        -:  230:
        -:  231:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  232:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  233:static const char* GetDefaultFilter() {
        -:  234:  const char* const testbridge_test_only =
        1:  235:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  235-block  0
call    0 returned 1
        1:  236:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  237:    return testbridge_test_only;
    %%%%%:  237-block  0
        -:  238:  }
        1:  239:  return kUniversalFilter;
        1:  239-block  0
        -:  240:}
        -:  241:
        -:  242:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  243:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  244:static bool GetDefaultFailFast() {
        -:  245:  const char* const testbridge_test_runner_fail_fast =
        1:  246:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  246-block  0
call    0 returned 1
        1:  247:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  248:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  248-block  0
        -:  249:  }
        1:  250:  return false;
        1:  250-block  0
        -:  251:}
        -:  252:
        -:  253:}  // namespace testing
        -:  254:
        -:  255:GTEST_DEFINE_bool_(
        -:  256:    fail_fast,
        -:  257:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  258:                                        testing::GetDefaultFailFast()),
        -:  259:    "True if and only if a test failure should stop further test execution.");
        -:  260:
        -:  261:GTEST_DEFINE_bool_(
        -:  262:    also_run_disabled_tests,
        -:  263:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  264:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  265:
        -:  266:GTEST_DEFINE_bool_(
        -:  267:    break_on_failure,
        -:  268:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  269:    "True if and only if a failed assertion should be a debugger "
        -:  270:    "break-point.");
        -:  271:
        -:  272:GTEST_DEFINE_bool_(catch_exceptions,
        -:  273:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  274:                                                       true),
        -:  275:                   "True if and only if " GTEST_NAME_
        -:  276:                   " should catch exceptions and treat them as test failures.");
        -:  277:
        -:  278:GTEST_DEFINE_string_(
        -:  279:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  280:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  281:    "and auto.  'auto' means to use colors if the output is "
        -:  282:    "being sent to a terminal and the TERM environment variable "
        -:  283:    "is set to a terminal type that supports colors.");
        -:  284:
        -:  285:GTEST_DEFINE_string_(
        -:  286:    filter,
        -:  287:    testing::internal::StringFromGTestEnv("filter",
        -:  288:                                          testing::GetDefaultFilter()),
        -:  289:    "A colon-separated list of glob (not regex) patterns "
        -:  290:    "for filtering the tests to run, optionally followed by a "
        -:  291:    "'-' and a : separated list of negative patterns (tests to "
        -:  292:    "exclude).  A test is run if it matches one of the positive "
        -:  293:    "patterns and does not match any of the negative patterns.");
        -:  294:
        -:  295:GTEST_DEFINE_bool_(
        -:  296:    install_failure_signal_handler,
        -:  297:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  298:                                        false),
        -:  299:    "If true and supported on the current platform, " GTEST_NAME_
        -:  300:    " should "
        -:  301:    "install a signal handler that dumps debugging information when fatal "
        -:  302:    "signals are raised.");
        -:  303:
        -:  304:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  305:
        -:  306:// The net priority order after flag processing is thus:
        -:  307://   --gtest_output command line flag
        -:  308://   GTEST_OUTPUT environment variable
        -:  309://   XML_OUTPUT_FILE environment variable
        -:  310://   ''
        -:  311:GTEST_DEFINE_string_(
        -:  312:    output,
        -:  313:    testing::internal::StringFromGTestEnv(
        -:  314:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  315:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  316:    "optionally followed by a colon and an output file name or directory. "
        -:  317:    "A directory is indicated by a trailing pathname separator. "
        -:  318:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  319:    "If a directory is specified, output files will be created "
        -:  320:    "within that directory, with file-names based on the test "
        -:  321:    "executable's name and, if necessary, made unique by adding "
        -:  322:    "digits.");
        -:  323:
        -:  324:GTEST_DEFINE_bool_(
        -:  325:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  326:    "True if only test failures should be displayed in text output.");
        -:  327:
        -:  328:GTEST_DEFINE_bool_(print_time,
        -:  329:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  330:                   "True if and only if " GTEST_NAME_
        -:  331:                   " should display elapsed time in text output.");
        -:  332:
        -:  333:GTEST_DEFINE_bool_(print_utf8,
        -:  334:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  335:                   "True if and only if " GTEST_NAME_
        -:  336:                   " prints UTF8 characters as text.");
        -:  337:
        -:  338:GTEST_DEFINE_int32_(
        -:  339:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  340:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  341:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  342:
        -:  343:GTEST_DEFINE_int32_(
        -:  344:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  345:    "How many times to repeat each test.  Specify a negative number "
        -:  346:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  347:
        -:  348:GTEST_DEFINE_bool_(
        -:  349:    recreate_environments_when_repeating,
        -:  350:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  351:                                        false),
        -:  352:    "Controls whether global test environments are recreated for each repeat "
        -:  353:    "of the tests. If set to false the global test environments are only set "
        -:  354:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  355:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  356:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  357:    "there is no last run, the environments will always be recreated to avoid "
        -:  358:    "leaks.");
        -:  359:
        -:  360:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  361:                   "True if and only if " GTEST_NAME_
        -:  362:                   " should include internal stack frames when "
        -:  363:                   "printing test failure stack traces.");
        -:  364:
        -:  365:GTEST_DEFINE_bool_(shuffle,
        -:  366:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  367:                   "True if and only if " GTEST_NAME_
        -:  368:                   " should randomize tests' order on every run.");
        -:  369:
        -:  370:GTEST_DEFINE_int32_(
        -:  371:    stack_trace_depth,
        -:  372:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  373:                                         testing::kMaxStackTraceDepth),
        -:  374:    "The maximum number of stack frames to print when an "
        -:  375:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  376:
        -:  377:GTEST_DEFINE_string_(
        -:  378:    stream_result_to,
        -:  379:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  380:    "This flag specifies the host name and the port number on which to stream "
        -:  381:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  382:    "Linux and macOS.");
        -:  383:
        -:  384:GTEST_DEFINE_bool_(
        -:  385:    throw_on_failure,
        -:  386:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  387:    "When this flag is specified, a failed assertion will throw an exception "
        -:  388:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  389:    "otherwise. For use with an external test framework.");
        -:  390:
        -:  391:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  392:GTEST_DEFINE_string_(
        -:  393:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  394:    "This flag specifies the flagfile to read command-line flags from.");
        -:  395:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  396:
        -:  397:namespace testing {
        -:  398:namespace internal {
        -:  399:
        -:  400:const uint32_t Random::kMaxRange;
        -:  401:
        -:  402:// Generates a random number from [0, range), using a Linear
        -:  403:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  404:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  405:uint32_t Random::Generate(uint32_t range) {
        -:  406:  // These constants are the same as are used in glibc's rand(3).
        -:  407:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  408:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  409:
    #####:  410:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  410-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  410-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  410-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  410-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  410-block  4
call   13 never executed
    $$$$$:  410-block  5
call   14 never executed
    $$$$$:  410-block  6
call   15 never executed
    #####:  411:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  411-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  411-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  411-block  2
call    6 never executed
    %%%%%:  411-block  3
call    7 never executed
    $$$$$:  411-block  4
call    8 never executed
    #####:  412:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  412-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  412-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####:  413:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  413-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  413-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  413-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  413-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -:  414:
        -:  415:  // Converting via modulus introduces a bit of downward bias, but
        -:  416:  // it's simple, and a linear congruential generator isn't too good
        -:  417:  // to begin with.
    #####:  418:  return state_ % range;
    %%%%%:  418-block  0
    %%%%%:  418-block  1
        -:  419:}
        -:  420:
        -:  421:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  422:// Google Test.  Useful for catching the user mistake of not initializing
        -:  423:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  424:static bool GTestIsInitialized() { return !GetArgvs().empty(); }
        2:  424-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  424-block  1
call    3 returned 2
        2:  424-block  2
call    4 returned 2
        2:  424-block  3
        -:  425:
        -:  426:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  427:// results of calling a given int-returning method on each.
        -:  428:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  429:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  430:                                int (TestSuite::*method)() const) {
        5:  431:  int sum = 0;
       25:  432:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  432-block  0
       25:  432-block  1
call    0 returned 25
branch  1 taken 20
branch  2 taken 5 (fallthrough)
      20*:  433:    sum += (case_list[i]->*method)();
       20:  433-block  0
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
    %%%%%:  433-block  1
       20:  433-block  2
       20:  433-block  3
call    3 returned 20
        -:  434:  }
        5:  435:  return sum;
        5:  435-block  0
        -:  436:}
        -:  437:
        -:  438:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  439:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  440:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  440-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  440-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  440-block  2
    %%%%%:  440-block  3
    %%%%%:  440-block  4
        -:  441:}
        -:  442:
        -:  443:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 8 returned 100% blocks executed 88%
        8:  444:static bool TestSuiteFailed(const TestSuite* test_suite) {
       8*:  445:  return test_suite->should_run() && test_suite->Failed();
        8:  445-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        8:  445-block  1
call    3 returned 8
branch  4 taken 0 (fallthrough)
branch  5 taken 8
    %%%%%:  445-block  2
        8:  445-block  3
        8:  445-block  4
        -:  446:}
        -:  447:
        -:  448:// Returns true if and only if test_suite contains at least one test that
        -:  449:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 8 returned 100% blocks executed 100%
        8:  450:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        8:  451:  return test_suite->should_run();
        8:  451-block  0
call    0 returned 8
        -:  452:}
        -:  453:
        -:  454:namespace {
        -:  455:
        -:  456:// Returns true if test part results of type `type` should include a stack
        -:  457:// trace.
function _ZN7testing8internal12_GLOBAL__N_133ShouldEmitStackTraceForResultTypeENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####:  458:bool ShouldEmitStackTraceForResultType(TestPartResult::Type type) {
        -:  459:  // Suppress emission of the stack trace for SUCCEED() since it likely never
        -:  460:  // requires investigation, and GTEST_SKIP() since skipping is an intentional
        -:  461:  // act by the developer rather than a failure requiring investigation.
    #####:  462:  return type != TestPartResult::kSuccess && type != TestPartResult::kSkip;
    %%%%%:  462-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  462-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  462-block  2
    %%%%%:  462-block  3
    %%%%%:  462-block  4
        -:  463:}
        -:  464:
        -:  465:}  // namespace
        -:  466:
        -:  467:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  468:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  469:                           int line, const char* message)
    #####:  470:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  470-block  1
    $$$$$:  470-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  470-block  3
call    6 never executed
        -:  471:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  472:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  472-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  472-block  1
call    2 never executed
call    3 never executed
        -:  473:
        -:  474:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  475:void AssertHelper::operator=(const Message& message) const {
    #####:  476:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  476-block  0
call    0 never executed
    #####:  477:      data_->type, data_->file, data_->line,
    %%%%%:  477-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  478:      AppendUserMessage(data_->message, message),
    %%%%%:  478-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  478-block  1
call    3 never executed
    $$$$$:  478-block  2
call    4 never executed
    $$$$$:  478-block  3
    #####:  479:      ShouldEmitStackTraceForResultType(data_->type)
call    0 never executed
    #####:  480:          ? UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  480-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  480-block  1
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  480-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$:  480-block  3
call   15 never executed
    $$$$$:  480-block  4
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$:  480-block  5
        -:  481:          : ""
        -:  482:      // Skips the stack frame for this function itself.
        -:  483:  );  // NOLINT
    #####:  484:}
    %%%%%:  484-block  0
        -:  485:
        -:  486:namespace {
        -:  487:
        -:  488:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  489:// to creates test cases for it, a synthetic test case is
        -:  490:// inserted to report ether an error or a log message.
        -:  491://
        -:  492:// This configuration bit will likely be removed at some point.
        -:  493:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  494:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  495:
        -:  496:// A test that fails at a given file/line location with a given message.
        -:  497:class FailureTest : public Test {
        -:  498: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  499:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  500:                       bool as_error)
    #####:  501:      : loc_(loc),
    #####:  502:        error_message_(std::move(error_message)),
    %%%%%:  502-block  0
call    0 never executed
call    1 never executed
    #####:  503:        as_error_(as_error) {}
    %%%%%:  503-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$:  503-block  1
call    4 never executed
        -:  504:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  505:  void TestBody() override {
    #####:  506:    if (as_error_) {
    %%%%%:  506-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  507:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  507-block  0
call    3 never executed
    $$$$$:  507-block  1
call    4 never executed
    $$$$$:  507-block  2
    #####:  508:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  508-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  508-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  508-block  2
call    6 never executed
    %%%%%:  508-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
    $$$$$:  508-block  4
call   11 never executed
        -:  509:    } else {
    #####:  510:      std::cout << error_message_ << std::endl;
    %%%%%:  510-block  0
call    0 never executed
call    1 never executed
        -:  511:    }
    #####:  512:  }
    %%%%%:  512-block  0
        -:  513:
        -:  514: private:
        -:  515:  const CodeLocation loc_;
        -:  516:  const std::string error_message_;
        -:  517:  const bool as_error_;
        -:  518:};
        -:  519:
        -:  520:}  // namespace
        -:  521:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  522:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  523:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  523-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  524:}
        -:  525:
        -:  526:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  527:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  528:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  528-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  528-block  1
    %%%%%:  528-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  528-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  528-block  4
call    9 never executed
    $$$$$:  528-block  5
call   10 never executed
    $$$$$:  528-block  6
    $$$$$:  528-block  7
    #####:  529:}
        -:  530:
        -:  531:// If this parameterized test suite has no instantiations (and that
        -:  532:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  533:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  534:                             bool has_test_p) {
    #####:  535:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  535-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  536:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  536-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  536-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  536-block  2
    %%%%%:  536-block  3
    $$$$$:  536-block  4
    $$$$$:  536-block  5
        -:  537:
    #####:  538:  const char kMissingInstantiation[] =  //
        -:  539:      " is defined via TEST_P, but never instantiated. None of the test "
        -:  540:      "cases "
        -:  541:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  542:      "ones provided expand to nothing."
        -:  543:      "\n\n"
        -:  544:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  545:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  546:      "placed in a library that may be linked in to get other utilities.)";
        -:  547:
    #####:  548:  const char kMissingTestCase[] =  //
        -:  549:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  550:      "defined via TEST_P . No test cases will run."
        -:  551:      "\n\n"
        -:  552:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  553:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  554:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  555:      "removed but the rest got left behind.";
        -:  556:
        -:  557:  std::string message =
    #####:  558:      "Parameterized test suite " + name +
    %%%%%:  558-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  558-block  1
    %%%%%:  558-block  2
    %%%%%:  558-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  558-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
call    9 never executed
    $$$$$:  558-block  5
call   10 never executed
    $$$$$:  558-block  6
call   11 never executed
    $$$$$:  558-block  7
    $$$$$:  558-block  8
    #####:  559:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  559-block  1
call    4 never executed
    $$$$$:  559-block  2
        -:  560:      "\n\n"
        -:  561:      "To suppress this error for this test suite, insert the following line "
        -:  562:      "(in a non-header) in the namespace it is defined in:"
        -:  563:      "\n\n"
    #####:  564:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  564-block  1
call    3 never executed
    $$$$$:  564-block  2
call    4 never executed
    $$$$$:  564-block  3
    #####:  565:      name + ");";
    %%%%%:  565-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  566:
    #####:  567:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  567-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  567-block  1
call    6 never executed
    $$$$$:  567-block  2
call    7 never executed
    $$$$$:  567-block  3
    #####:  568:  RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  569:      "GoogleTestVerification", full_name.c_str(),
        -:  570:      nullptr,  // No type parameter.
        -:  571:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  572:      location.file.c_str(), location.line, [message, location] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  572-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  572-block  1
call    6 never executed
    %%%%%:  572-block  2
call    7 never executed
    $$$$$:  572-block  3
call    8 never executed
    $$$$$:  572-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  572-block  5
call   11 never executed
    $$$$$:  572-block  6
    #####:  573:        return new FailureTest(location, message,
    #####:  574:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  574-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  574-block  2
    %%%%%:  574-block  3
call    7 never executed
    %%%%%:  574-block  4
    $$$$$:  574-block  5
call    8 never executed
    $$$$$:  574-block  6
    $$$$$:  574-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  574-block  8
call   11 never executed
        -:  575:      });
    #####:  576:}
call    0 never executed
call    1 never executed
    $$$$$:  576-block  0
call    2 never executed
    $$$$$:  576-block  1
call    3 never executed
        -:  577:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  578:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  579:                                        CodeLocation code_location) {
    #####:  580:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  580-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  580-block  1
call    6 never executed
    $$$$$:  580-block  2
call    7 never executed
    #####:  581:      test_suite_name, std::move(code_location));
call    0 never executed
    #####:  582:}
        -:  583:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  584:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  585:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  585-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  586:      case_name);
    #####:  587:}
        -:  588:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  589:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  590:    const char* test_suite_name, CodeLocation code_location) {
    #####:  591:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  591-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  591-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  591-block  2
call    6 never executed
    $$$$$:  591-block  3
call    7 never executed
    $$$$$:  591-block  4
    $$$$$:  591-block  5
    #####:  592:                  TypeParameterizedTestSuiteInfo(std::move(code_location)));
    %%%%%:  592-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$:  592-block  1
call    5 never executed
    $$$$$:  592-block  2
call    6 never executed
    $$$$$:  592-block  3
    $$$$$:  592-block  4
    #####:  593:}
        -:  594:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  595:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  596:    const char* test_suite_name) {
    #####:  597:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  597-block  0
    %%%%%:  597-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  597-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  597-block  3
call    6 never executed
    $$$$$:  597-block  4
call    7 never executed
    $$$$$:  597-block  5
    $$$$$:  597-block  6
    #####:  598:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  599:    it->second.instantiated = true;
    %%%%%:  599-block  0
call    0 never executed
        -:  600:  } else {
    #####:  601:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  601-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  601-block  1
call    3 never executed
    %%%%%:  601-block  2
call    4 never executed
    $$$$$:  601-block  3
call    5 never executed
    $$$$$:  601-block  4
    #####:  602:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  602-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  602-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -:  603:  }
    #####:  604:}
    %%%%%:  604-block  0
        -:  605:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 11%
        1:  606:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  607:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  607-block  0
call    0 returned 1
       1*:  608:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
    %%%%%:  608-block  0
call    2 never executed
    %%%%%:  608-block  1
call    3 never executed
        1:  608-block  2
call    4 returned 1
branch  5 taken 0
branch  6 taken 1 (fallthrough)
    #####:  609:    if (testcase.second.instantiated) continue;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  609-block  0
    %%%%%:  609-block  1
    #####:  610:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  610-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  610-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  610-block  2
    $$$$$:  610-block  3
    $$$$$:  610-block  4
        -:  611:
        -:  612:    std::string message =
    #####:  613:        "Type parameterized test suite " + testcase.first +
    %%%%%:  613-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
    $$$$$:  613-block  1
call    5 never executed
    $$$$$:  613-block  2
call    6 never executed
    $$$$$:  613-block  3
    $$$$$:  613-block  4
        -:  614:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  615:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  616:        "\n\n"
        -:  617:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  618:        "part of binaries that intend to use them. (As opposed to, for "
        -:  619:        "example, being placed in a library that may be linked in to get "
        -:  620:        "other "
        -:  621:        "utilities.)"
        -:  622:        "\n\n"
        -:  623:        "To suppress this error for this test suite, insert the following "
        -:  624:        "line "
        -:  625:        "(in a non-header) in the namespace it is defined in:"
        -:  626:        "\n\n"
    #####:  627:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  627-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  627-block  1
call    3 never executed
    $$$$$:  627-block  2
call    4 never executed
    $$$$$:  627-block  3
    #####:  628:        testcase.first + ");";
    %%%%%:  628-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  628-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  629:
        -:  630:    std::string full_name =
    #####:  631:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  631-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  631-block  1
call    6 never executed
    $$$$$:  631-block  2
call    7 never executed
    $$$$$:  631-block  3
    #####:  632:    RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  633:        "GoogleTestVerification", full_name.c_str(),
        -:  634:        nullptr,  // No type parameter.
        -:  635:        nullptr,  // No value parameter.
        -:  636:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  637:        testcase.second.code_location.line, [message, testcase] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  637-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  637-block  1
call    6 never executed
    %%%%%:  637-block  2
call    7 never executed
    $$$$$:  637-block  3
call    8 never executed
    $$$$$:  637-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  637-block  5
call   11 never executed
    $$$$$:  637-block  6
    #####:  638:          return new FailureTest(testcase.second.code_location, message,
    #####:  639:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  639-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  639-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  639-block  2
    %%%%%:  639-block  3
call    7 never executed
    %%%%%:  639-block  4
    $$$$$:  639-block  5
call    8 never executed
    $$$$$:  639-block  6
    $$$$$:  639-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  639-block  8
call   11 never executed
        -:  640:        });
    #####:  641:  }
call    0 never executed
call    1 never executed
    $$$$$:  641-block  0
call    2 never executed
    $$$$$:  641-block  1
call    3 never executed
        1:  642:}
        1:  642-block  0
        -:  643:
        -:  644:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  645:static ::std::vector<std::string> g_argvs;
        -:  646:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  647:::std::vector<std::string> GetArgvs() {
        -:  648:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  649:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  650:  // ::string. This code converts it to the appropriate type.
        -:  651:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  652:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  653:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  654:  return g_argvs;
        2:  654-block  0
call    0 returned 2
        -:  655:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  656:}
        -:  657:
        -:  658:#if GTEST_HAS_FILE_SYSTEM
        -:  659:// Returns the current application's name, removing directory path if that
        -:  660:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  661:FilePath GetCurrentExecutableName() {
    #####:  662:  FilePath result;
    %%%%%:  662-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  663:
        -:  664:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_OS2)
    #####:  665:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
    %%%%%:  665-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  665-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  665-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  665-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  665-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  665-block  5
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$:  665-block  6
call   20 never executed
    $$$$$:  665-block  7
call   21 never executed
    $$$$$:  665-block  8
call   22 never executed
    $$$$$:  665-block  9
call   23 never executed
    $$$$$:  665-block 10
    $$$$$:  665-block 11
    $$$$$:  665-block 12
    $$$$$:  665-block 13
        -:  666:#else
        -:  667:  result.Set(FilePath(GetArgvs()[0]));
        -:  668:#endif  // GTEST_OS_WINDOWS
        -:  669:
    #####:  670:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  670-block  0
    #####:  671:}
    %%%%%:  671-block  0
call    0 never executed
    $$$$$:  671-block  1
call    1 never executed
        -:  672:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  673:
        -:  674:// Functions for processing the gtest_output flag.
        -:  675:
        -:  676:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 45%
        1:  677:std::string UnitTestOptions::GetOutputFormat() {
        1:  678:  std::string s = GTEST_FLAG_GET(output);
        1:  678-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  679:  const char* const gtest_output_flag = s.c_str();
        1:  679-block  0
call    0 returned 1
        1:  680:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  681:  return (colon == nullptr)
        1:  682:             ? std::string(gtest_output_flag)
        -:  683:             : std::string(gtest_output_flag,
       3*:  684:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  684-block  0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    %%%%%:  684-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
        1:  684-block  2
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        1:  684-block  3
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  684-block  4
    $$$$$:  684-block  5
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  684-block  6
    $$$$$:  684-block  7
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  684-block  8
        1:  685:}
        1:  685-block  0
call    0 returned 1
    $$$$$:  685-block  1
call    1 never executed
        -:  686:
        -:  687:#if GTEST_HAS_FILE_SYSTEM
        -:  688:// Returns the name of the requested output file, or the default if none
        -:  689:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  690:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  691:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  692:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  692-block  0
call    0 never executed
        -:  693:
    #####:  694:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  695:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  695-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  695-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  695-block  2
call    6 never executed
call    7 never executed
    $$$$$:  695-block  3
    $$$$$:  695-block  4
        -:  696:
    #####:  697:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  698:  if (colon == nullptr)
    %%%%%:  698-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  699:    return internal::FilePath::MakeFileName(
    %%%%%:  699-block  0
call    0 never executed
    %%%%%:  699-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  699-block  2
call    4 never executed
    $$$$$:  699-block  3
call    5 never executed
    $$$$$:  699-block  4
    #####:  700:               internal::FilePath(
    %%%%%:  700-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  700-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  700-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  700-block  3
call   12 never executed
    $$$$$:  700-block  4
call   13 never executed
    $$$$$:  700-block  5
    $$$$$:  700-block  6
    $$$$$:  700-block  7
        -:  701:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  702:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
    %%%%%:  702-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  702-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
    $$$$$:  702-block  2
call    8 never executed
    $$$$$:  702-block  3
call    9 never executed
    $$$$$:  702-block  4
    $$$$$:  702-block  5
    $$$$$:  702-block  6
    #####:  703:        .string();
    %%%%%:  703-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  703-block  1
        -:  704:
    #####:  705:  internal::FilePath output_name(colon + 1);
    %%%%%:  705-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  705-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  705-block  2
call    6 never executed
    $$$$$:  705-block  3
call    7 never executed
    $$$$$:  705-block  4
    $$$$$:  705-block  5
    #####:  706:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  707:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  707-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  707-block  1
    #####:  708:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  708-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  708-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  708-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  708-block  3
call   12 never executed
    $$$$$:  708-block  4
call   13 never executed
    $$$$$:  708-block  5
    $$$$$:  708-block  6
    $$$$$:  708-block  7
    #####:  709:        internal::FilePath(colon + 1));
    %%%%%:  709-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  709-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  709-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  709-block  3
call    9 never executed
    $$$$$:  709-block  4
call   10 never executed
    $$$$$:  709-block  5
    $$$$$:  709-block  6
    $$$$$:  709-block  7
        -:  710:
    #####:  711:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  711-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  711-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  711-block  2
        -:  712:
        -:  713:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  714:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  714-block  0
call    3 never executed
    $$$$$:  714-block  1
call    4 never executed
    $$$$$:  714-block  2
    #####:  715:      GetOutputFormat().c_str()));
    %%%%%:  715-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  715-block  1
call    3 never executed
    %%%%%:  715-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$:  715-block  3
call    8 never executed
    $$$$$:  715-block  4
    #####:  716:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  716-block  0
    #####:  717:}
    %%%%%:  717-block  0
call    0 never executed
    %%%%%:  717-block  1
call    1 never executed
    %%%%%:  717-block  2
call    2 never executed
call    3 never executed
    $$$$$:  717-block  3
call    4 never executed
    $$$$$:  717-block  4
call    5 never executed
    $$$$$:  717-block  5
call    6 never executed
    $$$$$:  717-block  6
call    7 never executed
        -:  718:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  719:
        -:  720:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  721:// pattern consists of regular characters, single-character wildcards (?), and
        -:  722:// multi-character wildcards (*).
        -:  723://
        -:  724:// This function implements a linear-time string globbing algorithm based on
        -:  725:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 212 returned 100% blocks executed 74%
      212:  726:static bool PatternMatchesString(const std::string& name_str,
        -:  727:                                 const char* pattern, const char* pattern_end) {
      212:  728:  const char* name = name_str.c_str();
      212:  728-block  0
call    0 returned 212
      212:  729:  const char* const name_begin = name;
      212:  730:  const char* const name_end = name + name_str.size();
call    0 returned 212
        -:  731:
      212:  732:  const char* pattern_next = pattern;
      212:  733:  const char* name_next = name;
        -:  734:
    5532*:  735:  while (pattern < pattern_end || name < name_end) {
     5532:  735-block  0
branch  0 taken 5532
branch  1 taken 0 (fallthrough)
    %%%%%:  735-block  1
branch  2 never executed
branch  3 never executed (fallthrough)
     5532:  736:    if (pattern < pattern_end) {
     5532:  736-block  0
branch  0 taken 5532 (fallthrough)
branch  1 taken 0
     5532:  737:      switch (*pattern) {
     5532:  737-block  0
branch  0 taken 2817
branch  1 taken 0
branch  2 taken 2715
     2817:  738:        default:  // Match an ordinary character.
    2817*:  739:          if (name < name_end && *name == *pattern) {
     2817:  739-block  0
branch  0 taken 2707 (fallthrough)
branch  1 taken 110
     2707:  739-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2707
    #####:  740:            ++pattern;
    #####:  741:            ++name;
    #####:  742:            continue;
    %%%%%:  742-block  0
        -:  743:          }
     2817:  744:          break;
     2817:  744-block  0
    #####:  745:        case '?':  // Match any single character.
    #####:  746:          if (name < name_end) {
    %%%%%:  746-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  747:            ++pattern;
    #####:  748:            ++name;
    #####:  749:            continue;
    %%%%%:  749-block  0
        -:  750:          }
    #####:  751:          break;
    %%%%%:  751-block  0
     2715:  752:        case '*':
        -:  753:          // Match zero or more characters. Start by skipping over the wildcard
        -:  754:          // and matching zero characters from name. If that fails, restart and
        -:  755:          // match one more character than the last attempt.
     2715:  756:          pattern_next = pattern;
     2715:  757:          name_next = name + 1;
     2715:  758:          ++pattern;
     2715:  759:          continue;
     2715:  759-block  0
        -:  760:      }
        -:  761:    }
        -:  762:    // Failed to match a character. Restart if possible.
     2817:  763:    if (name_begin < name_next && name_next <= name_end) {
     2817:  763-block  0
branch  0 taken 2715 (fallthrough)
branch  1 taken 102
     2715:  763-block  1
branch  2 taken 2605 (fallthrough)
branch  3 taken 110
     2605:  764:      pattern = pattern_next;
     2605:  765:      name = name_next;
     2605:  766:      continue;
     2605:  766-block  0
        -:  767:    }
      212:  768:    return false;
      212:  768-block  0
        -:  769:  }
    #####:  770:  return true;
    %%%%%:  770-block  0
        -:  771:}
        -:  772:
        -:  773:namespace {
        -:  774:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 265 returned 100% blocks executed 100%
      265:  775:bool IsGlobPattern(const std::string& pattern) {
      265:  776:  return std::any_of(pattern.begin(), pattern.end(),
      265:  776-block  0
call    0 returned 265
call    1 returned 265
call    2 returned 265
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 6555 returned 100% blocks executed 100%
     6820:  777:                     [](const char c) { return c == '?' || c == '*'; });
     6555:  777-block  0
branch  0 taken 6555 (fallthrough)
branch  1 taken 0
     6555:  777-block  1
branch  2 taken 214 (fallthrough)
branch  3 taken 6341
      214:  777-block  2
     6341:  777-block  3
     6555:  777-block  4
        -:  778:}
        -:  779:
        -:  780:class UnitTestFilter {
        -:  781: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 2 returned 100% blocks executed 100%
        2:  782:  UnitTestFilter() = default;
        2:  782-block  0
call    0 returned 2
call    1 returned 2
        -:  783:
        -:  784:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 76%
        6:  785:  explicit UnitTestFilter(const std::string& filter) {
        6:  785-block  0
call    0 returned 6
call    1 returned 6
        -:  786:    // By design "" filter matches "" string.
        6:  787:    std::vector<std::string> all_patterns;
call    0 returned 6
        6:  788:    SplitString(filter, ':', &all_patterns);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  789:    const auto exact_match_patterns_begin = std::partition(
        6:  789-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        -:  790:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        -:  791:
       12:  792:    glob_patterns_.reserve(static_cast<size_t>(
       12:  793:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        6:  793-block  0
call    0 returned 6
        6:  793-block  1
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
       12:  794:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        6:  794-block  0
call    0 returned 6
        6:  794-block  1
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  794-block  2
        6:  795:              std::inserter(glob_patterns_, glob_patterns_.begin()));
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
       12:  796:    std::move(
        6:  796-block  0
call    0 returned 6
        6:  796-block  1
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  796-block  2
        -:  797:        exact_match_patterns_begin, all_patterns.end(),
        6:  798:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  799:  }
        6:  799-block  0
call    0 returned 6
    $$$$$:  799-block  1
call    1 never executed
    $$$$$:  799-block  2
call    2 never executed
    $$$$$:  799-block  3
call    3 never executed
        -:  800:
        -:  801:  // Returns true if and only if name matches at least one of the patterns in
        -:  802:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 208 returned 100% blocks executed 93%
      208:  803:  bool MatchesName(const std::string& name) const {
      365:  804:    return exact_match_patterns_.find(name) != exact_match_patterns_.end() ||
      208:  804-block  0
call    0 returned 208
call    1 returned 208
branch  2 taken 208 (fallthrough)
branch  3 taken 0 (throw)
      208:  804-block  1
call    4 returned 208
branch  5 taken 157 (fallthrough)
branch  6 taken 51
       51:  804-block  2
      157:  804-block  3
    $$$$$:  804-block  4
      157:  805:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
      157:  805-block  0
call    0 returned 157
call    1 returned 157
call    2 returned 157
branch  3 taken 157 (fallthrough)
branch  4 taken 0 (throw)
      157:  805-block  1
branch  5 taken 0 (fallthrough)
branch  6 taken 157
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 212 returned 100% blocks executed 100%
      212:  806:                       [&name](const std::string& pattern) {
      212:  807:                         return PatternMatchesString(
call    0 returned 212
call    1 returned 212
        -:  808:                             name, pattern.c_str(),
      424:  809:                             pattern.c_str() + pattern.size());
      212:  809-block  0
call    0 returned 212
call    1 returned 212
      208:  810:                       });
      208:  810-block  0
      208:  810-block  1
        -:  811:  }
        -:  812:
        -:  813: private:
        -:  814:  std::vector<std::string> glob_patterns_;
        -:  815:  std::unordered_set<std::string> exact_match_patterns_;
        -:  816:};
        -:  817:
        -:  818:class PositiveAndNegativeUnitTestFilter {
        -:  819: public:
        -:  820:  // Constructs a positive and a negative filter from a string. The string
        -:  821:  // contains a positive filter optionally followed by a '-' character and a
        -:  822:  // negative filter. In case only a negative filter is provided the positive
        -:  823:  // filter will be assumed "*".
        -:  824:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 21%
        1:  825:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        1:  825-block  0
call    0 returned 1
call    1 returned 1
        1:  826:    std::vector<std::string> positive_and_negative_filters;
call    0 returned 1
        -:  827:
        -:  828:    // NOTE: `SplitString` always returns a non-empty container.
        1:  829:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  830:    const auto& positive_filter = positive_and_negative_filters.front();
        1:  830-block  0
call    0 returned 1
        -:  831:
        1:  832:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  833:      positive_filter_ = UnitTestFilter(
    %%%%%:  833-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  833-block  1
    #####:  834:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  834-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  834-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  834-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  834-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$:  834-block  4
call   13 never executed
    $$$$$:  834-block  5
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  834-block  6
    $$$$$:  834-block  7
        -:  835:
        -:  836:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  837:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  838:      // string parts with `-` as separator to generate the negative filter.
    #####:  839:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  839-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  840:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  840-block  0
    %%%%%:  840-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  841:        negative_filter_string =
    #####:  842:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  842-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  842-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  842-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  842-block  3
call   10 never executed
    $$$$$:  842-block  4
    $$$$$:  842-block  5
    #####:  843:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  843-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  843-block  1
call    3 never executed
call    4 never executed
    $$$$$:  843-block  2
    #####:  844:    } else {
call    0 never executed
    $$$$$:  844-block  0
call    1 never executed
        -:  845:      // In case we don't have a negative filter and positive filter is ""
        -:  846:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  847:      // negative filter.
        1:  848:      positive_filter_ = UnitTestFilter(positive_filter);
        1:  848-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  848-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:  848-block  2
        -:  849:    }
        1:  850:  }
        1:  850-block  0
call    0 returned 1
    $$$$$:  850-block  1
call    1 never executed
    $$$$$:  850-block  2
call    2 never executed
    $$$$$:  850-block  3
call    3 never executed
        -:  851:
        -:  852:  // Returns true if and only if test name (this is generated by appending test
        -:  853:  // suit name and test name via a '.' character) matches the positive filter
        -:  854:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 51 returned 100% blocks executed 64%
       51:  855:  bool MatchesTest(const std::string& test_suite_name,
        -:  856:                   const std::string& test_name) const {
       51:  857:    return MatchesName(test_suite_name + "." + test_name);
       51:  857-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51:  857-block  1
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
       51:  857-block  2
call    6 returned 51
branch  7 taken 51 (fallthrough)
branch  8 taken 0 (throw)
       51:  857-block  3
       51:  857-block  4
call    9 returned 51
call   10 returned 51
       51:  857-block  5
    $$$$$:  857-block  6
call   11 never executed
    $$$$$:  857-block  7
call   12 never executed
    $$$$$:  857-block  8
        -:  858:  }
        -:  859:
        -:  860:  // Returns true if and only if name matches the positive filter and does not
        -:  861:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 51 returned 100% blocks executed 88%
       51:  862:  bool MatchesName(const std::string& name) const {
     102*:  863:    return positive_filter_.MatchesName(name) &&
       51:  863-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0
       51:  863-block  1
    %%%%%:  863-block  2
      102:  864:           !negative_filter_.MatchesName(name);
       51:  864-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0
       51:  864-block  1
        -:  865:  }
        -:  866:
        -:  867: private:
        -:  868:  UnitTestFilter positive_filter_;
        -:  869:  UnitTestFilter negative_filter_;
        -:  870:};
        -:  871:}  // namespace
        -:  872:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  873:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
    %%%%%:  873-block  0
        -:  874:                                    const char* filter) {
    #####:  875:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  875-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  875-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  875-block  3
    %%%%%:  875-block  4
call    9 never executed
call   10 never executed
    %%%%%:  875-block  5
    $$$$$:  875-block  6
call   11 never executed
    $$$$$:  875-block  7
call   12 never executed
    $$$$$:  875-block  8
    $$$$$:  875-block  9
        -:  876:}
        -:  877:
        -:  878:// Returns true if and only if the user-specified filter matches the test
        -:  879:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  880:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  881:                                        const std::string& test_name) {
        -:  882:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  883:  // positive filter and negative filter portions
    #####:  884:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  884-block  1
call    3 never executed
    $$$$$:  884-block  2
call    4 never executed
    #####:  885:      .MatchesTest(test_suite_name, test_name);
    %%%%%:  885-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  885-block  1
    %%%%%:  885-block  2
        -:  886:}
        -:  887:
        -:  888:#if GTEST_HAS_SEH
        -:  889:static std::string FormatSehExceptionMessage(DWORD exception_code,
        -:  890:                                             const char* location) {
        -:  891:  Message message;
        -:  892:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -:  893:          << std::setbase(10) << " thrown in " << location << ".";
        -:  894:  return message.GetString();
        -:  895:}
        -:  896:
        -:  897:int UnitTestOptions::GTestProcessSEH(DWORD seh_code, const char* location) {
        -:  898:  // Google Test should handle a SEH exception if:
        -:  899:  //   1. the user wants it to, AND
        -:  900:  //   2. this is not a breakpoint exception or stack overflow, AND
        -:  901:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  902:  //      apparently).
        -:  903:  //
        -:  904:  // SEH exception code for C++ exceptions.
        -:  905:  // (see https://support.microsoft.com/kb/185294 for more information).
        -:  906:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  907:
        -:  908:  if (!GTEST_FLAG_GET(catch_exceptions) || seh_code == kCxxExceptionCode ||
        -:  909:      seh_code == EXCEPTION_BREAKPOINT ||
        -:  910:      seh_code == EXCEPTION_STACK_OVERFLOW) {
        -:  911:    return EXCEPTION_CONTINUE_SEARCH;  // Don't handle these exceptions
        -:  912:  }
        -:  913:
        -:  914:  internal::ReportFailureInUnknownLocation(
        -:  915:      TestPartResult::kFatalFailure,
        -:  916:      FormatSehExceptionMessage(seh_code, location) +
        -:  917:          "\n"
        -:  918:          "Stack trace:\n" +
        -:  919:          ::testing::internal::GetCurrentOsStackTraceExceptTop(1));
        -:  920:
        -:  921:  return EXCEPTION_EXECUTE_HANDLER;
        -:  922:}
        -:  923:#endif  // GTEST_HAS_SEH
        -:  924:
        -:  925:}  // namespace internal
        -:  926:
        -:  927:// The c'tor sets this object as the test part result reporter used by
        -:  928:// Google Test.  The 'result' parameter specifies where to report the
        -:  929:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  930:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  931:    TestPartResultArray* result)
    #####:  932:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  932-block  0
call    0 never executed
    #####:  933:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  934:}
    %%%%%:  934-block  0
    $$$$$:  934-block  1
call    0 never executed
        -:  935:
        -:  936:// The c'tor sets this object as the test part result reporter used by
        -:  937:// Google Test.  The 'result' parameter specifies where to report the
        -:  938:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  939:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  940:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  941:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  941-block  0
call    0 never executed
    #####:  942:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  943:}
    %%%%%:  943-block  0
    $$$$$:  943-block  1
call    0 never executed
        -:  944:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  945:void ScopedFakeTestPartResultReporter::Init() {
    #####:  946:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  946-block  0
call    0 never executed
    #####:  947:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  948:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  948-block  0
call    0 never executed
    #####:  949:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  950:  } else {
    #####:  951:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  951-block  0
call    0 never executed
    #####:  952:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  953:  }
    #####:  954:}
        -:  955:
        -:  956:// The d'tor restores the test part result reporter used by Google Test
        -:  957:// before.
    #####:  958:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  959:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  960:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  961:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  962:  } else {
    #####:  963:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  964:  }
    #####:  965:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  958:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  959:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  960:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  961:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  962:  } else {
        -:  963:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  964:  }
    #####:  965:}
    %%%%%:  965-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  958:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  959:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  959-block  0
call    0 never executed
    #####:  960:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  961:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  961-block  0
call    0 never executed
        -:  962:  } else {
    #####:  963:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  963-block  0
call    0 never executed
        -:  964:  }
    #####:  965:}
    %%%%%:  965-block  0
call    0 never executed
------------------
        -:  966:
        -:  967:// Increments the test part result count and remembers the result.
        -:  968:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  969:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  970:    const TestPartResult& result) {
    #####:  971:  result_->Append(result);
    %%%%%:  971-block  0
call    0 never executed
    #####:  972:}
        -:  973:
        -:  974:namespace internal {
        -:  975:
        -:  976:// Returns the type ID of ::testing::Test.  We should always call this
        -:  977:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  978:// testing::Test.  This is to work around a suspected linker bug when
        -:  979:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  980:// GetTypeId< ::testing::Test>() to return different values depending
        -:  981:// on whether the call is from the Google Test framework itself or
        -:  982:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  983:// return the same value, as it always calls GetTypeId<>() from the
        -:  984:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 52 returned 100% blocks executed 100%
       52:  985:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
       52:  985-block  0
call    0 returned 52
        -:  986:
        -:  987:// The value of GetTestTypeId() as seen from within the Google Test
        -:  988:// library.  This is solely for testing GetTestTypeId().
        -:  989:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  990:
        -:  991:// This predicate-formatter checks that 'results' contains a test part
        -:  992:// failure of the given type and that the failure message contains the
        -:  993:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  994:static AssertionResult HasOneFailure(const char* /* results_expr */,
    %%%%%:  994-block  0
        -:  995:                                     const char* /* type_expr */,
        -:  996:                                     const char* /* substr_expr */,
        -:  997:                                     const TestPartResultArray& results,
        -:  998:                                     TestPartResult::Type type,
        -:  999:                                     const std::string& substr) {
        -: 1000:  const std::string expected(type == TestPartResult::kFatalFailure
        -: 1001:                                 ? "1 fatal failure"
    #####: 1002:                                 : "1 non-fatal failure");
    %%%%%: 1002-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1002-block  1
    %%%%%: 1002-block  2
    %%%%%: 1002-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 1002-block  4
    #####: 1003:  Message msg;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1004:  if (results.size() != 1) {
    %%%%%: 1004-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1005:    msg << "Expected: " << expected << "\n"
    %%%%%: 1005-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1005-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1005-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1006:        << "  Actual: " << results.size() << " failures";
    %%%%%: 1006-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1006-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1006-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    $$$$$: 1006-block  3
    #####: 1007:    for (int i = 0; i < results.size(); i++) {
    %%%%%: 1007-block  0
    %%%%%: 1007-block  1
    %%%%%: 1007-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1008:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%: 1008-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1008-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1008-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 1009:    }
    #####: 1010:    return AssertionFailure() << msg;
    %%%%%: 1010-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1010-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1010-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1010-block  3
    %%%%%: 1010-block  4
call    9 never executed
    $$$$$: 1010-block  5
call   10 never executed
    $$$$$: 1010-block  6
        -: 1011:  }
        -: 1012:
    #####: 1013:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%: 1013-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1014:  if (r.type() != type) {
    %%%%%: 1014-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1015:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%: 1015-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1015-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1015-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1015-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1015-block  4
call   12 never executed
    $$$$$: 1015-block  5
call   13 never executed
    $$$$$: 1015-block  6
    #####: 1016:                              << "  Actual:\n"
    %%%%%: 1016-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1017:                              << r;
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1018:  }
        -: 1019:
    #####: 1020:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%: 1020-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1021:    return AssertionFailure()
    %%%%%: 1021-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1021-block  1
call    3 never executed
    $$$$$: 1021-block  2
call    4 never executed
    $$$$$: 1021-block  3
    #####: 1022:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%: 1022-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1022-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1022-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1022-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1022-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1023:           << "  Actual:\n"
    %%%%%: 1023-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1024:           << r;
    %%%%%: 1024-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1024-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1025:  }
        -: 1026:
    #####: 1027:  return AssertionSuccess();
    %%%%%: 1027-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1028:}
    %%%%%: 1028-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1028-block  1
call    2 never executed
    $$$$$: 1028-block  2
call    3 never executed
        -: 1029:
        -: 1030:// The constructor of SingleFailureChecker remembers where to look up
        -: 1031:// test part results, what type of failure we expect, and what
        -: 1032:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1033:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -: 1034:                                           TestPartResult::Type type,
    #####: 1035:                                           const std::string& substr)
    #####: 1036:    : results_(results), type_(type), substr_(substr) {}
    %%%%%: 1036-block  0
call    0 never executed
        -: 1037:
        -: 1038:// The destructor of SingleFailureChecker verifies that the given
        -: 1039:// TestPartResultArray contains exactly one failure that has the given
        -: 1040:// type and contains the given substring.  If that's not the case, a
        -: 1041:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####: 1042:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1043:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 1043-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1043-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 1043-block  2
call   10 never executed
    #####: 1044:}
call    0 never executed
        -: 1045:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1046:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1: 1047:    UnitTestImpl* unit_test)
        1: 1048:    : unit_test_(unit_test) {}
        1: 1048-block  0
call    0 returned 1
        -: 1049:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1050:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 1051:    const TestPartResult& result) {
    #####: 1052:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%: 1052-block  0
call    0 never executed
call    1 never executed
    #####: 1053:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1054:}
        -: 1055:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1056:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1: 1057:    UnitTestImpl* unit_test)
        1: 1058:    : unit_test_(unit_test) {}
        1: 1058-block  0
call    0 returned 1
        -: 1059:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1060:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1061:    const TestPartResult& result) {
    #####: 1062:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1062-block  0
call    0 never executed
call    1 never executed
    #####: 1063:}
        -: 1064:
        -: 1065:// Returns the global test part result reporter.
        -: 1066:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1067:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1068:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1068-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1069:  return global_test_part_result_reporter_;
    %%%%%: 1069-block  0
    #####: 1070:}
    %%%%%: 1070-block  0
call    0 never executed
        -: 1071:
        -: 1072:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1073:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1074:    TestPartResultReporterInterface* reporter) {
    #####: 1075:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1075-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1076:  global_test_part_result_reporter_ = reporter;
    #####: 1077:}
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
        -: 1079:// Returns the test part result reporter for the current thread.
        -: 1080:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1081:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1082:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1082-block  0
call    0 never executed
        -: 1083:}
        -: 1084:
        -: 1085:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1086:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1087:    TestPartResultReporterInterface* reporter) {
    #####: 1088:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1088-block  0
call    0 never executed
    #####: 1089:}
        -: 1090:
        -: 1091:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1092:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1093:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1093-block  0
call    0 never executed
        -: 1094:}
        -: 1095:
        -: 1096:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1097:int UnitTestImpl::failed_test_suite_count() const {
        2: 1098:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1098-block  0
call    0 returned 2
        -: 1099:}
        -: 1100:
        -: 1101:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 5 returned 100% blocks executed 100%
        5: 1102:int UnitTestImpl::total_test_suite_count() const {
        5: 1103:  return static_cast<int>(test_suites_.size());
        5: 1103-block  0
call    0 returned 5
        -: 1104:}
        -: 1105:
        -: 1106:// Gets the number of all test suites that contain at least one test
        -: 1107:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1108:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1109:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1109-block  0
call    0 returned 2
        -: 1110:}
        -: 1111:
        -: 1112:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1113:int UnitTestImpl::successful_test_count() const {
        1: 1114:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1114-block  0
call    0 returned 1
        -: 1115:}
        -: 1116:
        -: 1117:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1118:int UnitTestImpl::skipped_test_count() const {
        1: 1119:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1119-block  0
call    0 returned 1
        -: 1120:}
        -: 1121:
        -: 1122:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1123:int UnitTestImpl::failed_test_count() const {
    #####: 1124:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1124-block  0
call    0 never executed
        -: 1125:}
        -: 1126:
        -: 1127:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1128:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1129:  return SumOverTestSuiteList(test_suites_,
        1: 1129-block  0
call    0 returned 1
        1: 1130:                              &TestSuite::reportable_disabled_test_count);
        -: 1131:}
        -: 1132:
        -: 1133:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1134:int UnitTestImpl::disabled_test_count() const {
    #####: 1135:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1135-block  0
call    0 never executed
        -: 1136:}
        -: 1137:
        -: 1138:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1139:int UnitTestImpl::reportable_test_count() const {
    #####: 1140:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1140-block  0
call    0 never executed
        -: 1141:}
        -: 1142:
        -: 1143:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1144:int UnitTestImpl::total_test_count() const {
    #####: 1145:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1145-block  0
call    0 never executed
        -: 1146:}
        -: 1147:
        -: 1148:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1149:int UnitTestImpl::test_to_run_count() const {
        2: 1150:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1150-block  0
call    0 returned 2
        -: 1151:}
        -: 1152:
        -: 1153:// Returns the current OS stack trace as an std::string.
        -: 1154://
        -: 1155:// The maximum number of stack frames to be included is specified by
        -: 1156:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1157:// specifies the number of top frames to be skipped, which doesn't
        -: 1158:// count against the number of frames to be included.
        -: 1159://
        -: 1160:// For example, if Foo() calls Bar(), which in turn calls
        -: 1161:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1162:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1163:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1164:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1164-block  0
call    0 never executed
        -: 1165:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1166:      // Skips the user-specified number of frames plus this function
        -: 1167:      // itself.
    #####: 1168:  );  // NOLINT
call    0 never executed
        -: 1169:}
        -: 1170:
        -: 1171:// A helper class for measuring elapsed times.
        -: 1172:class Timer {
        -: 1173: public:
function _ZN7testing8internal5TimerC1Ev called 56 returned 100% blocks executed 100%
       56: 1174:  Timer() : start_(clock::now()) {}
       56: 1174-block  0
call    0 returned 56
        -: 1175:
        -: 1176:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 56 returned 100% blocks executed 78%
       56: 1177:  TimeInMillis Elapsed() {
      112: 1178:    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -
       56: 1178-block  0
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 1178-block  1
    $$$$$: 1178-block  2
       56: 1179:                                                                 start_)
       56: 1179-block  0
call    0 returned 56
call    1 returned 56
branch  2 taken 56 (fallthrough)
branch  3 taken 0 (throw)
      112: 1180:        .count();
       56: 1180-block  0
call    0 returned 56
       56: 1180-block  1
        -: 1181:  }
        -: 1182:
        -: 1183: private:
        -: 1184:  // Fall back to the system_clock when building with newlib on a system
        -: 1185:  // without a monotonic clock.
        -: 1186:#if defined(_NEWLIB_VERSION) && !defined(CLOCK_MONOTONIC)
        -: 1187:  using clock = std::chrono::system_clock;
        -: 1188:#else
        -: 1189:  using clock = std::chrono::steady_clock;
        -: 1190:#endif
        -: 1191:  clock::time_point start_;
        -: 1192:};
        -: 1193:
        -: 1194:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1195:// around subject to adjustments by the system, to measure elapsed time use
        -: 1196:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 57 returned 100% blocks executed 73%
       57: 1197:TimeInMillis GetTimeInMillis() {
       57: 1198:  return std::chrono::duration_cast<std::chrono::milliseconds>(
       57: 1198-block  0
call    0 returned 57
branch  1 taken 57 (fallthrough)
branch  2 taken 0 (throw)
       57: 1199:             std::chrono::system_clock::now() -
call    0 returned 57
    $$$$$: 1199-block  0
    $$$$$: 1199-block  1
      171: 1200:             std::chrono::system_clock::from_time_t(0))
       57: 1200-block  0
call    0 returned 57
call    1 returned 57
branch  2 taken 57 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1200-block  1
      114: 1201:      .count();
       57: 1201-block  0
call    0 returned 57
       57: 1201-block  1
        -: 1202:}
        -: 1203:
        -: 1204:// Utilities
        -: 1205:
        -: 1206:// class String.
        -: 1207:
        -: 1208:#ifdef GTEST_OS_WINDOWS_MOBILE
        -: 1209:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1210:// memory using new. The caller is responsible for deleting the return
        -: 1211:// value using delete[]. Returns the wide string, or NULL if the
        -: 1212:// input is NULL.
        -: 1213:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1214:  if (!ansi) return nullptr;
        -: 1215:  const int length = strlen(ansi);
        -: 1216:  const int unicode_length =
        -: 1217:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1218:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1219:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1220:  unicode[unicode_length] = 0;
        -: 1221:  return unicode;
        -: 1222:}
        -: 1223:
        -: 1224:// Creates an ANSI string from the given wide string, allocating
        -: 1225:// memory using new. The caller is responsible for deleting the return
        -: 1226:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1227:// input is NULL.
        -: 1228:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1229:  if (!utf16_str) return nullptr;
        -: 1230:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1231:                                              0, nullptr, nullptr);
        -: 1232:  char* ansi = new char[ansi_length + 1];
        -: 1233:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1234:                      nullptr);
        -: 1235:  ansi[ansi_length] = 0;
        -: 1236:  return ansi;
        -: 1237:}
        -: 1238:
        -: 1239:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1240:
        -: 1241:// Compares two C strings.  Returns true if and only if they have the same
        -: 1242:// content.
        -: 1243://
        -: 1244:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1245:// C string is considered different to any non-NULL C string,
        -: 1246:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1247:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1248:  if (lhs == nullptr) return rhs == nullptr;
        2: 1248-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1248-block  1
        -: 1249:
       2*: 1250:  if (rhs == nullptr) return false;
        2: 1250-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1250-block  1
        -: 1251:
        2: 1252:  return strcmp(lhs, rhs) == 0;
        2: 1252-block  0
        -: 1253:}
        -: 1254:
        -: 1255:#if GTEST_HAS_STD_WSTRING
        -: 1256:
        -: 1257:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1258:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwyPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1259:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1260:                                     Message* msg) {
    #####: 1261:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1261-block  0
    %%%%%: 1261-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1262:    if (wstr[i] != L'\0') {
    %%%%%: 1262-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1263:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1263-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1263-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1263-block  2
call    6 never executed
    $$$$$: 1263-block  3
call    7 never executed
    $$$$$: 1263-block  4
call    8 never executed
    #####: 1264:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1264-block  0
    %%%%%: 1264-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1264-block  2
branch  2 never executed
branch  3 never executed
        -: 1265:    } else {
    #####: 1266:      *msg << '\0';
    %%%%%: 1266-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1267:      i++;
    %%%%%: 1267-block  0
        -: 1268:    }
        -: 1269:  }
    #####: 1270:}
    %%%%%: 1270-block  0
        -: 1271:
        -: 1272:#endif  // GTEST_HAS_STD_WSTRING
        -: 1273:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 7 returned 100% blocks executed 69%
        7: 1274:void SplitString(const ::std::string& str, char delimiter,
        -: 1275:                 ::std::vector< ::std::string>* dest) {
        7: 1276:  ::std::vector< ::std::string> parsed;
        7: 1276-block  0
call    0 returned 7
        7: 1277:  ::std::string::size_type pos = 0;
      266: 1278:  while (::testing::internal::AlwaysTrue()) {
      266: 1278-block  0
call    0 returned 266
branch  1 taken 266 (fallthrough)
branch  2 taken 0 (throw)
      266: 1278-block  1
branch  3 taken 266
branch  4 taken 0 (fallthrough)
      266: 1279:    const ::std::string::size_type colon = str.find(delimiter, pos);
      266: 1279-block  0
call    0 returned 266
      266: 1280:    if (colon == ::std::string::npos) {
branch  0 taken 7 (fallthrough)
branch  1 taken 259
        7: 1281:      parsed.push_back(str.substr(pos));
        7: 1281-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1281-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 1281-block  2
call    6 returned 7
    $$$$$: 1281-block  3
call    7 never executed
    $$$$$: 1281-block  4
        7: 1282:      break;
        -: 1283:    } else {
      259: 1284:      parsed.push_back(str.substr(pos, colon - pos));
      259: 1284-block  0
call    0 returned 259
branch  1 taken 259 (fallthrough)
branch  2 taken 0 (throw)
      259: 1284-block  1
call    3 returned 259
branch  4 taken 259 (fallthrough)
branch  5 taken 0 (throw)
      259: 1284-block  2
call    6 returned 259
    $$$$$: 1284-block  3
call    7 never executed
    $$$$$: 1284-block  4
      259: 1285:      pos = colon + 1;
        -: 1286:    }
        -: 1287:  }
        7: 1288:  dest->swap(parsed);
        7: 1288-block  0
call    0 returned 7
        7: 1289:}
call    0 returned 7
    $$$$$: 1289-block  0
call    1 never executed
        -: 1290:
        -: 1291:}  // namespace internal
        -: 1292:
        -: 1293:// Constructs an empty Message.
        -: 1294:// We allocate the stringstream separately because otherwise each use of
        -: 1295:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1296:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1297:// the stack space.
function _ZN7testing7MessageC2Ev called 114 returned 100% blocks executed 80%
      114: 1298:Message::Message() : ss_(new ::std::stringstream) {
      114: 1298-block  0
call    0 returned 114
call    1 returned 114
branch  2 taken 114 (fallthrough)
branch  3 taken 0 (throw)
      114: 1298-block  1
call    4 returned 114
    $$$$$: 1298-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 1298-block  3
call    7 never executed
        -: 1299:  // By default, we want there to be enough precision when printing
        -: 1300:  // a double to a Message.
      114: 1301:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 114
call    1 returned 114
call    2 returned 114
      114: 1302:}
        -: 1303:
        -: 1304:// These two overloads allow streaming a wide C string to a Message
        -: 1305:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1306:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1307:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1307-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1307-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1307-block  2
    %%%%%: 1307-block  3
call    6 never executed
    %%%%%: 1307-block  4
    $$$$$: 1307-block  5
call    7 never executed
        -: 1308:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1309:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1310:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1310-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1310-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1310-block  2
    %%%%%: 1310-block  3
call    6 never executed
    %%%%%: 1310-block  4
    $$$$$: 1310-block  5
call    7 never executed
        -: 1311:}
        -: 1312:
        -: 1313:#if GTEST_HAS_STD_WSTRING
        -: 1314:// Converts the given wide string to a narrow string using the UTF-8
        -: 1315:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1316:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1317:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1317-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1318:  return *this;
        -: 1319:}
        -: 1320:#endif  // GTEST_HAS_STD_WSTRING
        -: 1321:
        -: 1322:// Gets the text streamed to this object so far as an std::string.
        -: 1323:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 114 returned 100% blocks executed 100%
      114: 1324:std::string Message::GetString() const {
      114: 1325:  return internal::StringStreamToString(ss_.get());
      114: 1325-block  0
call    0 returned 114
call    1 returned 114
        -: 1326:}
        -: 1327:
        -: 1328:namespace internal {
        -: 1329:
        -: 1330:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIySaIyEES6_ called 0 returned 0% blocks executed 0%
    #####: 1331:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
    %%%%%: 1331-block  0
        -: 1332:                                            const std::vector<size_t>& right) {
        -: 1333:  std::vector<std::vector<double> > costs(
    #####: 1334:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1334-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1334-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1334-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1334-block  3
call   10 never executed
    $$$$$: 1334-block  4
    $$$$$: 1334-block  5
    $$$$$: 1334-block  6
        -: 1335:  std::vector<std::vector<EditType> > best_move(
    #####: 1336:      left.size() + 1, std::vector<EditType>(right.size() + 1));
    %%%%%: 1336-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1336-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1336-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1336-block  3
call   10 never executed
    $$$$$: 1336-block  4
    $$$$$: 1336-block  5
    $$$$$: 1336-block  6
        -: 1337:
        -: 1338:  // Populate for empty right.
    #####: 1339:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1340:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1340-block  0
call    0 never executed
call    1 never executed
    #####: 1341:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1342:  }
        -: 1343:  // Populate for empty left.
    #####: 1344:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1344-block  0
    %%%%%: 1344-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 1345:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1345-block  0
call    0 never executed
call    1 never executed
    #####: 1346:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1347:  }
        -: 1348:
    #####: 1349:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1349-block  0
    %%%%%: 1349-block  1
    %%%%%: 1349-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1350:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1350-block  0
    %%%%%: 1350-block  1
    %%%%%: 1350-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1351:      if (left[l_i] == right[r_i]) {
    %%%%%: 1351-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1352:        // Found a match. Consume it.
    #####: 1353:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1353-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1354:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1355:        continue;
        -: 1356:      }
        -: 1357:
    #####: 1358:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1358-block  0
call    0 never executed
call    1 never executed
    #####: 1359:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1360:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1361:      if (add < remove && add < replace) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1361-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1362:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1362-block  0
call    0 never executed
call    1 never executed
    #####: 1363:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1364:      } else if (remove < add && remove < replace) {
    %%%%%: 1364-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1364-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1365:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1365-block  0
call    0 never executed
call    1 never executed
    #####: 1366:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1367:      } else {
        -: 1368:        // We make replace a little more expensive than add/remove to lower
        -: 1369:        // their priority.
    #####: 1370:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1370-block  0
call    0 never executed
call    1 never executed
    #####: 1371:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1372:      }
        -: 1373:    }
        -: 1374:  }
        -: 1375:
        -: 1376:  // Reconstruct the best path. We do it in reverse order.
    #####: 1377:  std::vector<EditType> best_path;
    %%%%%: 1377-block  0
call    0 never executed
    #####: 1378:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1378-block  0
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%: 1378-block  1
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1379:    EditType move = best_move[l_i][r_i];
    %%%%%: 1379-block  0
call    0 never executed
call    1 never executed
    #####: 1380:    best_path.push_back(move);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1381:    l_i -= move != kAdd;
    #####: 1382:    r_i -= move != kRemove;
    %%%%%: 1382-block  0
        -: 1383:  }
    #####: 1384:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1384-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 1385:  return best_path;
    %%%%%: 1385-block  0
    %%%%%: 1385-block  1
    #####: 1386:}
    %%%%%: 1386-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1386-block  1
call    2 never executed
    $$$$$: 1386-block  2
call    3 never executed
    $$$$$: 1386-block  3
call    4 never executed
        -: 1387:
        -: 1388:namespace {
        -: 1389:
        -: 1390:// Helper class to convert string into ids with deduplication.
        -: 1391:class InternalStrings {
        -: 1392: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1393:  size_t GetId(const std::string& str) {
    #####: 1394:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1395:    if (it != ids_.end()) return it->second;
    %%%%%: 1395-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1395-block  1
call    4 never executed
    #####: 1396:    size_t id = ids_.size();
    %%%%%: 1396-block  0
call    0 never executed
    #####: 1397:    return ids_[str] = id;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1397-block  0
        -: 1398:  }
        -: 1399:
        -: 1400: private:
        -: 1401:  typedef std::map<std::string, size_t> IdMap;
        -: 1402:  IdMap ids_;
        -: 1403:};
        -: 1404:
        -: 1405:}  // namespace
        -: 1406:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1407:std::vector<EditType> CalculateOptimalEdits(
        -: 1408:    const std::vector<std::string>& left,
        -: 1409:    const std::vector<std::string>& right) {
    #####: 1410:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1410-block  0
call    0 never executed
call    1 never executed
        -: 1411:  {
    #####: 1412:    InternalStrings intern_table;
call    0 never executed
    #####: 1413:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1414:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1414-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1414-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1414-block  2
    $$$$$: 1414-block  3
        -: 1415:    }
    #####: 1416:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1416-block  0
    %%%%%: 1416-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1417:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1417-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1417-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1417-block  2
    $$$$$: 1417-block  3
        -: 1418:    }
    #####: 1419:  }
    %%%%%: 1419-block  0
call    0 never executed
    $$$$$: 1419-block  1
call    1 never executed
    #####: 1420:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1420-block  0
    #####: 1421:}
    %%%%%: 1421-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1421-block  1
call    2 never executed
    $$$$$: 1421-block  2
call    3 never executed
        -: 1422:
        -: 1423:namespace {
        -: 1424:
        -: 1425:// Helper class that holds the state for one hunk and prints it out to the
        -: 1426:// stream.
        -: 1427:// It reorders adds/removes when possible to group all removes before all
        -: 1428:// adds. It also adds the hunk header before printint into the stream.
        -: 1429:class Hunk {
        -: 1430: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Eyy called 0 returned 0% blocks executed 0%
    #####: 1431:  Hunk(size_t left_start, size_t right_start)
    #####: 1432:      : left_start_(left_start),
    #####: 1433:        right_start_(right_start),
    #####: 1434:        adds_(),
    #####: 1435:        removes_(),
    #####: 1436:        common_() {}
    %%%%%: 1436-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1437:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1438:  void PushLine(char edit, const char* line) {
    #####: 1439:    switch (edit) {
    %%%%%: 1439-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1440:      case ' ':
    #####: 1441:        ++common_;
    #####: 1442:        FlushEdits();
    %%%%%: 1442-block  0
call    0 never executed
    #####: 1443:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1443-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1443-block  1
    $$$$$: 1443-block  2
call    6 never executed
    #####: 1444:        break;
    %%%%%: 1444-block  0
    #####: 1445:      case '-':
    #####: 1446:        ++removes_;
    #####: 1447:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1447-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1447-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1447-block  2
    $$$$$: 1447-block  3
call    6 never executed
    #####: 1448:        break;
    %%%%%: 1448-block  0
    #####: 1449:      case '+':
    #####: 1450:        ++adds_;
    #####: 1451:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1451-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1451-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1451-block  2
    #####: 1452:        break;
    %%%%%: 1452-block  0
        -: 1453:    }
    #####: 1454:  }
    %%%%%: 1454-block  0
        -: 1455:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1456:  void PrintTo(std::ostream* os) {
    #####: 1457:    PrintHeader(os);
    %%%%%: 1457-block  0
call    0 never executed
    #####: 1458:    FlushEdits();
call    0 never executed
    #####: 1459:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1460:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1461:         it != hunk_.end(); ++it) {
    %%%%%: 1461-block  0
call    0 never executed
    %%%%%: 1461-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1462:      *os << it->first << it->second << "\n";
    %%%%%: 1462-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1462-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1462-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 1463:    }
    #####: 1464:  }
    %%%%%: 1464-block  0
        -: 1465:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1466:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1466-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1466-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1466-block  2
    %%%%%: 1466-block  3
    %%%%%: 1466-block  4
        -: 1467:
        -: 1468: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1469:  void FlushEdits() {
    #####: 1470:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1470-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1471:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1472:  }
        -: 1473:
        -: 1474:  // Print a unified diff header for one hunk.
        -: 1475:  // The format is
        -: 1476:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1477:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1478:  void PrintHeader(std::ostream* ss) const {
    #####: 1479:    *ss << "@@ ";
    %%%%%: 1479-block  0
call    0 never executed
    #####: 1480:    if (removes_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1481:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1481-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1482:    }
    #####: 1483:    if (removes_ && adds_) {
    %%%%%: 1483-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1483-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1484:      *ss << " ";
    %%%%%: 1484-block  0
call    0 never executed
        -: 1485:    }
    #####: 1486:    if (adds_) {
    %%%%%: 1486-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1487:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1487-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1488:    }
    #####: 1489:    *ss << " @@\n";
    %%%%%: 1489-block  0
call    0 never executed
    #####: 1490:  }
        -: 1491:
        -: 1492:  size_t left_start_, right_start_;
        -: 1493:  size_t adds_, removes_, common_;
        -: 1494:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1495:};
        -: 1496:
        -: 1497:}  // namespace
        -: 1498:
        -: 1499:// Create a list of diff hunks in Unified diff format.
        -: 1500:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1501:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1502:// addition.
        -: 1503:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1504:// If two hunks are close enough that their contexts overlap, then they are
        -: 1505:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_y called 0 returned 0% blocks executed 0%
    #####: 1506:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1507:                              const std::vector<std::string>& right,
        -: 1508:                              size_t context) {
    #####: 1509:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1510:
    #####: 1511:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1512:  std::stringstream ss;
    %%%%%: 1512-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1513:  while (edit_i < edits.size()) {
    %%%%%: 1513-block  0
    %%%%%: 1513-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 1514:    // Find first edit.
    #####: 1515:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1515-block  0
    %%%%%: 1515-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1515-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1515-block  3
    %%%%%: 1515-block  4
    %%%%%: 1515-block  5
branch  6 never executed
branch  7 never executed (fallthrough)
    #####: 1516:      ++l_i;
    #####: 1517:      ++r_i;
    #####: 1518:      ++edit_i;
    %%%%%: 1518-block  0
        -: 1519:    }
        -: 1520:
        -: 1521:    // Find the first line to include in the hunk.
    #####: 1522:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1522-block  0
call    0 never executed
    #####: 1523:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1524:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1524-block  0
    %%%%%: 1524-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1525:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1525-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1526:    }
        -: 1527:
        -: 1528:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1529:    // is over.
    #####: 1530:    size_t n_suffix = 0;
    #####: 1531:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1531-block  0
    %%%%%: 1531-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1532:      if (n_suffix >= context) {
    %%%%%: 1532-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1533:        // Continue only if the next hunk is very close.
    #####: 1534:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1534-block  0
call    0 never executed
call    1 never executed
    #####: 1535:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1535-block  0
call    0 never executed
    %%%%%: 1535-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1535-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1535-block  3
    %%%%%: 1535-block  4
    %%%%%: 1535-block  5
branch  8 never executed
branch  9 never executed (fallthrough)
    #####: 1536:        if (it == edits.end() ||
    %%%%%: 1536-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1536-block  1
    %%%%%: 1536-block  2
    #####: 1537:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1537-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1537-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
        -: 1538:          // There is no next edit or it is too far away.
    #####: 1539:          break;
    %%%%%: 1539-block  0
        -: 1540:        }
        -: 1541:      }
        -: 1542:
    #####: 1543:      EditType edit = edits[edit_i];
    %%%%%: 1543-block  0
call    0 never executed
        -: 1544:      // Reset count when a non match is found.
    #####: 1545:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1545-block  0
    %%%%%: 1545-block  1
        -: 1546:
    #####: 1547:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1547-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1547-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1547-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1548:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1548-block  1
    %%%%%: 1548-block  2
    %%%%%: 1548-block  3
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 1549:      }
    #####: 1550:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1550-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1550-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1551:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1551-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1552:      }
        -: 1553:
        -: 1554:      // Advance indices, depending on edit type.
    #####: 1555:      l_i += edit != kAdd;
    #####: 1556:      r_i += edit != kRemove;
    %%%%%: 1556-block  0
        -: 1557:    }
        -: 1558:
    #####: 1559:    if (!hunk.has_edits()) {
    %%%%%: 1559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1560:      // We are done. We don't want this hunk.
    #####: 1561:      break;
    %%%%%: 1561-block  0
        -: 1562:    }
        -: 1563:
    #####: 1564:    hunk.PrintTo(&ss);
    %%%%%: 1564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1565:  }
    %%%%%: 1565-block  0
    %%%%%: 1565-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 1565-block  2
call    3 never executed
    #####: 1566:  return ss.str();
    %%%%%: 1566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1566-block  1
    #####: 1567:}
    %%%%%: 1567-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1567-block  1
call    2 never executed
    $$$$$: 1567-block  2
call    3 never executed
        -: 1568:
        -: 1569:}  // namespace edit_distance
        -: 1570:
        -: 1571:namespace {
        -: 1572:
        -: 1573:// The string representation of the values received in EqFailure() are already
        -: 1574:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1575:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1576:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1577:  std::vector<std::string> lines;
    %%%%%: 1577-block  0
call    0 never executed
    #####: 1578:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1579:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1579-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1579-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1579-block  2
    %%%%%: 1579-block  3
    %%%%%: 1579-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1580:    ++start;
    #####: 1581:    --end;
    %%%%%: 1581-block  0
        -: 1582:  }
    #####: 1583:  bool escaped = false;
    #####: 1584:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1584-block  0
    %%%%%: 1584-block  1
    %%%%%: 1584-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1585:    if (escaped) {
    %%%%%: 1585-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1586:      escaped = false;
    #####: 1587:      if (str[i] == 'n') {
    %%%%%: 1587-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1588:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1588-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1588-block  2
call    6 never executed
    $$$$$: 1588-block  3
call    7 never executed
    $$$$$: 1588-block  4
    #####: 1589:        start = i + 1;
        -: 1590:      }
        -: 1591:    } else {
    #####: 1592:      escaped = str[i] == '\\';
    %%%%%: 1592-block  0
call    0 never executed
        -: 1593:    }
        -: 1594:  }
    #####: 1595:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1595-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1595-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1595-block  2
call    6 never executed
    $$$$$: 1595-block  3
call    7 never executed
    $$$$$: 1595-block  4
    #####: 1596:  return lines;
    %%%%%: 1596-block  0
    =====: 1597:}
    $$$$$: 1597-block  0
call    0 never executed
        -: 1598:
        -: 1599:}  // namespace
        -: 1600:
        -: 1601:// Constructs and returns the message for an equality assertion
        -: 1602:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1603://
        -: 1604:// The first four parameters are the expressions used in the assertion
        -: 1605:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1606:// where foo is 5 and bar is 6, we have:
        -: 1607://
        -: 1608://   lhs_expression: "foo"
        -: 1609://   rhs_expression: "bar"
        -: 1610://   lhs_value:      "5"
        -: 1611://   rhs_value:      "6"
        -: 1612://
        -: 1613:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1614:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1615:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1616:AssertionResult EqFailure(const char* lhs_expression,
        -: 1617:                          const char* rhs_expression,
        -: 1618:                          const std::string& lhs_value,
        -: 1619:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1620:  Message msg;
    %%%%%: 1620-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1621:  msg << "Expected equality of these values:";
    %%%%%: 1621-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1622:  msg << "\n  " << lhs_expression;
    %%%%%: 1622-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1622-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1623:  if (lhs_value != lhs_expression) {
    %%%%%: 1623-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1624:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1624-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1624-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1625:  }
    #####: 1626:  msg << "\n  " << rhs_expression;
    %%%%%: 1626-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1626-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1627:  if (rhs_value != rhs_expression) {
    %%%%%: 1627-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1628:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1628-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1628-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1629:  }
        -: 1630:
    #####: 1631:  if (ignoring_case) {
    %%%%%: 1631-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1632:    msg << "\nIgnoring case";
    %%%%%: 1632-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1633:  }
        -: 1634:
    #####: 1635:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1635-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1635-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1635-block  2
    %%%%%: 1635-block  3
    %%%%%: 1635-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1636:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1636-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1637:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1637-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1638:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1638-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1638-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1638-block  2
    %%%%%: 1638-block  3
    %%%%%: 1638-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1639:      msg << "\nWith diff:\n"
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1640:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1640-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1640-block  2
call    6 never executed
    $$$$$: 1640-block  3
call    7 never executed
    $$$$$: 1640-block  4
        -: 1641:    }
    #####: 1642:  }
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1642-block  1
call    2 never executed
    $$$$$: 1642-block  2
call    3 never executed
        -: 1643:
    #####: 1644:  return AssertionFailure() << msg;
    %%%%%: 1644-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1644-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1644-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1644-block  3
    %%%%%: 1644-block  4
call    9 never executed
    %%%%%: 1644-block  5
    $$$$$: 1644-block  6
call   10 never executed
    $$$$$: 1644-block  7
    #####: 1645:}
call    0 never executed
    $$$$$: 1645-block  0
call    1 never executed
        -: 1646:
        -: 1647:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1648:std::string GetBoolAssertionFailureMessage(
        -: 1649:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1650:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1651:  const char* actual_message = assertion_result.message();
    %%%%%: 1651-block  0
call    0 never executed
    #####: 1652:  Message msg;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1653:  msg << "Value of: " << expression_text
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1653-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1654:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1654-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1655:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1655-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1655-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1655-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1655-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    #####: 1656:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1656-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1657:  return msg.GetString();
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1657-block  1
    #####: 1658:}
    %%%%%: 1658-block  0
call    0 never executed
    $$$$$: 1658-block  1
call    1 never executed
        -: 1659:
        -: 1660:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1661:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1662:                                     const char* abs_error_expr, double val1,
        -: 1663:                                     double val2, double abs_error) {
    #####: 1664:  const double diff = fabs(val1 - val2);
    #####: 1665:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1665-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1665-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1665-block  2
        -: 1666:
        -: 1667:  // Find the value which is closest to zero.
    #####: 1668:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1668-block  0
call    0 never executed
        -: 1669:  // Find the distance to the next double from that value.
        -: 1670:  const double epsilon =
    #####: 1671:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1672:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1673:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1674:  // message so that the situation can be more easily understood without
        -: 1675:  // requiring exotic floating-point knowledge.
        -: 1676:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1677:  // that an equality check was actually intended.
    #####: 1678:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1678-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1678-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1678-block  2
    %%%%%: 1678-block  3
    %%%%%: 1678-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1679:      abs_error < epsilon) {
    %%%%%: 1679-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1680:    return AssertionFailure()
    %%%%%: 1680-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1680-block  1
call    3 never executed
    $$$$$: 1680-block  2
call    4 never executed
    $$$$$: 1680-block  3
    #####: 1681:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1681-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1681-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1681-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1681-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1681-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1682:           << diff << ", where\n"
    %%%%%: 1682-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1682-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1683:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1683-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1683-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1683-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1683-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1684:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1684-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1684-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1684-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1684-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1685:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1685-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1685-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1685-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 1686:           << " which is smaller than the minimum distance between doubles for "
    #####: 1687:              "numbers of this magnitude which is "
    %%%%%: 1687-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1688:           << epsilon
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1689:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1690:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1690-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1690-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1691:  }
    #####: 1692:  return AssertionFailure()
    %%%%%: 1692-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1692-block  1
call    3 never executed
    $$$$$: 1692-block  2
call    4 never executed
    $$$$$: 1692-block  3
    #####: 1693:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1693-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1693-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1693-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1693-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1693-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1694:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1694-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1694-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1694-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1694-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1695:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1695-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1695-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1695-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1695-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1696:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1696-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1696-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1696-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1696-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1697:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1697-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1697-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1697-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1697-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1697-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1697-block  5
        -: 1698:}
        -: 1699:
        -: 1700:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1701:template <typename RawType>
    #####: 1702:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1703:                                RawType val1, RawType val2) {
        -: 1704:  // Returns success if val1 is less than val2,
    #####: 1705:  if (val1 < val2) {
    #####: 1706:    return AssertionSuccess();
        -: 1707:  }
        -: 1708:
        -: 1709:  // or if val1 is almost equal to val2.
    #####: 1710:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1711:  if (lhs.AlmostEquals(rhs)) {
    #####: 1712:    return AssertionSuccess();
        -: 1713:  }
        -: 1714:
        -: 1715:  // Note that the above two checks will both fail if either val1 or
        -: 1716:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1717:  // any predicate involving a NaN must return false.
        -: 1718:
    #####: 1719:  ::std::stringstream val1_ss;
    #####: 1720:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1721:          << val1;
        -: 1722:
    #####: 1723:  ::std::stringstream val2_ss;
    #####: 1724:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1725:          << val2;
        -: 1726:
        -: 1727:  return AssertionFailure()
    #####: 1728:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1729:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1730:         << StringStreamToString(&val2_ss);
    #####: 1731:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1702:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1703:                                RawType val1, RawType val2) {
        -: 1704:  // Returns success if val1 is less than val2,
    #####: 1705:  if (val1 < val2) {
    %%%%%: 1705-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1706:    return AssertionSuccess();
    %%%%%: 1706-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1707:  }
        -: 1708:
        -: 1709:  // or if val1 is almost equal to val2.
    #####: 1710:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1710-block  0
call    0 never executed
call    1 never executed
    #####: 1711:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1711-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1712:    return AssertionSuccess();
    %%%%%: 1712-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1713:  }
        -: 1714:
        -: 1715:  // Note that the above two checks will both fail if either val1 or
        -: 1716:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1717:  // any predicate involving a NaN must return false.
        -: 1718:
    #####: 1719:  ::std::stringstream val1_ss;
    %%%%%: 1719-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1720:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1720-block  0
call    0 never executed
call    1 never executed
    #####: 1721:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1722:
    #####: 1723:  ::std::stringstream val2_ss;
    %%%%%: 1723-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1724:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1724-block  0
call    0 never executed
call    1 never executed
    #####: 1725:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1726:
        -: 1727:  return AssertionFailure()
    #####: 1728:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1728-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1728-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1728-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1728-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1728-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1728-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1728-block  6
call   18 never executed
    $$$$$: 1728-block  7
    #####: 1729:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1729-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1729-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1729-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1729-block  4
call   13 never executed
    $$$$$: 1729-block  5
    #####: 1730:         << StringStreamToString(&val2_ss);
    %%%%%: 1730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1730-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1730-block  3
    %%%%%: 1730-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1730-block  5
call   11 never executed
    $$$$$: 1730-block  6
    #####: 1731:}
call    0 never executed
call    1 never executed
    $$$$$: 1731-block  0
call    2 never executed
    $$$$$: 1731-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1702:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1703:                                RawType val1, RawType val2) {
        -: 1704:  // Returns success if val1 is less than val2,
    #####: 1705:  if (val1 < val2) {
    %%%%%: 1705-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1706:    return AssertionSuccess();
    %%%%%: 1706-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1707:  }
        -: 1708:
        -: 1709:  // or if val1 is almost equal to val2.
    #####: 1710:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1710-block  0
call    0 never executed
call    1 never executed
    #####: 1711:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1711-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1712:    return AssertionSuccess();
    %%%%%: 1712-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1713:  }
        -: 1714:
        -: 1715:  // Note that the above two checks will both fail if either val1 or
        -: 1716:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1717:  // any predicate involving a NaN must return false.
        -: 1718:
    #####: 1719:  ::std::stringstream val1_ss;
    %%%%%: 1719-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1720:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1720-block  0
call    0 never executed
call    1 never executed
    #####: 1721:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1722:
    #####: 1723:  ::std::stringstream val2_ss;
    %%%%%: 1723-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1724:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1724-block  0
call    0 never executed
call    1 never executed
    #####: 1725:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1726:
        -: 1727:  return AssertionFailure()
    #####: 1728:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1728-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1728-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1728-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1728-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1728-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1728-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1728-block  6
call   18 never executed
    $$$$$: 1728-block  7
    #####: 1729:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1729-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1729-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1729-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1729-block  4
call   13 never executed
    $$$$$: 1729-block  5
    #####: 1730:         << StringStreamToString(&val2_ss);
    %%%%%: 1730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1730-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1730-block  3
    %%%%%: 1730-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1730-block  5
call   11 never executed
    $$$$$: 1730-block  6
    #####: 1731:}
call    0 never executed
call    1 never executed
    $$$$$: 1731-block  0
call    2 never executed
    $$$$$: 1731-block  1
call    3 never executed
------------------
        -: 1732:
        -: 1733:}  // namespace internal
        -: 1734:
        -: 1735:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1736:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1737:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1738:                        float val2) {
    #####: 1739:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1739-block  0
call    0 never executed
        -: 1740:}
        -: 1741:
        -: 1742:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1743:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1744:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1745:                         double val2) {
    #####: 1746:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1746-block  0
call    0 never executed
        -: 1747:}
        -: 1748:
        -: 1749:namespace internal {
        -: 1750:
        -: 1751:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1752:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1753:                               const char* rhs_expression, const char* lhs,
        -: 1754:                               const char* rhs) {
    #####: 1755:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1755-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1756:    return AssertionSuccess();
    %%%%%: 1756-block  0
call    0 never executed
        -: 1757:  }
        -: 1758:
    #####: 1759:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1759-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1759-block  1
call    3 never executed
    $$$$$: 1759-block  2
call    4 never executed
    $$$$$: 1759-block  3
    #####: 1760:                   PrintToString(rhs), false);
    %%%%%: 1760-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1760-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1760-block  2
call    7 never executed
        -: 1761:}
        -: 1762:
        -: 1763:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1764:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1765:                                   const char* rhs_expression, const char* lhs,
        -: 1766:                                   const char* rhs) {
    #####: 1767:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1767-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1768:    return AssertionSuccess();
    %%%%%: 1768-block  0
call    0 never executed
        -: 1769:  }
        -: 1770:
    #####: 1771:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1771-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1771-block  1
call    3 never executed
    $$$$$: 1771-block  2
call    4 never executed
    $$$$$: 1771-block  3
    #####: 1772:                   PrintToString(rhs), true);
    %%%%%: 1772-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1772-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1772-block  2
call    7 never executed
        -: 1773:}
        -: 1774:
        -: 1775:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1776:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1777:                               const char* s2_expression, const char* s1,
        -: 1778:                               const char* s2) {
    #####: 1779:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1780:    return AssertionSuccess();
    %%%%%: 1780-block  0
call    0 never executed
        -: 1781:  } else {
    #####: 1782:    return AssertionFailure()
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1782-block  1
call    3 never executed
    $$$$$: 1782-block  2
call    4 never executed
    #####: 1783:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1783-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1784:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1784-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1784-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1784-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1784-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1784-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1784-block  6
        -: 1785:  }
        -: 1786:}
        -: 1787:
        -: 1788:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1789:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1790:                                   const char* s2_expression, const char* s1,
        -: 1791:                                   const char* s2) {
    #####: 1792:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1793:    return AssertionSuccess();
    %%%%%: 1793-block  0
call    0 never executed
        -: 1794:  } else {
    #####: 1795:    return AssertionFailure()
    %%%%%: 1795-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1795-block  1
call    3 never executed
    $$$$$: 1795-block  2
call    4 never executed
    #####: 1796:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1796-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1796-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1796-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1796-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1797:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1797-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1797-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1797-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1797-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1797-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1797-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1797-block  6
        -: 1798:  }
        -: 1799:}
        -: 1800:
        -: 1801:}  // namespace internal
        -: 1802:
        -: 1803:namespace {
        -: 1804:
        -: 1805:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1806:
        -: 1807:// This group of overloaded functions return true if and only if needle
        -: 1808:// is a substring of haystack.  NULL is considered a substring of
        -: 1809:// itself only.
        -: 1810:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1811:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1812:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1812-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1812-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1812-block  2
        -: 1813:
    #####: 1814:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1814-block  0
        -: 1815:}
        -: 1816:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1817:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1818:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1818-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1818-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1818-block  2
        -: 1819:
    #####: 1820:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1820-block  0
call    0 never executed
        -: 1821:}
        -: 1822:
        -: 1823:// StringType here can be either ::std::string or ::std::wstring.
        -: 1824:template <typename StringType>
    #####: 1825:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1826:  return haystack.find(needle) != StringType::npos;
        -: 1827:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1825:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1826:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1826-block  0
call    0 never executed
        -: 1827:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1825:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1826:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1826-block  0
call    0 never executed
        -: 1827:}
------------------
        -: 1828:
        -: 1829:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1830:// depending on the value of the expected_to_be_substring parameter.
        -: 1831:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1832:// or ::std::wstring.
        -: 1833:template <typename StringType>
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1840:    return AssertionSuccess();
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
        -: 1851:
        -: 1852:}  // namespace
        -: 1853:
        -: 1854:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1855:// substring of haystack (NULL is considered a substring of itself
        -: 1856:// only), and return an appropriate error message when they fail.
        -: 1857:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1858:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1859:                            const char* needle, const char* haystack) {
    #####: 1860:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1860-block  0
call    0 never executed
        -: 1861:}
        -: 1862:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1863:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1864:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1865:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1865-block  0
call    0 never executed
        -: 1866:}
        -: 1867:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1868:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1869:                               const char* haystack_expr, const char* needle,
        -: 1870:                               const char* haystack) {
    #####: 1871:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1871-block  0
call    0 never executed
        -: 1872:}
        -: 1873:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1874:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1875:                               const char* haystack_expr, const wchar_t* needle,
        -: 1876:                               const wchar_t* haystack) {
    #####: 1877:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1877-block  0
call    0 never executed
        -: 1878:}
        -: 1879:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1880:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1881:                            const ::std::string& needle,
        -: 1882:                            const ::std::string& haystack) {
    #####: 1883:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1883-block  0
call    0 never executed
        -: 1884:}
        -: 1885:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1886:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1887:                               const char* haystack_expr,
        -: 1888:                               const ::std::string& needle,
        -: 1889:                               const ::std::string& haystack) {
    #####: 1890:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1890-block  0
call    0 never executed
        -: 1891:}
        -: 1892:
        -: 1893:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1894:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1895:                            const ::std::wstring& needle,
        -: 1896:                            const ::std::wstring& haystack) {
    #####: 1897:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1897-block  0
call    0 never executed
        -: 1898:}
        -: 1899:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1900:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1901:                               const char* haystack_expr,
        -: 1902:                               const ::std::wstring& needle,
        -: 1903:                               const ::std::wstring& haystack) {
    #####: 1904:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1904-block  0
call    0 never executed
        -: 1905:}
        -: 1906:#endif  // GTEST_HAS_STD_WSTRING
        -: 1907:
        -: 1908:namespace internal {
        -: 1909:
        -: 1910:#ifdef GTEST_OS_WINDOWS
        -: 1911:
        -: 1912:namespace {
        -: 1913:
        -: 1914:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1915:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1916:                                     long hr) {  // NOLINT
        -: 1917:#if defined(GTEST_OS_WINDOWS_MOBILE) || defined(GTEST_OS_WINDOWS_TV_TITLE)
        -: 1918:
        -: 1919:  // Windows CE doesn't support FormatMessage.
        -: 1920:  const char error_text[] = "";
        -: 1921:
        -: 1922:#else
        -: 1923:
        -: 1924:  // Looks up the human-readable system message for the HRESULT code
        -: 1925:  // and since we're not passing any params to FormatMessage, we don't
        -: 1926:  // want inserts expanded.
    #####: 1927:  const DWORD kFlags =
        -: 1928:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1929:  const DWORD kBufSize = 4096;
        -: 1930:  // Gets the system's human readable message string for this HRESULT.
    #####: 1931:  char error_text[kBufSize] = {'\0'};
    #####: 1932:  DWORD message_length = ::FormatMessageA(kFlags,
    %%%%%: 1932-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1933:                                          0,  // no source, we're asking system
        -: 1934:                                          static_cast<DWORD>(hr),  // the error
        -: 1935:                                          0,  // no line width restrictions
        -: 1936:                                          error_text,  // output buffer
        -: 1937:                                          kBufSize,    // buf size
        -: 1938:                                          nullptr);  // no arguments for inserts
        -: 1939:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1940:  for (; message_length && IsSpace(error_text[message_length - 1]);
    %%%%%: 1940-block  0
    %%%%%: 1940-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1940-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1940-block  3
    %%%%%: 1940-block  4
    %%%%%: 1940-block  5
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 1941:       --message_length) {
    #####: 1942:    error_text[message_length - 1] = '\0';
    %%%%%: 1942-block  0
        -: 1943:  }
        -: 1944:
        -: 1945:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1946:
    #####: 1947:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    %%%%%: 1947-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1947-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1947-block  2
call    6 never executed
    $$$$$: 1947-block  3
call    7 never executed
    $$$$$: 1947-block  4
    #####: 1948:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1948-block  0
call    3 never executed
    $$$$$: 1948-block  1
call    4 never executed
    $$$$$: 1948-block  2
    #####: 1949:         << "Expected: " << expr << " " << expected << ".\n"
    %%%%%: 1949-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1949-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1949-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1949-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1949-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1950:         << "  Actual: " << error_hex << " " << error_text << "\n";
    %%%%%: 1950-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1950-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1950-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1950-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1950-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1950-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1950-block  6
    %%%%%: 1950-block  7
    #####: 1951:}
call    0 never executed
    $$$$$: 1951-block  0
call    1 never executed
        -: 1952:
        -: 1953:}  // namespace
        -: 1954:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1955:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    #####: 1956:  if (SUCCEEDED(hr)) {
    %%%%%: 1956-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1957:    return AssertionSuccess();
    %%%%%: 1957-block  0
call    0 never executed
        -: 1958:  }
    #####: 1959:  return HRESULTFailureHelper(expr, "succeeds", hr);
    %%%%%: 1959-block  0
call    0 never executed
        -: 1960:}
        -: 1961:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1962:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    #####: 1963:  if (FAILED(hr)) {
    %%%%%: 1963-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1964:    return AssertionSuccess();
    %%%%%: 1964-block  0
call    0 never executed
        -: 1965:  }
    #####: 1966:  return HRESULTFailureHelper(expr, "fails", hr);
    %%%%%: 1966-block  0
call    0 never executed
        -: 1967:}
        -: 1968:
        -: 1969:#endif  // GTEST_OS_WINDOWS
        -: 1970:
        -: 1971:// Utility functions for encoding Unicode text (wide strings) in
        -: 1972:// UTF-8.
        -: 1973:
        -: 1974:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1975:// like this:
        -: 1976://
        -: 1977:// Code-point length   Encoding
        -: 1978://   0 -  7 bits       0xxxxxxx
        -: 1979://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1980://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1981://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1982:
        -: 1983:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1984:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1985:
        -: 1986:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1987:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1988:
        -: 1989:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1990:constexpr uint32_t kMaxCodePoint3 =
        -: 1991:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1992:
        -: 1993:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1994:constexpr uint32_t kMaxCodePoint4 =
        -: 1995:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1996:
        -: 1997:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1998:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1999:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 2000:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 2001:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 2002:  *bits >>= n;
    #####: 2003:  return low_bits;
    %%%%%: 2003-block  0
        -: 2004:}
        -: 2005:
        -: 2006:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 2007:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 2008:// wide enough to contain a code point.
        -: 2009:// If the code_point is not a valid Unicode code point
        -: 2010:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 2011:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2012:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 2013:  if (code_point > kMaxCodePoint4) {
    %%%%%: 2013-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2014:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 2014-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2014-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2014-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2014-block  3
    %%%%%: 2014-block  4
call    9 never executed
call   10 never executed
    $$$$$: 2014-block  5
call   11 never executed
    $$$$$: 2014-block  6
call   12 never executed
    $$$$$: 2014-block  7
    $$$$$: 2014-block  8
        -: 2015:  }
        -: 2016:
        -: 2017:  char str[5];  // Big enough for the largest valid code point.
    #####: 2018:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 2018-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2019:    str[1] = '\0';
    #####: 2020:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 2020-block  0
    #####: 2021:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 2021-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2022:    str[2] = '\0';
    #####: 2023:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2023-block  0
call    0 never executed
    #####: 2024:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 2025:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 2025-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2026:    str[3] = '\0';
    #####: 2027:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2027-block  0
call    0 never executed
    #####: 2028:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2029:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 2030:  } else {  // code_point <= kMaxCodePoint4
    #####: 2031:    str[4] = '\0';
    #####: 2032:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2032-block  0
call    0 never executed
    #####: 2033:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2034:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2035:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 2036:  }
    #####: 2037:  return str;
    %%%%%: 2037-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2037-block  1
        -: 2038:}
        -: 2039:
        -: 2040:// The following two functions only make sense if the system
        -: 2041:// uses UTF-16 for wide string encoding. All supported systems
        -: 2042:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 2043:
        -: 2044:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 2045:// and thus should be combined into a single Unicode code point
        -: 2046:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2047:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
    #####: 2048:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    %%%%%: 2048-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2048-block  1
    %%%%%: 2048-block  2
    #####: 2049:         (second & 0xFC00) == 0xDC00;
    %%%%%: 2049-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2049-block  1
        -: 2050:}
        -: 2051:
        -: 2052:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2053:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 2054:                                                      wchar_t second) {
    #####: 2055:  const auto first_u = static_cast<uint32_t>(first);
    #####: 2056:  const auto second_u = static_cast<uint32_t>(second);
    #####: 2057:  const uint32_t mask = (1 << 10) - 1;
        -: 2058:  return (sizeof(wchar_t) == 2)
    #####: 2059:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2060:             :
        -: 2061:             // This function should not be called when the condition is
        -: 2062:             // false, but we provide a sensible default in case it is.
    #####: 2063:             first_u;
    %%%%%: 2063-block  0
        -: 2064:}
        -: 2065:
        -: 2066:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2067:// The wide string is assumed to have the following encoding:
        -: 2068://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2069://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2070:// Parameter str points to a null-terminated wide string.
        -: 2071:// Parameter num_chars may additionally limit the number
        -: 2072:// of wchar_t characters processed. -1 is used when the entire string
        -: 2073:// should be processed.
        -: 2074:// If the string contains code points that are not valid Unicode code points
        -: 2075:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2076:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2077:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2078:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2079:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2080:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2080-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2080-block  1
call    2 never executed
        -: 2081:
    #####: 2082:  ::std::stringstream stream;
    %%%%%: 2082-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2083:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2083-block  0
    %%%%%: 2083-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 2084:    uint32_t unicode_code_point;
        -: 2085:
    #####: 2086:    if (str[i] == L'\0') {
    %%%%%: 2086-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2087:      break;
    %%%%%: 2087-block  0
    #####: 2088:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2088-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2088-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2088-block  2
    %%%%%: 2088-block  3
    %%%%%: 2088-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2089:      unicode_code_point =
    #####: 2090:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2090-block  0
call    0 never executed
    #####: 2091:      i++;
        -: 2092:    } else {
    #####: 2093:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2093-block  0
        -: 2094:    }
        -: 2095:
    #####: 2096:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2096-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2096-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2096-block  2
call    6 never executed
    $$$$$: 2096-block  3
call    7 never executed
    $$$$$: 2096-block  4
        -: 2097:  }
    #####: 2098:  return StringStreamToString(&stream);
    %%%%%: 2098-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2098-block  1
    #####: 2099:}
    %%%%%: 2099-block  0
call    0 never executed
    $$$$$: 2099-block  1
call    1 never executed
        -: 2100:
        -: 2101:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2102:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2103:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2104:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2104-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2104-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 2105:
    #####: 2106:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2106-block  0
call    0 never executed
        -: 2107:}
        -: 2108:
        -: 2109:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2110:// same content.
        -: 2111://
        -: 2112:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2113:// C string is considered different to any non-NULL C string,
        -: 2114:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2115:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2116:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2116-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2116-block  1
        -: 2117:
    #####: 2118:  if (rhs == nullptr) return false;
    %%%%%: 2118-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2118-block  1
        -: 2119:
    #####: 2120:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2120-block  0
call    0 never executed
        -: 2121:}
        -: 2122:
        -: 2123:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2124:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2125:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2126:                               const wchar_t* rhs) {
    #####: 2127:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2127-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2128:    return AssertionSuccess();
    %%%%%: 2128-block  0
call    0 never executed
        -: 2129:  }
        -: 2130:
    #####: 2131:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 2131-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2131-block  1
call    3 never executed
    $$$$$: 2131-block  2
call    4 never executed
    $$$$$: 2131-block  3
    #####: 2132:                   PrintToString(rhs), false);
    %%%%%: 2132-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2132-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 2132-block  2
call    7 never executed
        -: 2133:}
        -: 2134:
        -: 2135:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2136:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2137:                               const char* s2_expression, const wchar_t* s1,
        -: 2138:                               const wchar_t* s2) {
    #####: 2139:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2139-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2140:    return AssertionSuccess();
    %%%%%: 2140-block  0
call    0 never executed
        -: 2141:  }
        -: 2142:
    #####: 2143:  return AssertionFailure()
    %%%%%: 2143-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2143-block  1
call    3 never executed
    #####: 2144:         << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 2144-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2144-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2144-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2144-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2145:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2145-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2145-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2145-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2145-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2145-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 2145-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 2145-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 2145-block  7
    %%%%%: 2145-block  8
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2145-block  9
call   24 never executed
    $$$$$: 2145-block 10
    $$$$$: 2145-block 11
call   25 never executed
    $$$$$: 2145-block 12
        -: 2146:}
        -: 2147:
        -: 2148:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2149:// the same content.
        -: 2150://
        -: 2151:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2152:// NULL C string is considered different to any non-NULL C string,
        -: 2153:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2154:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2155:  if (lhs == nullptr) return rhs == nullptr;
        4: 2155-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2155-block  1
       4*: 2156:  if (rhs == nullptr) return false;
        4: 2156-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2156-block  1
        4: 2157:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2157-block  0
call    0 returned 4
        -: 2158:}
        -: 2159:
        -: 2160:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2161:// have the same content.
        -: 2162://
        -: 2163:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2164:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2165:// including the empty string.
        -: 2166:// NB: The implementations on different platforms slightly differ.
        -: 2167:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2168:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2169:// which compares according to LC_CTYPE category of the current locale.
        -: 2170:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2171:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2172:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2173:                                              const wchar_t* rhs) {
    #####: 2174:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2174-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2174-block  1
        -: 2175:
    #####: 2176:  if (rhs == nullptr) return false;
    %%%%%: 2176-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2176-block  1
        -: 2177:
        -: 2178:#ifdef GTEST_OS_WINDOWS
    #####: 2179:  return _wcsicmp(lhs, rhs) == 0;
    %%%%%: 2179-block  0
call    0 never executed
        -: 2180:#elif defined(GTEST_OS_LINUX) && !defined(GTEST_OS_LINUX_ANDROID)
        -: 2181:  return wcscasecmp(lhs, rhs) == 0;
        -: 2182:#else
        -: 2183:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2184:  // Other unknown OSes may not define it either.
        -: 2185:  wint_t left, right;
        -: 2186:  do {
        -: 2187:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2188:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2189:  } while (left && left == right);
        -: 2190:  return left == right;
        -: 2191:#endif  // OS selector
        -: 2192:}
        -: 2193:
        -: 2194:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2195:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2196:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2197:                                     const std::string& suffix) {
    #####: 2198:  const size_t str_len = str.length();
    %%%%%: 2198-block  0
call    0 never executed
    #####: 2199:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2200:  return (str_len >= suffix_len) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2200-block  0
    %%%%%: 2200-block  1
    #####: 2201:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2201-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2202:                                      suffix.c_str());
    %%%%%: 2202-block  0
        -: 2203:}
        -: 2204:
        -: 2205:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2206:std::string String::FormatIntWidth2(int value) {
    #####: 2207:  return FormatIntWidthN(value, 2);
    %%%%%: 2207-block  0
call    0 never executed
        -: 2208:}
        -: 2209:
        -: 2210:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2211:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2212:  std::stringstream ss;
    %%%%%: 2212-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2213:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2213-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2213-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2214:  return ss.str();
    %%%%%: 2214-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2214-block  1
    #####: 2215:}
    %%%%%: 2215-block  0
call    0 never executed
    $$$$$: 2215-block  1
call    1 never executed
        -: 2216:
        -: 2217:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2218:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2219:  std::stringstream ss;
    %%%%%: 2219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2220:  ss << std::hex << std::uppercase << value;
    %%%%%: 2220-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2220-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2220-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2221:  return ss.str();
    %%%%%: 2221-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2221-block  1
    #####: 2222:}
    %%%%%: 2222-block  0
call    0 never executed
    $$$$$: 2222-block  1
call    1 never executed
        -: 2223:
        -: 2224:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2225:std::string String::FormatHexInt(int value) {
    #####: 2226:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2226-block  0
call    0 never executed
        -: 2227:}
        -: 2228:
        -: 2229:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2230:std::string String::FormatByte(unsigned char value) {
    #####: 2231:  std::stringstream ss;
    %%%%%: 2231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2232:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2232-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2232-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2232-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2233:     << static_cast<unsigned int>(value);
    %%%%%: 2233-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2234:  return ss.str();
    %%%%%: 2234-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2234-block  1
    #####: 2235:}
    %%%%%: 2235-block  0
call    0 never executed
    $$$$$: 2235-block  1
call    1 never executed
        -: 2236:
        -: 2237:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2238:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 114 returned 100% blocks executed 75%
      114: 2239:std::string StringStreamToString(::std::stringstream* ss) {
      114: 2240:  const ::std::string& str = ss->str();
      114: 2240-block  0
call    0 returned 114
branch  1 taken 114 (fallthrough)
branch  2 taken 0 (throw)
      114: 2241:  const char* const start = str.c_str();
      114: 2241-block  0
call    0 returned 114
      114: 2242:  const char* const end = start + str.length();
call    0 returned 114
        -: 2243:
      114: 2244:  std::string result;
call    0 returned 114
      114: 2245:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 114
branch  1 taken 114 (fallthrough)
branch  2 taken 0 (throw)
     1212: 2246:  for (const char* ch = start; ch != end; ++ch) {
      114: 2246-block  0
     1098: 2246-block  1
     1212: 2246-block  2
branch  0 taken 1098
branch  1 taken 114 (fallthrough)
     1098: 2247:    if (*ch == '\0') {
     1098: 2247-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1098
    #####: 2248:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2248-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2249:    } else {
     1098: 2250:      result += *ch;
     1098: 2250-block  0
call    0 returned 1098
branch  1 taken 1098 (fallthrough)
branch  2 taken 0 (throw)
        -: 2251:    }
        -: 2252:  }
        -: 2253:
      228: 2254:  return result;
      114: 2254-block  0
      114: 2254-block  1
      114: 2255:}
      114: 2255-block  0
call    0 returned 114
    $$$$$: 2255-block  1
call    1 never executed
    $$$$$: 2255-block  2
call    2 never executed
        -: 2256:
        -: 2257:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2258:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2259:                              const Message& user_msg) {
        -: 2260:  // Appends the user message if it's non-empty.
    #####: 2261:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2261-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2262:  if (user_msg_string.empty()) {
    %%%%%: 2262-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2263:    return gtest_msg;
    %%%%%: 2263-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2264:  }
    #####: 2265:  if (gtest_msg.empty()) {
    %%%%%: 2265-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2266:    return user_msg_string;
    %%%%%: 2266-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2267:  }
    #####: 2268:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2268-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2268-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2268-block  2
    %%%%%: 2268-block  3
call    6 never executed
    $$$$$: 2268-block  4
call    7 never executed
    $$$$$: 2268-block  5
    #####: 2269:}
    %%%%%: 2269-block  0
call    0 never executed
    $$$$$: 2269-block  1
call    1 never executed
        -: 2270:
        -: 2271:}  // namespace internal
        -: 2272:
        -: 2273:// class TestResult
        -: 2274:
        -: 2275:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 56 returned 100% blocks executed 100%
       56: 2276:TestResult::TestResult()
       56: 2277:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       56: 2277-block  0
call    0 returned 56
call    1 returned 56
call    2 returned 56
        -: 2278:
        -: 2279:// D'tor.
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2280:TestResult::~TestResult() = default;
    %%%%%: 2280-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2281:
        -: 2282:// Returns the i-th test part result among all the results. i can
        -: 2283:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2284:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2285:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2286:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2286-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2286-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2286-block  2
    %%%%%: 2286-block  3
    %%%%%: 2286-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 2286-block  5
call    7 never executed
    #####: 2287:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2287-block  0
call    0 never executed
        -: 2288:}
        -: 2289:
        -: 2290:// Returns the i-th test property. i can range from 0 to
        -: 2291:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2292:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2293:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2294:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2294-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2294-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2294-block  2
    %%%%%: 2294-block  3
    %%%%%: 2294-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 2294-block  5
call    7 never executed
    #####: 2295:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2295-block  0
call    0 never executed
        -: 2296:}
        -: 2297:
        -: 2298:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2299:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2299-block  0
call    0 never executed
        -: 2300:
        -: 2301:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2302:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2303:  test_part_results_.push_back(test_part_result);
    %%%%%: 2303-block  0
call    0 never executed
    #####: 2304:}
        -: 2305:
        -: 2306:// Adds a test property to the list. If a property with the same key as the
        -: 2307:// supplied property is already represented, the value of this test_property
        -: 2308:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2309:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2310:                                const TestProperty& test_property) {
    #####: 2311:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2311-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2311-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2312:    return;
    %%%%%: 2312-block  0
    %%%%%: 2312-block  1
        -: 2313:  }
    #####: 2314:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2314-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2315:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2316:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2316-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2317:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2317-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2317-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2317-block  2
call    7 never executed
call    8 never executed
    $$$$$: 2317-block  3
call    9 never executed
    $$$$$: 2317-block  4
call   10 never executed
    $$$$$: 2317-block  5
    $$$$$: 2317-block  6
    $$$$$: 2317-block  7
    #####: 2318:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 2319:    test_properties_.push_back(test_property);
    %%%%%: 2319-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2320:    return;
    %%%%%: 2320-block  0
        -: 2321:  }
    #####: 2322:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2322-block  0
call    0 never executed
    %%%%%: 2322-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2322-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2322-block  3
call    8 never executed
    $$$$$: 2322-block  4
call    9 never executed
    $$$$$: 2322-block  5
    $$$$$: 2322-block  6
    #####: 2323:}
    %%%%%: 2323-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 2323-block  1
call    3 never executed
        -: 2324:
        -: 2325:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2326:// output.
        -: 2327:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2328:    "disabled",    "errors", "failures", "name",
        -: 2329:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2330:
        -: 2331:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2332:// output.
        -: 2333:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2334:    "disabled", "errors", "failures",  "name",
        -: 2335:    "tests",    "time",   "timestamp", "skipped"};
        -: 2336:
        -: 2337:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2338:static const char* const kReservedTestCaseAttributes[] = {
        -: 2339:    "classname",  "name",        "status", "time",
        -: 2340:    "type_param", "value_param", "file",   "line"};
        -: 2341:
        -: 2342:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2343:// still RecordProperty("result") or RecordProperty("timestamp")
        -: 2344:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2345:    "classname",   "name", "status", "time",   "type_param",
        -: 2346:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2347:
        -: 2348:template <size_t kSize>
    #####: 2349:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2350:  return std::vector<std::string>(array, array + kSize);
        -: 2351:}
------------------
_ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2349:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2349-block  0
    #####: 2350:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2350-block  1
        -: 2351:}
------------------
_ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2349:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2349-block  0
    #####: 2350:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2350-block  1
        -: 2351:}
------------------
        -: 2352:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2353:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2354:    const std::string& xml_element) {
    #####: 2355:  if (xml_element == "testsuites") {
    %%%%%: 2355-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2356:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2356-block  0
call    0 never executed
    #####: 2357:  } else if (xml_element == "testsuite") {
    %%%%%: 2357-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2358:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2358-block  0
call    0 never executed
    #####: 2359:  } else if (xml_element == "testcase") {
    %%%%%: 2359-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2360:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2360-block  0
call    0 never executed
        -: 2361:  } else {
    #####: 2362:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2362-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2362-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2362-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2362-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2362-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2362-block  5
call   16 never executed
    $$$$$: 2362-block  6
call   17 never executed
        -: 2363:  }
        -: 2364:  // This code is unreachable but some compilers may not realizes that.
    #####: 2365:  return std::vector<std::string>();
    %%%%%: 2365-block  0
call    0 never executed
        -: 2366:}
        -: 2367:
        -: 2368:#if GTEST_HAS_FILE_SYSTEM
        -: 2369:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
        -: 2370:// This function is only used when file systems are enabled.
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2371:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2372:    const std::string& xml_element) {
    #####: 2373:  if (xml_element == "testsuites") {
    %%%%%: 2373-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2374:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2374-block  0
call    0 never executed
    #####: 2375:  } else if (xml_element == "testsuite") {
    %%%%%: 2375-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2376:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2376-block  0
call    0 never executed
    #####: 2377:  } else if (xml_element == "testcase") {
    %%%%%: 2377-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2378:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2378-block  0
call    0 never executed
        -: 2379:  } else {
    #####: 2380:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2380-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2380-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2380-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2380-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2380-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2380-block  5
call   16 never executed
    $$$$$: 2380-block  6
call   17 never executed
        -: 2381:  }
        -: 2382:  // This code is unreachable but some compilers may not realizes that.
    #####: 2383:  return std::vector<std::string>();
    %%%%%: 2383-block  0
call    0 never executed
        -: 2384:}
        -: 2385:#endif
        -: 2386:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2387:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2388:  Message word_list;
    %%%%%: 2388-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2389:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2389-block  0
    %%%%%: 2389-block  1
    %%%%%: 2389-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2390:    if (i > 0 && words.size() > 2) {
    %%%%%: 2390-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2390-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2390-block  2
    %%%%%: 2390-block  3
    %%%%%: 2390-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 2391:      word_list << ", ";
    %%%%%: 2391-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2392:    }
    #####: 2393:    if (i == words.size() - 1) {
    %%%%%: 2393-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2394:      word_list << "and ";
    %%%%%: 2394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2395:    }
    #####: 2396:    word_list << "'" << words[i] << "'";
    %%%%%: 2396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2396-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2396-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
        -: 2397:  }
    #####: 2398:  return word_list.GetString();
    %%%%%: 2398-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2398-block  1
    #####: 2399:}
    %%%%%: 2399-block  0
call    0 never executed
    $$$$$: 2399-block  1
call    1 never executed
        -: 2400:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2401:static bool ValidateTestPropertyName(
        -: 2402:    const std::string& property_name,
        -: 2403:    const std::vector<std::string>& reserved_names) {
    #####: 2404:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2404-block  0
call    5 never executed
    $$$$$: 2404-block  1
    #####: 2405:      reserved_names.end()) {
    %%%%%: 2405-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 2405-block  1
call    3 never executed
    #####: 2406:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2406-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2406-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2406-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2406-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2406-block  4
call   12 never executed
    $$$$$: 2406-block  5
call   13 never executed
    $$$$$: 2406-block  6
    $$$$$: 2406-block  7
call   14 never executed
    #####: 2407:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2407-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2407-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2407-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
    $$$$$: 2407-block  3
call   11 never executed
    $$$$$: 2407-block  4
    #####: 2408:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2408-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2408-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2408-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2408-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2409:    return false;
        -: 2410:  }
    #####: 2411:  return true;
    %%%%%: 2411-block  0
        -: 2412:}
        -: 2413:
        -: 2414:// Adds a failure if the key is a reserved attribute of the element named
        -: 2415:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2416:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2417:                                      const TestProperty& test_property) {
    #####: 2418:  return ValidateTestPropertyName(test_property.key(),
    %%%%%: 2418-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2418-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2418-block  2
call    7 never executed
    $$$$$: 2418-block  3
call    8 never executed
    $$$$$: 2418-block  4
    $$$$$: 2418-block  5
    #####: 2419:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2419-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2419-block  1
call    3 never executed
    %%%%%: 2419-block  2
    $$$$$: 2419-block  3
call    4 never executed
        -: 2420:}
        -: 2421:
        -: 2422:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 55 returned 100% blocks executed 100%
       55: 2423:void TestResult::Clear() {
       55: 2424:  test_part_results_.clear();
       55: 2424-block  0
call    0 returned 55
       55: 2425:  test_properties_.clear();
call    0 returned 55
       55: 2426:  death_test_count_ = 0;
       55: 2427:  elapsed_time_ = 0;
       55: 2428:}
        -: 2429:
        -: 2430:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2431:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2432:  return result.skipped();
    %%%%%: 2432-block  0
call    0 never executed
        -: 2433:}
        -: 2434:
        -: 2435:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 260 returned 100% blocks executed 88%
      260: 2436:bool TestResult::Skipped() const {
     260*: 2437:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
      260: 2437-block  0
call    0 returned 260
branch  1 taken 260 (fallthrough)
branch  2 taken 0
      260: 2437-block  1
call    3 returned 260
branch  4 taken 0 (fallthrough)
branch  5 taken 260
    %%%%%: 2437-block  2
      260: 2437-block  3
      260: 2437-block  4
        -: 2438:}
        -: 2439:
        -: 2440:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 529 returned 100% blocks executed 50%
      529: 2441:bool TestResult::Failed() const {
     529*: 2442:  for (int i = 0; i < total_part_count(); ++i) {
      529: 2442-block  0
    %%%%%: 2442-block  1
      529: 2442-block  2
call    0 returned 529
branch  1 taken 0
branch  2 taken 529 (fallthrough)
    #####: 2443:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2443-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2443-block  1
        -: 2444:  }
      529: 2445:  return false;
      529: 2445-block  0
        -: 2446:}
        -: 2447:
        -: 2448:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2449:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2450:  return result.fatally_failed();
    %%%%%: 2450-block  0
call    0 never executed
        -: 2451:}
        -: 2452:
        -: 2453:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 103 returned 100% blocks executed 100%
      103: 2454:bool TestResult::HasFatalFailure() const {
      103: 2455:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
      103: 2455-block  0
call    0 returned 103
        -: 2456:}
        -: 2457:
        -: 2458:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2459:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2460:  return result.nonfatally_failed();
    %%%%%: 2460-block  0
call    0 never executed
        -: 2461:}
        -: 2462:
        -: 2463:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2464:bool TestResult::HasNonfatalFailure() const {
    #####: 2465:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2465-block  0
call    0 never executed
        -: 2466:}
        -: 2467:
        -: 2468:// Gets the number of all test parts.  This is the sum of the number
        -: 2469:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 529 returned 100% blocks executed 100%
      529: 2470:int TestResult::total_part_count() const {
      529: 2471:  return static_cast<int>(test_part_results_.size());
      529: 2471-block  0
call    0 returned 529
        -: 2472:}
        -: 2473:
        -: 2474:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2475:int TestResult::test_property_count() const {
    #####: 2476:  return static_cast<int>(test_properties_.size());
    %%%%%: 2476-block  0
call    0 never executed
        -: 2477:}
        -: 2478:
        -: 2479:// class Test
        -: 2480:
        -: 2481:// Creates a Test object.
        -: 2482:
        -: 2483:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 51 returned 100% blocks executed 71%
       51: 2484:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
       51: 2484-block  0
call    0 returned 51
call    1 returned 51
branch  2 taken 51 (fallthrough)
branch  3 taken 0 (throw)
       51: 2484-block  1
call    4 returned 51
    $$$$$: 2484-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 2484-block  3
call    7 never executed
        -: 2485:
        -: 2486:// The d'tor restores the states of all flags.  The actual work is
        -: 2487:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2488:// visible here.
      51*: 2489:Test::~Test() = default;
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2489:Test::~Test() = default;
    %%%%%: 2489-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 51 returned 100% blocks executed 100%
       51: 2489:Test::~Test() = default;
       51: 2489-block  0
call    0 returned 51
------------------
        -: 2490:
        -: 2491:// Sets up the test fixture.
        -: 2492://
        -: 2493:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 51 returned 100% blocks executed 100%
       51: 2494:void Test::SetUp() {}
        -: 2495:
        -: 2496:// Tears down the test fixture.
        -: 2497://
        -: 2498:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 51 returned 100% blocks executed 100%
       51: 2499:void Test::TearDown() {}
        -: 2500:
        -: 2501:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2502:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2503:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2503-block  0
call    0 never executed
call    1 never executed
    #####: 2504:}
        -: 2505:
        -: 2506:namespace internal {
        -: 2507:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2508:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2509:                                    const std::string& message) {
        -: 2510:  // This function is a friend of UnitTest and as such has access to
        -: 2511:  // AddTestPartResult.
    #####: 2512:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2512-block  0
call    0 never executed
    %%%%%: 2512-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2512-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2512-block  3
call    7 never executed
    $$$$$: 2512-block  4
call    8 never executed
    $$$$$: 2512-block  5
        -: 2513:      result_type,
        -: 2514:      nullptr,  // No info about the source file where the exception occurred.
        -: 2515:      -1,       // We have no info on which line caused the exception.
        -: 2516:      message,
        -: 2517:      "");  // No stack trace, either.
    #####: 2518:}
        -: 2519:
        -: 2520:}  // namespace internal
        -: 2521:
        -: 2522:// Google Test requires all tests in the same test suite to use the same test
        -: 2523:// fixture class.  This function checks if the current test has the
        -: 2524:// same fixture class as the first test in the current test suite.  If
        -: 2525:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2526:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 51 returned 100% blocks executed 15%
       51: 2527:bool Test::HasSameFixtureClass() {
       51: 2528:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       51: 2528-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2529:  const TestSuite* const test_suite = impl->current_test_suite();
       51: 2529-block  0
call    0 returned 51
        -: 2530:
        -: 2531:  // Info about the first test in the current test suite.
       51: 2532:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 51
call    1 returned 51
       51: 2533:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       51: 2534:  const char* const first_test_name = first_test_info->name();
call    0 returned 51
        -: 2535:
        -: 2536:  // Info about the current test.
       51: 2537:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 51
       51: 2538:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       51: 2539:  const char* const this_test_name = this_test_info->name();
call    0 returned 51
        -: 2540:
       51: 2541:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 51
        -: 2542:    // Is the first test defined using TEST?
    #####: 2543:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2543-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2544:    // Is this test defined using TEST?
    #####: 2545:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2545-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2546:
    #####: 2547:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2547-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2547-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2548:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2549:      // Tell the user how to fix this.
        -: 2550:
        -: 2551:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2552:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2553:      // the fixture IDs are different for the two tests.
    #####: 2554:      const char* const TEST_name =
    %%%%%: 2554-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2554-block  1
    %%%%%: 2554-block  2
        -: 2555:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2556:      const char* const TEST_F_name =
    %%%%%: 2556-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2556-block  1
    %%%%%: 2556-block  2
        -: 2557:          first_is_TEST ? this_test_name : first_test_name;
        -: 2558:
    #####: 2559:      ADD_FAILURE()
    %%%%%: 2559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2559-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2559-block  2
call    6 never executed
    $$$$$: 2559-block  3
call    7 never executed
    $$$$$: 2559-block  4
    $$$$$: 2559-block  5
call    8 never executed
    $$$$$: 2559-block  6
    #####: 2560:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2560-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2561:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2561-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2562:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2562-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2562-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2562-block  2
    #####: 2563:          << ",\n"
    %%%%%: 2563-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2564:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2564-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2564-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2565:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2565-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2565-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2565-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2566:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2567:          << "case.";
    %%%%%: 2567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2567-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2568:    } else {
        -: 2569:      // Two fixture classes with the same name appear in two different
        -: 2570:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2571:      ADD_FAILURE()
    %%%%%: 2571-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2571-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2571-block  2
call    6 never executed
    $$$$$: 2571-block  3
call    7 never executed
    $$$$$: 2571-block  4
    $$$$$: 2571-block  5
call    8 never executed
    $$$$$: 2571-block  6
    #####: 2572:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2572-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2573:          << "class.  However, in test suite "
    %%%%%: 2573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2574:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2574-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2574-block  2
    #####: 2575:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2575-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2575-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2575-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2576:          << this_test_name << "\n"
    %%%%%: 2576-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2576-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2577:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2577-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2578:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2578-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2579:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2580:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2580-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2581:    }
    #####: 2582:    return false;
    %%%%%: 2582-block  0
        -: 2583:  }
        -: 2584:
       51: 2585:  return true;
       51: 2585-block  0
        -: 2586:}
        -: 2587:
        -: 2588:namespace internal {
        -: 2589:
        -: 2590:#if GTEST_HAS_EXCEPTIONS
        -: 2591:
        -: 2592:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2593:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2594:                                             const char* location) {
    #####: 2595:  Message message;
    %%%%%: 2595-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2596:  if (description != nullptr) {
    %%%%%: 2596-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2597:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2597-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2597-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2597-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2598:  } else {
    #####: 2599:    message << "Unknown C++ exception";
    %%%%%: 2599-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2600:  }
    #####: 2601:  message << " thrown in " << location << ".";
    %%%%%: 2601-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2601-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2601-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2602:
    #####: 2603:  return message.GetString();
    %%%%%: 2603-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2603-block  1
    #####: 2604:}
    %%%%%: 2604-block  0
call    0 never executed
    $$$$$: 2604-block  1
call    1 never executed
        -: 2605:
        -: 2606:static std::string PrintTestPartResultToString(
        -: 2607:    const TestPartResult& test_part_result);
        -: 2608:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2609:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2610:    const TestPartResult& failure)
    #####: 2611:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2611-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2611-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2611-block  2
call    7 never executed
    $$$$$: 2611-block  3
call    8 never executed
        -: 2612:
        -: 2613:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2614:
        -: 2615:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2616:// compiler rejects the code if they were declared static.
        -: 2617:
        -: 2618:// Runs the given method and handles SEH exceptions it throws, when
        -: 2619:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2620:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2621:// exceptions in the same function.  Therefore, we provide a separate
        -: 2622:// wrapper function for handling SEH exceptions.)
        -: 2623:template <class T, typename Result>
      264: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
     264*: 2635:  return (object->*method)();
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
       1*: 2635:  return (object->*method)();
        1: 2635-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2635-block  1
        1: 2635-block  2
        1: 2635-block  3
call    2 returned 1
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 8 returned 100% blocks executed 80%
        8: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
       8*: 2635:  return (object->*method)();
        8: 2635-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    %%%%%: 2635-block  1
        8: 2635-block  2
        8: 2635-block  3
call    2 returned 8
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 51 returned 100% blocks executed 83%
       51: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
      51*: 2635:  return (object->*method)();
       51: 2635-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51: 2635-block  1
    %%%%%: 2635-block  2
       51: 2635-block  3
call    2 returned 51
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 204 returned 100% blocks executed 100%
      204: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
      204: 2635:  return (object->*method)();
      204: 2635-block  0
branch  0 taken 153 (fallthrough)
branch  1 taken 51
      153: 2635-block  1
       51: 2635-block  2
      204: 2635-block  3
call    2 returned 204
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
        -: 2638:
        -: 2639:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2640:// exceptions, if they are supported; returns the 0-value for type
        -: 2641:// Result in case of an SEH exception.
        -: 2642:template <class T, typename Result>
      264: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
      264: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
      264: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    =====: 2680:      internal::ReportFailureInUnknownLocation(
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2683:    } catch (...) {  // NOLINT
    =====: 2684:      internal::ReportFailureInUnknownLocation(
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
        1: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2668-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
        1: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2671-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 8 returned 100% blocks executed 18%
        8: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
        8: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        8: 2668-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
        8: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        8: 2671-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 51 returned 100% blocks executed 18%
       51: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
       51: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       51: 2668-block  0
call    0 returned 51
call    1 returned 51
branch  2 taken 51 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
       51: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       51: 2671-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 204 returned 100% blocks executed 18%
      204: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
      204: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
      204: 2668-block  0
call    0 returned 204
call    1 returned 204
branch  2 taken 204 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
      204: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
      204: 2671-block  0
call    0 returned 204
branch  1 taken 204 (fallthrough)
branch  2 taken 0 (throw)
      204: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
        -: 2696:
        -: 2697:}  // namespace internal
        -: 2698:
        -: 2699:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 51 returned 100% blocks executed 90%
       51: 2700:void Test::Run() {
      51*: 2701:  if (!HasSameFixtureClass()) return;
       51: 2701-block  0
call    0 returned 51
branch  1 taken 0 (fallthrough)
branch  2 taken 51
    %%%%%: 2701-block  1
        -: 2702:
       51: 2703:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       51: 2703-block  0
call    0 returned 51
       51: 2704:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 51
call    1 returned 51
       51: 2705:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 51
        -: 2706:  // We will run the test only if SetUp() was successful and didn't call
        -: 2707:  // GTEST_SKIP().
      51*: 2708:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0
       51: 2708-block  0
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0
       51: 2708-block  1
    %%%%%: 2708-block  2
       51: 2708-block  3
branch  6 taken 51 (fallthrough)
branch  7 taken 0
       51: 2709:    impl->os_stack_trace_getter()->UponLeavingGTest();
       51: 2709-block  0
call    0 returned 51
call    1 returned 51
       51: 2710:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 51
        -: 2711:                                                  "the test body");
        -: 2712:  }
        -: 2713:
        -: 2714:  // However, we want to clean up as much as possible.  Hence we will
        -: 2715:  // always call TearDown(), even if SetUp() or the test body has
        -: 2716:  // failed.
       51: 2717:  impl->os_stack_trace_getter()->UponLeavingGTest();
       51: 2717-block  0
call    0 returned 51
call    1 returned 51
       51: 2718:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 51
        -: 2719:                                                "TearDown()");
        -: 2720:}
        -: 2721:
        -: 2722:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 103 returned 100% blocks executed 100%
      103: 2723:bool Test::HasFatalFailure() {
      103: 2724:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
      103: 2724-block  0
call    0 returned 103
call    1 returned 103
call    2 returned 103
        -: 2725:}
        -: 2726:
        -: 2727:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2728:bool Test::HasNonfatalFailure() {
        -: 2729:  return internal::GetUnitTestImpl()
        -: 2730:      ->current_test_result()
    #####: 2731:      ->HasNonfatalFailure();
    %%%%%: 2731-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2732:}
        -: 2733:
        -: 2734:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 103 returned 100% blocks executed 100%
      103: 2735:bool Test::IsSkipped() {
      103: 2736:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
      103: 2736-block  0
call    0 returned 103
call    1 returned 103
call    2 returned 103
        -: 2737:}
        -: 2738:
        -: 2739:// class TestInfo
        -: 2740:
        -: 2741:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2742:// object.
function _ZN7testing8TestInfoC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PKcS8_NS_8internal12CodeLocationEPKvPNS9_15TestFactoryBaseE called 51 returned 100% blocks executed 29%
       51: 2743:TestInfo::TestInfo(std::string a_test_suite_name, std::string a_name,
        -: 2744:                   const char* a_type_param, const char* a_value_param,
        -: 2745:                   internal::CodeLocation a_code_location,
        -: 2746:                   internal::TypeId fixture_class_id,
       51: 2747:                   internal::TestFactoryBase* factory)
       51: 2748:    : test_suite_name_(std::move(a_test_suite_name)),
       51: 2748-block  0
call    0 returned 51
call    1 returned 51
       51: 2749:      name_(std::move(a_name)),
call    0 returned 51
call    1 returned 51
      51*: 2750:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 51
    %%%%%: 2750-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2750-block  1
    %%%%%: 2750-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2750-block  3
       51: 2750-block  4
       51: 2750-block  5
call    8 returned 51
branch  9 taken 0 (fallthrough)
branch 10 taken 51
    $$$$$: 2750-block  6
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2750-block  7
    $$$$$: 2750-block  8
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2750-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2750-block 10
call   17 never executed
      51*: 2751:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
       51: 2751-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 51
    %%%%%: 2751-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2751-block  2
    %%%%%: 2751-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2751-block  4
       51: 2751-block  5
       51: 2751-block  6
call    8 returned 51
branch  9 taken 0 (fallthrough)
branch 10 taken 51
    $$$$$: 2751-block  7
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2751-block  8
    $$$$$: 2751-block  9
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2751-block 10
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2751-block 11
call   17 never executed
       51: 2752:      location_(std::move(a_code_location)),
       51: 2752-block  0
call    0 returned 51
call    1 returned 51
       51: 2753:      fixture_class_id_(fixture_class_id),
       51: 2754:      should_run_(false),
       51: 2755:      is_disabled_(false),
       51: 2756:      matches_filter_(false),
       51: 2757:      is_in_another_shard_(false),
       51: 2758:      factory_(factory),
       51: 2759:      result_() {}
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2759-block  0
    $$$$$: 2759-block  1
call    3 never executed
    $$$$$: 2759-block  2
call    4 never executed
    $$$$$: 2759-block  3
call    5 never executed
    $$$$$: 2759-block  4
call    6 never executed
    $$$$$: 2759-block  5
call    7 never executed
        -: 2760:
        -: 2761:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2762:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2762-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2762-block  1
call    2 never executed
    %%%%%: 2762-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2763:
        -: 2764:namespace internal {
        -: 2765:
        -: 2766:// Creates a new TestInfo object and registers it with Google Test;
        -: 2767:// returns the created object.
        -: 2768://
        -: 2769:// Arguments:
        -: 2770://
        -: 2771://   test_suite_name:  name of the test suite
        -: 2772://   name:             name of the test
        -: 2773://   type_param:       the name of the test's type parameter, or NULL if
        -: 2774://                     this is not a typed or a type-parameterized test.
        -: 2775://   value_param:      text representation of the test's value parameter,
        -: 2776://                     or NULL if this is not a value-parameterized test.
        -: 2777://   code_location:    code location where the test is defined
        -: 2778://   fixture_class_id: ID of the test fixture class
        -: 2779://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2780://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2781://   factory:          pointer to the factory that creates a test object.
        -: 2782://                     The newly created TestInfo instance will assume
        -: 2783://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcS8_S8_NS0_12CodeLocationEPKvPFvvESD_PNS0_15TestFactoryBaseE called 51 returned 100% blocks executed 56%
       51: 2784:TestInfo* MakeAndRegisterTestInfo(
        -: 2785:    std::string test_suite_name, const char* name, const char* type_param,
        -: 2786:    const char* value_param, CodeLocation code_location,
        -: 2787:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2788:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2789:  TestInfo* const test_info =
       51: 2790:      new TestInfo(std::move(test_suite_name), name, type_param, value_param,
       51: 2790-block  0
call    0 returned 51
      204: 2791:                   std::move(code_location), fixture_class_id, factory);
       51: 2791-block  0
call    0 returned 51
call    1 returned 51
call    2 returned 51
       51: 2791-block  1
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 51
call    7 returned 51
branch  8 taken 51 (fallthrough)
branch  9 taken 0 (throw)
       51: 2791-block  2
call   10 returned 51
call   11 returned 51
call   12 returned 51
    $$$$$: 2791-block  3
call   13 never executed
    $$$$$: 2791-block  4
    $$$$$: 2791-block  5
call   14 never executed
    $$$$$: 2791-block  6
    $$$$$: 2791-block  7
    $$$$$: 2791-block  8
call   15 never executed
    $$$$$: 2791-block  9
    $$$$$: 2791-block 10
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$: 2791-block 11
call   18 never executed
       51: 2792:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 51
call    1 returned 51
       51: 2793:  return test_info;
       51: 2793-block  0
        -: 2794:}
        -: 2795:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcRKNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2796:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2797:                                const CodeLocation& code_location) {
    #####: 2798:  Message errors;
    %%%%%: 2798-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2799:  errors
    #####: 2800:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2800-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2800-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2800-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2801:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2801-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2802:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2802-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2802-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2802-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2803:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2803-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2804:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2804-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2805:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2805-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2806:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2806-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2807:      << "test suites.";
    %%%%%: 2807-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2808:
    #####: 2809:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2809-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2809-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2809-block  2
call    8 never executed
    $$$$$: 2809-block  3
    $$$$$: 2809-block  4
call    9 never executed
    $$$$$: 2809-block  5
    #####: 2810:                                          code_location.line)
call    0 never executed
    #####: 2811:                    << " " << errors.GetString();
    %%%%%: 2811-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2811-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2811-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2811-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2811-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2811-block  5
call   14 never executed
    $$$$$: 2811-block  6
    #####: 2812:}
call    0 never executed
    $$$$$: 2812-block  0
call    1 never executed
        -: 2813:
        -: 2814:// This method expands all parameterized tests registered with macros TEST_P
        -: 2815:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2816:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2817:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2818:  if (!parameterized_tests_registered_) {
        1: 2818-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2819:    parameterized_test_registry_.RegisterTests();
        1: 2819-block  0
call    0 returned 1
        1: 2820:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2821:    parameterized_tests_registered_ = true;
        -: 2822:  }
        1: 2823:}
        -: 2824:
        -: 2825:}  // namespace internal
        -: 2826:
        -: 2827:// Creates the test object, runs it, records its result, and then
        -: 2828:// deletes it.
function _ZN7testing8TestInfo3RunEv called 51 returned 100% blocks executed 86%
       51: 2829:void TestInfo::Run() {
       51: 2830:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
       51: 2830-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2830-block  1
call    3 returned 51
call    4 returned 51
       51: 2831:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 51
    #####: 2832:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2832-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2832-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2832-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    #####: 2833:    return;
    %%%%%: 2833-block  0
        -: 2834:  }
        -: 2835:
        -: 2836:  // Tells UnitTest where to store test result.
       51: 2837:  UnitTest::GetInstance()->set_current_test_info(this);
       51: 2837-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2837-block  1
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
        -: 2838:
        -: 2839:  // Notifies the unit test event listeners that a test is about to start.
       51: 2840:  repeater->OnTestStart(*this);
       51: 2840-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2841:  result_.set_start_timestamp(internal::GetTimeInMillis());
       51: 2841-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2841-block  1
call    3 returned 51
       51: 2842:  internal::Timer timer;
call    0 returned 51
       51: 2843:  UnitTest::GetInstance()->UponLeavingGTest();
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2843-block  0
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
        -: 2844:
        -: 2845:  // Creates the test object.
      102: 2846:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       51: 2847:      factory_, &internal::TestFactoryBase::CreateTest,
       51: 2847-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
        -: 2848:      "the test fixture's constructor");
        -: 2849:
        -: 2850:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2851:  // GTEST_SKIP().
        -: 2852:  // Note that the object will not be null
      51*: 2853:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
       51: 2853-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2853-block  1
branch  3 taken 51 (fallthrough)
branch  4 taken 0
       51: 2853-block  2
call    5 returned 51
branch  6 taken 51 (fallthrough)
branch  7 taken 0 (throw)
       51: 2853-block  3
branch  8 taken 51 (fallthrough)
branch  9 taken 0
       51: 2853-block  4
    %%%%%: 2853-block  5
       51: 2853-block  6
branch 10 taken 51 (fallthrough)
branch 11 taken 0
        -: 2854:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2855:    // exception handling code.
       51: 2856:    test->Run();
       51: 2856-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
        -: 2857:  }
        -: 2858:
       51: 2859:  if (test != nullptr) {
       51: 2859-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
        -: 2860:    // Deletes the test object.
       51: 2861:    UnitTest::GetInstance()->UponLeavingGTest();
       51: 2861-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2861-block  1
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
       51: 2862:    internal::HandleExceptionsInMethodIfSupported(
       51: 2862-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
        -: 2863:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2864:  }
        -: 2865:
       51: 2866:  result_.set_elapsed_time(timer.Elapsed());
       51: 2866-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2866-block  1
call    3 returned 51
        -: 2867:
        -: 2868:  // Notifies the unit test event listener that a test has just finished.
       51: 2869:  repeater->OnTestEnd(*this);
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
        -: 2870:
        -: 2871:  // Tells UnitTest to stop associating assertion results to this
        -: 2872:  // test.
       51: 2873:  UnitTest::GetInstance()->set_current_test_info(nullptr);
       51: 2873-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 2873-block  1
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
        -: 2874:}
        -: 2875:
        -: 2876:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2877:void TestInfo::Skip() {
    #####: 2878:  if (!should_run_) return;
    %%%%%: 2878-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2878-block  1
    %%%%%: 2878-block  2
        -: 2879:
    #####: 2880:  UnitTest::GetInstance()->set_current_test_info(this);
    %%%%%: 2880-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2880-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2881:
    #####: 2882:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
    %%%%%: 2882-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2882-block  1
call    3 never executed
call    4 never executed
        -: 2883:
        -: 2884:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2885:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2886:
        -: 2887:  const TestPartResult test_part_result =
    #####: 2888:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2888-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 2889:  internal::GetUnitTestImpl()
    #####: 2890:      ->GetTestPartResultReporterForCurrentThread()
    %%%%%: 2890-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2890-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2891:      ->ReportTestPartResult(test_part_result);
    %%%%%: 2891-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2892:
        -: 2893:  // Notifies the unit test event listener that a test has just finished.
    #####: 2894:  repeater->OnTestEnd(*this);
    %%%%%: 2894-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2895:  UnitTest::GetInstance()->set_current_test_info(nullptr);
    %%%%%: 2895-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2895-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2896:}
    %%%%%: 2896-block  0
call    0 never executed
    $$$$$: 2896-block  1
call    1 never executed
        -: 2897:
        -: 2898:// class TestSuite
        -: 2899:
        -: 2900:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 4 returned 100% blocks executed 100%
        4: 2901:int TestSuite::successful_test_count() const {
        4: 2902:  return CountIf(test_info_list_, TestPassed);
        4: 2902-block  0
call    0 returned 4
        -: 2903:}
        -: 2904:
        -: 2905:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 4 returned 100% blocks executed 100%
        4: 2906:int TestSuite::skipped_test_count() const {
        4: 2907:  return CountIf(test_info_list_, TestSkipped);
        4: 2907-block  0
call    0 returned 4
        -: 2908:}
        -: 2909:
        -: 2910:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 8 returned 100% blocks executed 100%
        8: 2911:int TestSuite::failed_test_count() const {
        8: 2912:  return CountIf(test_info_list_, TestFailed);
        8: 2912-block  0
call    0 returned 8
        -: 2913:}
        -: 2914:
        -: 2915:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 4 returned 100% blocks executed 100%
        4: 2916:int TestSuite::reportable_disabled_test_count() const {
        4: 2917:  return CountIf(test_info_list_, TestReportableDisabled);
        4: 2917-block  0
call    0 returned 4
        -: 2918:}
        -: 2919:
        -: 2920:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2921:int TestSuite::disabled_test_count() const {
    #####: 2922:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2922-block  0
call    0 never executed
        -: 2923:}
        -: 2924:
        -: 2925:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2926:int TestSuite::reportable_test_count() const {
    #####: 2927:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2927-block  0
call    0 never executed
        -: 2928:}
        -: 2929:
        -: 2930:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 16 returned 100% blocks executed 100%
       16: 2931:int TestSuite::test_to_run_count() const {
       16: 2932:  return CountIf(test_info_list_, ShouldRunTest);
       16: 2932-block  0
call    0 returned 16
        -: 2933:}
        -: 2934:
        -: 2935:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 55 returned 100% blocks executed 100%
       55: 2936:int TestSuite::total_test_count() const {
       55: 2937:  return static_cast<int>(test_info_list_.size());
       55: 2937-block  0
call    0 returned 55
        -: 2938:}
        -: 2939:
        -: 2940:// Creates a TestSuite with the given name.
        -: 2941://
        -: 2942:// Arguments:
        -: 2943://
        -: 2944://   a_name:       name of the test suite
        -: 2945://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2946://                 this is not a typed or a type-parameterized test suite.
        -: 2947://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2948://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESC_ called 4 returned 100% blocks executed 30%
        4: 2949:TestSuite::TestSuite(const std::string& a_name, const char* a_type_param,
        -: 2950:                     internal::SetUpTestSuiteFunc set_up_tc,
        4: 2951:                     internal::TearDownTestSuiteFunc tear_down_tc)
        4: 2952:    : name_(a_name),
       4*: 2953:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2953-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2953-block  1
    %%%%%: 2953-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2953-block  3
        4: 2953-block  4
        4: 2953-block  5
call    8 returned 4
branch  9 taken 0 (fallthrough)
branch 10 taken 4
    $$$$$: 2953-block  6
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2953-block  7
    $$$$$: 2953-block  8
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2953-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2953-block 10
call   17 never executed
        4: 2954:      set_up_tc_(set_up_tc),
        4: 2955:      tear_down_tc_(tear_down_tc),
        4: 2956:      should_run_(false),
        4: 2957:      start_timestamp_(0),
        8: 2958:      elapsed_time_(0) {}
        4: 2958-block  0
call    0 returned 4
        4: 2958-block  1
call    1 returned 4
call    2 returned 4
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 2958-block  2
    $$$$$: 2958-block  3
call    6 never executed
    $$$$$: 2958-block  4
call    7 never executed
    $$$$$: 2958-block  5
call    8 never executed
    $$$$$: 2958-block  6
call    9 never executed
        -: 2959:
        -: 2960:// Destructor of TestSuite.
    #####: 2961:TestSuite::~TestSuite() {
        -: 2962:  // Deletes every Test in the collection.
    #####: 2963:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2964:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 0 returned 0% blocks executed 0%
    #####: 2961:TestSuite::~TestSuite() {
        -: 2962:  // Deletes every Test in the collection.
        -: 2963:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2964:}
    %%%%%: 2964-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 0 returned 0% blocks executed 0%
    #####: 2961:TestSuite::~TestSuite() {
        -: 2962:  // Deletes every Test in the collection.
    #####: 2963:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2963-block  0
call    0 never executed
    #####: 2964:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 2965:
        -: 2966:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2967:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2968:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2969:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2969-block  0
call    0 never executed
    #####: 2970:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2970-block  0
call    2 never executed
    %%%%%: 2970-block  1
    %%%%%: 2970-block  2
        -: 2971:}
        -: 2972:
        -: 2973:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2974:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 51 returned 100% blocks executed 86%
       51: 2975:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       51: 2976:  const int index = GetElementOr(test_indices_, i, -1);
       51: 2976-block  0
call    0 returned 51
      51*: 2977:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51: 2977-block  0
call    2 returned 51
    %%%%%: 2977-block  1
       51: 2977-block  2
        -: 2978:}
        -: 2979:
        -: 2980:// Adds a test to this test suite.  Will delete the test upon
        -: 2981:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 51 returned 100% blocks executed 100%
       51: 2982:void TestSuite::AddTestInfo(TestInfo* test_info) {
       51: 2983:  test_info_list_.push_back(test_info);
       51: 2983-block  0
call    0 returned 51
       51: 2984:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 51
call    1 returned 51
branch  2 taken 51 (fallthrough)
branch  3 taken 0 (throw)
       51: 2985:}
       51: 2985-block  0
        -: 2986:
        -: 2987:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 4 returned 100% blocks executed 72%
        4: 2988:void TestSuite::Run() {
       4*: 2989:  if (!should_run_) return;
        4: 2989-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2989-block  1
    %%%%%: 2989-block  2
        -: 2990:
        4: 2991:  UnitTest::GetInstance()->set_current_test_suite(this);
        4: 2991-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 2991-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        -: 2992:
        4: 2993:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        4: 2993-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 2993-block  1
call    3 returned 4
call    4 returned 4
        -: 2994:
        -: 2995:  // Ensure our tests are in a deterministic order.
        -: 2996:  //
        -: 2997:  // We do this by sorting lexicographically on (file, line number), providing
        -: 2998:  // an order matching what the user can see in the source code.
        -: 2999:  //
        -: 3000:  // In the common case the line number comparison shouldn't be necessary,
        -: 3001:  // because the registrations made by the TEST macro are executed in order
        -: 3002:  // within a translation unit. But this is not true of the manual registration
        -: 3003:  // API, and in more exotic scenarios a single file may be part of multiple
        -: 3004:  // translation units.
        4: 3005:  std::stable_sort(test_info_list_.begin(), test_info_list_.end(),
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
function _ZZN7testing9TestSuite3RunEvENKUlPKNS_8TestInfoES3_E_clES3_S3_ called 121 returned 100% blocks executed 88%
      121: 3006:                   [](const TestInfo* const a, const TestInfo* const b) {
      121: 3007:                     if (const int result = std::strcmp(a->file(), b->file())) {
      121: 3007-block  0
call    0 returned 121
call    1 returned 121
branch  2 taken 0 (fallthrough)
branch  3 taken 121
    #####: 3008:                       return result < 0;
    %%%%%: 3008-block  0
        -: 3009:                     }
        -: 3010:
      121: 3011:                     return a->line() < b->line();
      121: 3011-block  0
call    0 returned 121
call    1 returned 121
        -: 3012:                   });
        -: 3013:
        -: 3014:  // Call both legacy and the new API
        4: 3015:  repeater->OnTestSuiteStart(*this);
        4: 3015-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3016://  Legacy API is deprecated but still available
        -: 3017:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        4: 3018:  repeater->OnTestCaseStart(*this);
        4: 3018-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3019:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3020:
        4: 3021:  UnitTest::GetInstance()->UponLeavingGTest();
        4: 3021-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3021-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 3022:  internal::HandleExceptionsInMethodIfSupported(
        4: 3022-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3023:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3024:
        -: 3025:  const bool skip_all =
       4*: 3026:      ad_hoc_test_result().Failed() || ad_hoc_test_result().Skipped();
        4: 3026-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 3026-block  1
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4: 3026-block  2
call    6 returned 4
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4: 3026-block  3
branch 10 taken 0 (fallthrough)
branch 11 taken 4
    %%%%%: 3026-block  4
        4: 3026-block  5
        -: 3027:
        4: 3028:  start_timestamp_ = internal::GetTimeInMillis();
        4: 3028-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3029:  internal::Timer timer;
        4: 3029-block  0
call    0 returned 4
       55: 3030:  for (int i = 0; i < total_test_count(); i++) {
       51: 3030-block  0
       55: 3030-block  1
call    0 returned 55
branch  1 taken 51
branch  2 taken 4 (fallthrough)
       51: 3031:    if (skip_all) {
       51: 3031-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 51
    #####: 3032:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3032-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3032-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3033:    } else {
       51: 3034:      GetMutableTestInfo(i)->Run();
       51: 3034-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 3034-block  1
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
        -: 3035:    }
      51*: 3036:    if (GTEST_FLAG_GET(fail_fast) &&
       51: 3036-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 51
    %%%%%: 3036-block  1
       51: 3036-block  2
       51: 3036-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 51
    #####: 3037:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3037-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3037-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3037-block  2
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3038:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3038-block  0
    %%%%%: 3038-block  1
    %%%%%: 3038-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3039:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3039-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3039-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3040:      }
    #####: 3041:      break;
    %%%%%: 3041-block  0
        -: 3042:    }
        -: 3043:  }
        4: 3044:  elapsed_time_ = timer.Elapsed();
        4: 3044-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3045:
        4: 3046:  UnitTest::GetInstance()->UponLeavingGTest();
        4: 3046-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3046-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 3047:  internal::HandleExceptionsInMethodIfSupported(
        4: 3047-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3048:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3049:
        -: 3050:  // Call both legacy and the new API
        4: 3051:  repeater->OnTestSuiteEnd(*this);
        4: 3051-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3052://  Legacy API is deprecated but still available
        -: 3053:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        4: 3054:  repeater->OnTestCaseEnd(*this);
        4: 3054-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3055:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3056:
        4: 3057:  UnitTest::GetInstance()->set_current_test_suite(nullptr);
        4: 3057-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3057-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        -: 3058:}
        -: 3059:
        -: 3060:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3061:void TestSuite::Skip() {
    #####: 3062:  if (!should_run_) return;
    %%%%%: 3062-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3062-block  1
        -: 3063:
    #####: 3064:  UnitTest::GetInstance()->set_current_test_suite(this);
    %%%%%: 3064-block  0
call    0 never executed
call    1 never executed
        -: 3065:
    #####: 3066:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3067:
        -: 3068:  // Call both legacy and the new API
    #####: 3069:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3070://  Legacy API is deprecated but still available
        -: 3071:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3072:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3073:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3074:
    #####: 3075:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3075-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3076:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3076-block  0
call    0 never executed
call    1 never executed
        -: 3077:  }
        -: 3078:
        -: 3079:  // Call both legacy and the new API
    #####: 3080:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3080-block  0
call    0 never executed
        -: 3081:  // Legacy API is deprecated but still available
        -: 3082:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3083:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3084:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3085:
    #####: 3086:  UnitTest::GetInstance()->set_current_test_suite(nullptr);
call    0 never executed
call    1 never executed
        -: 3087:}
        -: 3088:
        -: 3089:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 4 returned 100% blocks executed 100%
        4: 3090:void TestSuite::ClearResult() {
        4: 3091:  ad_hoc_test_result_.Clear();
        4: 3091-block  0
call    0 returned 4
        4: 3092:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 4
        4: 3093:}
        -: 3094:
        -: 3095:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3096:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3097:  Shuffle(random, &test_indices_);
    %%%%%: 3097-block  0
call    0 never executed
    #####: 3098:}
        -: 3099:
        -: 3100:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 4 returned 100% blocks executed 100%
        4: 3101:void TestSuite::UnshuffleTests() {
       55: 3102:  for (size_t i = 0; i < test_indices_.size(); i++) {
        4: 3102-block  0
       55: 3102-block  1
call    0 returned 55
branch  1 taken 51
branch  2 taken 4 (fallthrough)
       51: 3103:    test_indices_[i] = static_cast<int>(i);
       51: 3103-block  0
call    0 returned 51
        -: 3104:  }
        4: 3105:}
        -: 3106:
        -: 3107:// Formats a countable noun.  Depending on its quantity, either the
        -: 3108:// singular form or the plural form is used. e.g.
        -: 3109://
        -: 3110:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3111:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 13 returned 100% blocks executed 65%
       13: 3112:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3113:                                       const char* plural_form) {
       26: 3114:  return internal::StreamableToString(count) + " " +
       13: 3114-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13: 3114-block  1
call    3 returned 13
branch  4 taken 13 (fallthrough)
branch  5 taken 0 (throw)
       13: 3114-block  2
call    6 returned 13
call    7 returned 13
    $$$$$: 3114-block  3
call    8 never executed
    $$$$$: 3114-block  4
call    9 never executed
    $$$$$: 3114-block  5
      39*: 3115:         (count == 1 ? singular_form : plural_form);
       13: 3115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    %%%%%: 3115-block  1
       13: 3115-block  2
       13: 3115-block  3
call    2 returned 13
branch  3 taken 13 (fallthrough)
branch  4 taken 0 (throw)
       13: 3115-block  4
        -: 3116:}
        -: 3117:
        -: 3118:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3119:static std::string FormatTestCount(int test_count) {
        3: 3120:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3120-block  0
call    0 returned 3
        -: 3121:}
        -: 3122:
        -: 3123:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3124:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3125:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3125-block  0
call    0 returned 2
        -: 3126:}
        -: 3127:
        -: 3128:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3129:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3130:// to "Failure", as the user usually doesn't care about the difference
        -: 3131:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3132:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3133:  switch (type) {
    %%%%%: 3133-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3134:    case TestPartResult::kSkip:
    #####: 3135:      return "Skipped\n";
    %%%%%: 3135-block  0
    #####: 3136:    case TestPartResult::kSuccess:
    #####: 3137:      return "Success";
    %%%%%: 3137-block  0
        -: 3138:
    #####: 3139:    case TestPartResult::kNonFatalFailure:
        -: 3140:    case TestPartResult::kFatalFailure:
        -: 3141:#ifdef _MSC_VER
        -: 3142:      return "error: ";
        -: 3143:#else
    #####: 3144:      return "Failure\n";
    %%%%%: 3144-block  0
        -: 3145:#endif
    #####: 3146:    default:
    #####: 3147:      return "Unknown result type";
    %%%%%: 3147-block  0
        -: 3148:  }
        -: 3149:}
        -: 3150:
        -: 3151:namespace internal {
        -: 3152:namespace {
        -: 3153:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3154:}  // namespace
        -: 3155:
        -: 3156:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3157:static std::string PrintTestPartResultToString(
        -: 3158:    const TestPartResult& test_part_result) {
    #####: 3159:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3159-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3159-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
    $$$$$: 3159-block  2
call    9 never executed
    $$$$$: 3159-block  3
    $$$$$: 3159-block  4
call   10 never executed
        -: 3160:                           test_part_result.file_name(),
    #####: 3161:                           test_part_result.line_number())
    %%%%%: 3161-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3162:                    << " "
    %%%%%: 3162-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3163:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3163-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 3163-block  1
    #####: 3164:                    << test_part_result.message())
    %%%%%: 3164-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3164-block  1
call    4 never executed
    $$$$$: 3164-block  2
    #####: 3165:      .GetString();
    %%%%%: 3165-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3165-block  1
        -: 3166:}
        -: 3167:
        -: 3168:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3169:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3170:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3170-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3171:  printf("%s\n", result.c_str());
    %%%%%: 3171-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3172:  fflush(stdout);
    %%%%%: 3172-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3172-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3173:  // If the test program runs in Visual Studio or a debugger, the
        -: 3174:  // following statements add the test part result message to the Output
        -: 3175:  // window such that the user can double-click on it to jump to the
        -: 3176:  // corresponding source code location; otherwise they do nothing.
        -: 3177:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 3178:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3179:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3180:  // want the same message printed twice.
    #####: 3181:  ::OutputDebugStringA(result.c_str());
    %%%%%: 3181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3182:  ::OutputDebugStringA("\n");
    %%%%%: 3182-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3183:#endif
    #####: 3184:}
    %%%%%: 3184-block  0
call    0 never executed
    $$$$$: 3184-block  1
call    1 never executed
        -: 3185:
        -: 3186:// class PrettyUnitTestResultPrinter
        -: 3187:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&       \
        -: 3188:    !defined(GTEST_OS_WINDOWS_GAMES) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 3189:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3190:
        -: 3191:// Returns the character attribute for the given color.
        -: 3192:static WORD GetColorAttribute(GTestColor color) {
        -: 3193:  switch (color) {
        -: 3194:    case GTestColor::kRed:
        -: 3195:      return FOREGROUND_RED;
        -: 3196:    case GTestColor::kGreen:
        -: 3197:      return FOREGROUND_GREEN;
        -: 3198:    case GTestColor::kYellow:
        -: 3199:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3200:    default:
        -: 3201:      return 0;
        -: 3202:  }
        -: 3203:}
        -: 3204:
        -: 3205:static int GetBitOffset(WORD color_mask) {
        -: 3206:  if (color_mask == 0) return 0;
        -: 3207:
        -: 3208:  int bitOffset = 0;
        -: 3209:  while ((color_mask & 1) == 0) {
        -: 3210:    color_mask >>= 1;
        -: 3211:    ++bitOffset;
        -: 3212:  }
        -: 3213:  return bitOffset;
        -: 3214:}
        -: 3215:
        -: 3216:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3217:  // Let's reuse the BG
        -: 3218:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3219:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3220:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3221:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3222:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3223:
        -: 3224:  WORD new_color =
        -: 3225:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3226:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3227:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3228:
        -: 3229:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3230:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3231:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3232:  }
        -: 3233:  return new_color;
        -: 3234:}
        -: 3235:
        -: 3236:#else
        -: 3237:
        -: 3238:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3239:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3240:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3241:  switch (color) {
    %%%%%: 3241-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3242:    case GTestColor::kRed:
    #####: 3243:      return "1";
    %%%%%: 3243-block  0
    #####: 3244:    case GTestColor::kGreen:
    #####: 3245:      return "2";
    %%%%%: 3245-block  0
    #####: 3246:    case GTestColor::kYellow:
    #####: 3247:      return "3";
    %%%%%: 3247-block  0
    #####: 3248:    default:
    #####: 3249:      assert(false);
    %%%%%: 3249-block  0
call    0 never executed
        -: 3250:      return "9";
        -: 3251:  }
        -: 3252:}
        -: 3253:
        -: 3254:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3255:
        -: 3256:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 21%
        1: 3257:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3258:  std::string c = GTEST_FLAG_GET(color);
        1: 3258-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3259:  const char* const gtest_color = c.c_str();
        1: 3259-block  0
call    0 returned 1
        -: 3260:
        1: 3261:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3261-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 3262:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3263:    // On Windows the TERM variable is usually not set, but the
        -: 3264:    // console there does support colors.
        -: 3265:    return stdout_is_tty;
        -: 3266:#else
        -: 3267:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3268:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3268-block  0
call    0 never executed
        -: 3269:    const bool term_supports_color =
    #####: 3270:        term != nullptr && (String::CStringEquals(term, "xterm") ||
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3270-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3270-block  1
    %%%%%: 3270-block  2
    #####: 3271:                            String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3271-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3272:                            String::CStringEquals(term, "xterm-kitty") ||
    %%%%%: 3272-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3273:                            String::CStringEquals(term, "alacritty") ||
    %%%%%: 3273-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3274:                            String::CStringEquals(term, "screen") ||
    %%%%%: 3274-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3275:                            String::CStringEquals(term, "tmux") ||
    %%%%%: 3275-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3276:                            String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3276-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3277:                            String::CStringEquals(term, "linux") ||
    %%%%%: 3277-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3278:                            String::CStringEquals(term, "cygwin") ||
    %%%%%: 3278-block  0
call    0 never executed
    %%%%%: 3278-block  1
    #####: 3279:                            String::EndsWithCaseInsensitive(term, "-256color"));
    %%%%%: 3279-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3279-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3279-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 3279-block  3
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%: 3279-block  4
branch 11 never executed (fallthrough)
branch 12 never executed
    %%%%%: 3279-block  5
call   13 never executed
    %%%%%: 3279-block  6
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%: 3279-block  7
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%: 3279-block  8
call   18 never executed
    %%%%%: 3279-block  9
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$: 3279-block 10
branch 21 never executed (fallthrough)
branch 22 never executed
    $$$$$: 3279-block 11
call   23 never executed
    $$$$$: 3279-block 12
    $$$$$: 3279-block 13
branch 24 never executed (fallthrough)
branch 25 never executed
    $$$$$: 3279-block 14
    $$$$$: 3279-block 15
branch 26 never executed (fallthrough)
branch 27 never executed
    $$$$$: 3279-block 16
call   28 never executed
    $$$$$: 3279-block 17
    $$$$$: 3279-block 18
branch 29 never executed (fallthrough)
branch 30 never executed
    $$$$$: 3279-block 19
    #####: 3280:    return stdout_is_tty && term_supports_color;
    %%%%%: 3280-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3280-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3280-block  2
    %%%%%: 3280-block  3
    %%%%%: 3280-block  4
        -: 3281:#endif  // GTEST_OS_WINDOWS
        -: 3282:  }
        -: 3283:
        1: 3284:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3284-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3285:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3285-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3285-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       3*: 3286:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
        1: 3286-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3286-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3286-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 3286-block  3
        1: 3286-block  4
        2: 3287:         String::CStringEquals(gtest_color, "1");
        1: 3287-block  0
call    0 returned 1
        1: 3287-block  1
        -: 3288:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3289:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3290:  // be conservative.
        1: 3291:}
        1: 3291-block  0
call    0 returned 1
    $$$$$: 3291-block  1
call    1 never executed
        -: 3292:
        -: 3293:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3294:// cannot simply emit special characters and have the terminal change colors.
        -: 3295:// This routine must actually emit the characters rather than return a string
        -: 3296:// that would be colored when printed, as can be done on Linux.
        -: 3297:
        -: 3298:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 116 returned 100% blocks executed 60%
      116: 3299:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3300:  va_list args;
      116: 3301:  va_start(args, fmt);
        -: 3302:
        -: 3303:  static const bool in_color_mode =
        -: 3304:      // We don't condition this on GTEST_HAS_FILE_SYSTEM because we still need
        -: 3305:      // to be able to detect terminal I/O regardless.
      116: 3306:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
      116: 3306-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 115
        1: 3306-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3306-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 3306-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 3306-block  4
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 3306-block  5
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 3306-block  6
call   17 returned 1
    $$$$$: 3306-block  7
branch 18 never executed (fallthrough)
branch 19 never executed
    $$$$$: 3306-block  8
call   20 never executed
        -: 3307:
     116*: 3308:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
      116: 3308-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 116
    %%%%%: 3308-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3308-block  2
      116: 3308-block  3
        -: 3309:
      116: 3310:  if (!use_color) {
      116: 3310-block  0
branch  0 taken 116 (fallthrough)
branch  1 taken 0
      116: 3311:    vprintf(fmt, args);
      116: 3311-block  0
call    0 returned 116
branch  1 taken 116 (fallthrough)
branch  2 taken 0 (throw)
      116: 3312:    va_end(args);
      116: 3313:    return;
      116: 3313-block  0
        -: 3314:  }
        -: 3315:
        -: 3316:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&       \
        -: 3317:    !defined(GTEST_OS_WINDOWS_GAMES) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 3318:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3319:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3320:
        -: 3321:  // Gets the current text color.
        -: 3322:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3323:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3324:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3325:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3326:
        -: 3327:  // We need to flush the stream buffers into the console before each
        -: 3328:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3329:  // printed but has not yet reached the console.
        -: 3330:  fflush(stdout);
        -: 3331:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3332:
        -: 3333:  vprintf(fmt, args);
        -: 3334:
        -: 3335:  fflush(stdout);
        -: 3336:  // Restores the text color.
        -: 3337:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3338:#else
    #####: 3339:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3339-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3339-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3340:  vprintf(fmt, args);
    %%%%%: 3340-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3341:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3341-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3342:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3343:  va_end(args);
    %%%%%: 3343-block  0
        -: 3344:}
        -: 3345:
        -: 3346:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3347:// output to label the type parameter and value parameter for a test.
        -: 3348:static const char kTypeParamLabel[] = "TypeParam";
        -: 3349:static const char kValueParamLabel[] = "GetParam()";
        -: 3350:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3351:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3352:  const char* const type_param = test_info.type_param();
    %%%%%: 3352-block  0
call    0 never executed
    #####: 3353:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3354:
    #####: 3355:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3355-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3356:    printf(", where ");
    %%%%%: 3356-block  0
call    0 never executed
    #####: 3357:    if (type_param != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3358:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3358-block  0
call    0 never executed
    #####: 3359:      if (value_param != nullptr) printf(" and ");
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3359-block  0
call    2 never executed
        -: 3360:    }
    #####: 3361:    if (value_param != nullptr) {
    %%%%%: 3361-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3362:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3362-block  0
call    0 never executed
        -: 3363:    }
        -: 3364:  }
    #####: 3365:}
        -: 3366:
        -: 3367:// This class implements the TestEventListener interface.
        -: 3368://
        -: 3369:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3370:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3371: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3372:  PrettyUnitTestResultPrinter() = default;
        1: 3372-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 102 returned 100% blocks executed 100%
      102: 3373:  static void PrintTestName(const char* test_suite, const char* test) {
      102: 3374:    printf("%s.%s", test_suite, test);
      102: 3374-block  0
call    0 returned 102
      102: 3375:  }
        -: 3376:
        -: 3377:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3378:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3379:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3380:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3381:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3382:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3383:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3384:#else
        -: 3385:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3386:#endif  // OnTestCaseStart
        -: 3387:
        -: 3388:  void OnTestStart(const TestInfo& test_info) override;
        -: 3389:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3390:
        -: 3391:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3392:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3393:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3394:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3395:#else
        -: 3396:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3397:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3398:
        -: 3399:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3400:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3401:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3402:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3403:
        -: 3404: private:
        -: 3405:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3406:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3407:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3408:};
        -: 3409:
        -: 3410:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 63%
        1: 3411:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3412:    const UnitTest& unit_test, int iteration) {
        1: 3413:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3413-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3414:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3414-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3415:
        1: 3416:  std::string f = GTEST_FLAG_GET(filter);
        1: 3416-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3417:  const char* const filter = f.c_str();
        1: 3417-block  0
call    0 returned 1
        -: 3418:
        -: 3419:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3420:  // tests may be skipped.
        1: 3421:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3422:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
        1: 3422-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3423:                  filter);
        -: 3424:  }
        -: 3425:
        1: 3426:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3426-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3426-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3427:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3427-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3428:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3428-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3429:                  static_cast<int>(shard_index) + 1,
        -: 3430:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3431:  }
        -: 3432:
        1: 3433:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3433-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3434:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3434-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3435:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3436:                  unit_test.random_seed());
        -: 3437:  }
        -: 3438:
        1: 3439:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3439-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3440:  printf("Running %s from %s.\n",
        1: 3440-block  0
call    0 returned 1
        1: 3440-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3441:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3441-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3441-block  1
call    6 returned 1
    $$$$$: 3441-block  2
call    7 never executed
    $$$$$: 3441-block  3
        2: 3442:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3442-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3442-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3442-block  2
call    7 never executed
    $$$$$: 3442-block  3
        1: 3443:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3443-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3444:}
        1: 3444-block  0
call    0 returned 1
    $$$$$: 3444-block  1
call    1 never executed
        -: 3445:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3446:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3447:    const UnitTest& /*unit_test*/) {
        1: 3448:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3448-block  0
call    0 returned 1
        1: 3449:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3450:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3451:}
        -: 3452:
        -: 3453:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 4 returned 100% blocks executed 78%
        4: 3454:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3455:  const std::string counts =
        4: 3456:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        4: 3456-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3456-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 3457:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        4: 3457-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3458:  printf("%s from %s", counts.c_str(), test_case.name());
        4: 3458-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4: 3459:  if (test_case.type_param() == nullptr) {
        4: 3459-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4: 3460:    printf("\n");
        4: 3460-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 3461:  } else {
    #####: 3462:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3462-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3463:  }
        4: 3464:  fflush(stdout);
        4: 3464-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3464-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 3465:}
        4: 3465-block  0
call    0 returned 4
    $$$$$: 3465-block  1
call    1 never executed
        -: 3466:#else
        -: 3467:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3468:    const TestSuite& test_suite) {
        -: 3469:  const std::string counts =
        -: 3470:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3471:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3472:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3473:  if (test_suite.type_param() == nullptr) {
        -: 3474:    printf("\n");
        -: 3475:  } else {
        -: 3476:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3477:  }
        -: 3478:  fflush(stdout);
        -: 3479:}
        -: 3480:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3481:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 51 returned 100% blocks executed 100%
       51: 3482:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       51: 3483:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
       51: 3483-block  0
call    0 returned 51
       51: 3484:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 51
call    1 returned 51
call    2 returned 51
       51: 3485:  printf("\n");
call    0 returned 51
       51: 3486:  fflush(stdout);
call    0 returned 51
call    1 returned 51
       51: 3487:}
        -: 3488:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3489:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3490:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3490-block  0
call    0 never executed
    #####: 3491:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3492:  printf("\n");
call    0 never executed
    #####: 3493:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3494:}
        -: 3495:
        -: 3496:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3497:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3498:    const TestPartResult& result) {
    #####: 3499:  switch (result.type()) {
    %%%%%: 3499-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3500:    // If the test part succeeded, we don't need to do anything.
    #####: 3501:    case TestPartResult::kSuccess:
    #####: 3502:      return;
    %%%%%: 3502-block  0
    #####: 3503:    default:
        -: 3504:      // Print failure message from the assertion
        -: 3505:      // (e.g. expected this and got that).
    #####: 3506:      PrintTestPartResult(result);
    %%%%%: 3506-block  0
call    0 never executed
    #####: 3507:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3508:  }
        -: 3509:}
        -: 3510:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 51 returned 100% blocks executed 69%
       51: 3511:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       51: 3512:  if (test_info.result()->Passed()) {
       51: 3512-block  0
call    0 returned 51
call    1 returned 51
branch  2 taken 51 (fallthrough)
branch  3 taken 0
       51: 3513:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
       51: 3513-block  0
call    0 returned 51
    #####: 3514:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3514-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3515:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3515-block  0
call    0 never executed
        -: 3516:  } else {
    #####: 3517:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3517-block  0
call    0 never executed
        -: 3518:  }
       51: 3519:  PrintTestName(test_info.test_suite_name(), test_info.name());
       51: 3519-block  0
call    0 returned 51
call    1 returned 51
call    2 returned 51
      51*: 3520:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 51
call    1 returned 51
branch  2 taken 0 (fallthrough)
branch  3 taken 51
    %%%%%: 3520-block  0
call    4 never executed
        -: 3521:
       51: 3522:  if (GTEST_FLAG_GET(print_time)) {
       51: 3522-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51: 3523:    printf(" (%s ms)\n",
       51: 3523-block  0
call    0 returned 51
call    1 returned 51
branch  2 taken 51 (fallthrough)
branch  3 taken 0 (throw)
      102: 3524:           internal::StreamableToString(test_info.result()->elapsed_time())
       51: 3524-block  0
call    0 returned 51
call    1 returned 51
call    2 returned 51
branch  3 taken 51 (fallthrough)
branch  4 taken 0 (throw)
       51: 3524-block  1
call    5 returned 51
    $$$$$: 3524-block  2
call    6 never executed
    $$$$$: 3524-block  3
        -: 3525:               .c_str());
        -: 3526:  } else {
    #####: 3527:    printf("\n");
    %%%%%: 3527-block  0
call    0 never executed
        -: 3528:  }
       51: 3529:  fflush(stdout);
       51: 3529-block  0
call    0 returned 51
call    1 returned 51
       51: 3530:}
        -: 3531:
        -: 3532:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 4 returned 100% blocks executed 68%
        4: 3533:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       4*: 3534:  if (!GTEST_FLAG_GET(print_time)) return;
        4: 3534-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 3534-block  1
    %%%%%: 3534-block  2
        -: 3535:
        -: 3536:  const std::string counts =
        4: 3537:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        4: 3537-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3537-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 3538:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        4: 3538-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3539:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        4: 3539-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        8: 3540:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        4: 3540-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 3540-block  1
call    4 returned 4
    $$$$$: 3540-block  2
call    5 never executed
    $$$$$: 3540-block  3
    $$$$$: 3540-block  4
        4: 3541:  fflush(stdout);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3541-block  0
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 3542:}
        4: 3542-block  0
call    0 returned 4
    $$$$$: 3542-block  1
call    1 never executed
        -: 3543:#else
        -: 3544:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3545:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3546:
        -: 3547:  const std::string counts =
        -: 3548:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3549:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3550:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3551:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3552:  fflush(stdout);
        -: 3553:}
        -: 3554:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3555:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3556:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3557:    const UnitTest& /*unit_test*/) {
        1: 3558:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3558-block  0
call    0 returned 1
        1: 3559:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3560:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3561:}
        -: 3562:
        -: 3563:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3564:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3565:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3565-block  0
call    0 never executed
    #####: 3566:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3567:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3567-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3567-block  1
call    7 never executed
    $$$$$: 3567-block  2
call    8 never executed
        -: 3568:
    #####: 3569:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3569-block  0
    %%%%%: 3569-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3570:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3570-block  0
call    0 never executed
    #####: 3571:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3571-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3571-block  1
    %%%%%: 3571-block  2
    %%%%%: 3571-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3572:      continue;
    %%%%%: 3572-block  0
        -: 3573:    }
    #####: 3574:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3574-block  0
    %%%%%: 3574-block  1
    %%%%%: 3574-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3575:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3575-block  0
call    0 never executed
    #####: 3576:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3576-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3576-block  1
    %%%%%: 3576-block  2
    %%%%%: 3576-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3577:        continue;
    %%%%%: 3577-block  0
        -: 3578:      }
    #####: 3579:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3579-block  0
call    0 never executed
    #####: 3580:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3581:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3582:      printf("\n");
call    0 never executed
        -: 3583:    }
        -: 3584:  }
    #####: 3585:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3585-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3585-block  1
    %%%%%: 3585-block  2
    %%%%%: 3585-block  3
call    2 never executed
        -: 3586:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3587:}
        -: 3588:
        -: 3589:// Internal helper for printing the list of test suite failures not covered by
        -: 3590:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3591:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3592:    const UnitTest& unit_test) {
    #####: 3593:  int suite_failure_count = 0;
    #####: 3594:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3594-block  0
    %%%%%: 3594-block  1
    %%%%%: 3594-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3595:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3595-block  0
call    0 never executed
    #####: 3596:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3597:      continue;
    %%%%%: 3597-block  0
        -: 3598:    }
    #####: 3599:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3599-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3600:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3600-block  0
call    0 never executed
    #####: 3601:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3602:      ++suite_failure_count;
        -: 3603:    }
        -: 3604:  }
    #####: 3605:  if (suite_failure_count > 0) {
    %%%%%: 3605-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3606:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3606-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3606-block  1
    %%%%%: 3606-block  2
    %%%%%: 3606-block  3
call    2 never executed
        -: 3607:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3608:  }
    #####: 3609:}
        -: 3610:
        -: 3611:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3612:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3613:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3613-block  0
call    0 never executed
    #####: 3614:  if (skipped_test_count == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3615:    return;
    %%%%%: 3615-block  0
        -: 3616:  }
        -: 3617:
    #####: 3618:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3618-block  0
    %%%%%: 3618-block  1
    %%%%%: 3618-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3619:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3619-block  0
call    0 never executed
    #####: 3620:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3620-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3620-block  1
    %%%%%: 3620-block  2
    %%%%%: 3620-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3621:      continue;
    %%%%%: 3621-block  0
        -: 3622:    }
    #####: 3623:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3623-block  0
    %%%%%: 3623-block  1
    %%%%%: 3623-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3624:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3624-block  0
call    0 never executed
    #####: 3625:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3625-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3625-block  1
    %%%%%: 3625-block  2
    %%%%%: 3625-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3626:        continue;
    %%%%%: 3626-block  0
        -: 3627:      }
    #####: 3628:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3628-block  0
call    0 never executed
    #####: 3629:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3630:      printf("\n");
call    0 never executed
        -: 3631:    }
        -: 3632:  }
        -: 3633:}
        -: 3634:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3635:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3636:                                                     int /*iteration*/) {
        1: 3637:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3637-block  0
call    0 returned 1
        2: 3638:  printf("%s from %s ran.",
        1: 3638-block  0
call    0 returned 1
        1: 3638-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3639:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3639-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3639-block  1
call    6 returned 1
    $$$$$: 3639-block  2
call    7 never executed
    $$$$$: 3639-block  3
        2: 3640:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3640-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3640-block  1
call    7 never executed
    $$$$$: 3640-block  2
call    8 never executed
        1: 3641:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3642:    printf(" (%s ms total)",
        1: 3642-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3643:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3643-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3643-block  1
call    4 returned 1
    $$$$$: 3643-block  2
call    5 never executed
    $$$$$: 3643-block  3
    $$$$$: 3643-block  4
call    6 never executed
        -: 3644:  }
        1: 3645:  printf("\n");
        1: 3645-block  0
call    0 returned 1
        1: 3646:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3647:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3647-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3647-block  1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3647-block  2
call   10 returned 1
    $$$$$: 3647-block  3
call   11 never executed
    $$$$$: 3647-block  4
call   12 never executed
        -: 3648:
        1: 3649:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3650:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3651:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3651-block  0
call    0 never executed
    #####: 3652:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3652-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3652-block  1
call    7 never executed
    $$$$$: 3652-block  2
call    8 never executed
    #####: 3653:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3654:  }
        -: 3655:
        1: 3656:  if (!unit_test.Passed()) {
        1: 3656-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3657:    PrintFailedTests(unit_test);
    %%%%%: 3657-block  0
call    0 never executed
    #####: 3658:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3659:  }
        -: 3660:
        1: 3661:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3661-block  0
call    0 returned 1
       1*: 3662:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3662-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3663:    if (unit_test.Passed()) {
    %%%%%: 3663-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3664:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3664-block  0
call    0 never executed
        -: 3665:    }
    #####: 3666:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3666-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3666-block  1
    %%%%%: 3666-block  2
    %%%%%: 3666-block  3
call    2 never executed
        -: 3667:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3668:  }
        -: 3669:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3670:  fflush(stdout);
        1: 3670-block  0
call    0 returned 1
call    1 returned 1
        1: 3671:}
        -: 3672:
        -: 3673:// End PrettyUnitTestResultPrinter
        -: 3674:
        -: 3675:// This class implements the TestEventListener interface.
        -: 3676://
        -: 3677:// Class BriefUnitTestResultPrinter is copyable.
        -: 3678:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3679: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC1Ev called 0 returned 0% blocks executed 0%
    #####: 3680:  BriefUnitTestResultPrinter() = default;
    %%%%%: 3680-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3681:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3682:    printf("%s.%s", test_suite, test);
    %%%%%: 3682-block  0
call    0 never executed
    #####: 3683:  }
        -: 3684:
        -: 3685:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3686:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3687:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3688:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3689:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3690:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3691:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3692:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3693:#else
        -: 3694:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3695:#endif  // OnTestCaseStart
        -: 3696:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3697:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3698:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3699:
        -: 3700:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3701:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3702:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3703:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3704:#else
        -: 3705:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3706:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3707:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3708:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3709:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3710:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3711:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3712:};
        -: 3713:
        -: 3714:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3715:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3716:    const TestPartResult& result) {
    #####: 3717:  switch (result.type()) {
    %%%%%: 3717-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3718:    // If the test part succeeded, we don't need to do anything.
    #####: 3719:    case TestPartResult::kSuccess:
    #####: 3720:      return;
    %%%%%: 3720-block  0
    #####: 3721:    default:
        -: 3722:      // Print failure message from the assertion
        -: 3723:      // (e.g. expected this and got that).
    #####: 3724:      PrintTestPartResult(result);
    %%%%%: 3724-block  0
call    0 never executed
    #####: 3725:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3726:  }
        -: 3727:}
        -: 3728:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3729:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3730:  if (test_info.result()->Failed()) {
    %%%%%: 3730-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3731:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3731-block  0
call    0 never executed
    #####: 3732:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3733:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3734:
    #####: 3735:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3736:      printf(" (%s ms)\n",
    %%%%%: 3736-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3737:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3737-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3737-block  1
call    5 never executed
    $$$$$: 3737-block  2
call    6 never executed
    $$$$$: 3737-block  3
        -: 3738:                 .c_str());
        -: 3739:    } else {
    #####: 3740:      printf("\n");
    %%%%%: 3740-block  0
call    0 never executed
        -: 3741:    }
    #####: 3742:    fflush(stdout);
    %%%%%: 3742-block  0
call    0 never executed
call    1 never executed
        -: 3743:  }
    #####: 3744:}
    %%%%%: 3744-block  0
        -: 3745:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3746:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3747:                                                    int /*iteration*/) {
    #####: 3748:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3748-block  0
call    0 never executed
    #####: 3749:  printf("%s from %s ran.",
    %%%%%: 3749-block  0
call    0 never executed
    %%%%%: 3749-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 3750:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3750-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3750-block  1
call    6 never executed
    $$$$$: 3750-block  2
call    7 never executed
    $$$$$: 3750-block  3
    #####: 3751:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3751-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 3751-block  1
call    7 never executed
    $$$$$: 3751-block  2
call    8 never executed
    #####: 3752:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3753:    printf(" (%s ms total)",
    %%%%%: 3753-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3754:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3754-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3754-block  1
call    4 never executed
    $$$$$: 3754-block  2
call    5 never executed
    $$$$$: 3754-block  3
    $$$$$: 3754-block  4
call    6 never executed
        -: 3755:  }
    #####: 3756:  printf("\n");
    %%%%%: 3756-block  0
call    0 never executed
    #####: 3757:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3758:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3758-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3758-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 3758-block  2
call   10 never executed
    $$$$$: 3758-block  3
call   11 never executed
    $$$$$: 3758-block  4
call   12 never executed
        -: 3759:
    #####: 3760:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3761:  if (skipped_test_count > 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3762:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3762-block  0
call    0 never executed
    #####: 3763:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3763-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3763-block  1
call    7 never executed
    $$$$$: 3763-block  2
call    8 never executed
        -: 3764:  }
        -: 3765:
    #####: 3766:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3766-block  0
call    0 never executed
    #####: 3767:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3767-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3768:    if (unit_test.Passed()) {
    %%%%%: 3768-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3769:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3769-block  0
call    0 never executed
        -: 3770:    }
    #####: 3771:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3771-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3771-block  1
    %%%%%: 3771-block  2
    %%%%%: 3771-block  3
call    2 never executed
        -: 3772:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3773:  }
        -: 3774:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3775:  fflush(stdout);
    %%%%%: 3775-block  0
call    0 never executed
call    1 never executed
    #####: 3776:}
        -: 3777:
        -: 3778:// End BriefUnitTestResultPrinter
        -: 3779:
        -: 3780:// class TestEventRepeater
        -: 3781://
        -: 3782:// This class forwards events to other event listeners.
        -: 3783:class TestEventRepeater : public TestEventListener {
        -: 3784: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3785:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3785-block  0
call    0 returned 1
call    1 returned 1
        -: 3786:  ~TestEventRepeater() override;
        -: 3787:  void Append(TestEventListener* listener);
        -: 3788:  TestEventListener* Release(TestEventListener* listener);
        -: 3789:
        -: 3790:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3791:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3792:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3792-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3793:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3794:
        -: 3795:  void OnTestProgramStart(const UnitTest& parameter) override;
        -: 3796:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3797:  void OnEnvironmentsSetUpStart(const UnitTest& parameter) override;
        -: 3798:  void OnEnvironmentsSetUpEnd(const UnitTest& parameter) override;
        -: 3799://  Legacy API is deprecated but still available
        -: 3800:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3801:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3802:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3803:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3804:  void OnTestStart(const TestInfo& parameter) override;
        -: 3805:  void OnTestDisabled(const TestInfo& parameter) override;
        -: 3806:  void OnTestPartResult(const TestPartResult& parameter) override;
        -: 3807:  void OnTestEnd(const TestInfo& parameter) override;
        -: 3808://  Legacy API is deprecated but still available
        -: 3809:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3810:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3811:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3812:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3813:  void OnEnvironmentsTearDownStart(const UnitTest& parameter) override;
        -: 3814:  void OnEnvironmentsTearDownEnd(const UnitTest& parameter) override;
        -: 3815:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3816:  void OnTestProgramEnd(const UnitTest& parameter) override;
        -: 3817:
        -: 3818: private:
        -: 3819:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3820:  // in death test child processes.
        -: 3821:  bool forwarding_enabled_;
        -: 3822:  // The list of listeners that receive events.
        -: 3823:  std::vector<TestEventListener*> listeners_;
        -: 3824:
        -: 3825:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3826:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3827:};
        -: 3828:
    #####: 3829:TestEventRepeater::~TestEventRepeater() {
    #####: 3830:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3831:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3829:TestEventRepeater::~TestEventRepeater() {
        -: 3830:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3831:}
    %%%%%: 3831-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3829:TestEventRepeater::~TestEventRepeater() {
    #####: 3830:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3830-block  0
call    0 never executed
    #####: 3831:}
call    0 never executed
call    1 never executed
------------------
        -: 3832:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3833:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3834:  listeners_.push_back(listener);
        1: 3834-block  0
call    0 returned 1
        1: 3835:}
        -: 3836:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3837:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3838:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3838-block  0
    %%%%%: 3838-block  1
        1: 3838-block  2
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####: 3839:    if (listeners_[i] == listener) {
    %%%%%: 3839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3840:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3840-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 3840-block  1
    $$$$$: 3840-block  2
    #####: 3841:      return listener;
    %%%%%: 3841-block  0
        -: 3842:    }
        -: 3843:  }
        -: 3844:
        1: 3845:  return nullptr;
        1: 3845-block  0
        -: 3846:}
        -: 3847:
        -: 3848:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3849:// This defines a member that forwards the call to all listeners.
        -: 3850:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3851:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3852:    if (forwarding_enabled_) {                          \
        -: 3853:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3854:        listeners_[i]->Name(parameter);                 \
        -: 3855:      }                                                 \
        -: 3856:    }                                                   \
        -: 3857:  }
        -: 3858:// This defines a member that forwards the call to all listeners in reverse
        -: 3859:// order.
        -: 3860:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3861:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3862:    if (forwarding_enabled_) {                          \
        -: 3863:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3864:        listeners_[i - 1]->Name(parameter);             \
        -: 3865:      }                                                 \
        -: 3866:    }                                                   \
        -: 3867:  }
        -: 3868:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3869:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3869-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3869-block  1
        1: 3869-block  2
call    2 returned 1
call    3 returned 1
        2: 3869-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3870:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3870-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3870-block  1
        1: 3870-block  2
call    2 returned 1
call    3 returned 1
        2: 3870-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3871://  Legacy API is deprecated but still available
        -: 3872:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 4 returned 100% blocks executed 100%
        8: 3873:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        4: 3873-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 3873-block  1
        4: 3873-block  2
call    2 returned 4
call    3 returned 4
        8: 3873-block  3
call    4 returned 8
branch  5 taken 4
branch  6 taken 4 (fallthrough)
        -: 3874:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 4 returned 100% blocks executed 100%
        8: 3875:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        4: 3875-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 3875-block  1
        4: 3875-block  2
call    2 returned 4
call    3 returned 4
        8: 3875-block  3
call    4 returned 8
branch  5 taken 4
branch  6 taken 4 (fallthrough)
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 51 returned 100% blocks executed 100%
      102: 3876:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       51: 3876-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51: 3876-block  1
       51: 3876-block  2
call    2 returned 51
call    3 returned 51
      102: 3876-block  3
call    4 returned 102
branch  5 taken 51
branch  6 taken 51 (fallthrough)
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3877:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3877-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3877-block  1
    %%%%%: 3877-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3877-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3878:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3878-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3878-block  1
    %%%%%: 3878-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3878-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3879:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3879-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3879-block  1
        1: 3879-block  2
call    2 returned 1
call    3 returned 1
        2: 3879-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3880:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3880-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3880-block  1
call    2 returned 1
        1: 3880-block  2
call    3 returned 1
call    4 returned 1
        2: 3880-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3881:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3881-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3881-block  1
call    2 returned 1
        1: 3881-block  2
call    3 returned 1
call    4 returned 1
        2: 3881-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 51 returned 100% blocks executed 100%
      102: 3882:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       51: 3882-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51: 3882-block  1
call    2 returned 51
       51: 3882-block  2
call    3 returned 51
call    4 returned 51
      102: 3882-block  3
branch  5 taken 51
branch  6 taken 51 (fallthrough)
        -: 3883://  Legacy API is deprecated but still available
        -: 3884:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 4 returned 100% blocks executed 100%
        8: 3885:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        4: 3885-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 3885-block  1
call    2 returned 4
        4: 3885-block  2
call    3 returned 4
call    4 returned 4
        8: 3885-block  3
branch  5 taken 4
branch  6 taken 4 (fallthrough)
        -: 3886:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 4 returned 100% blocks executed 100%
        8: 3887:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        4: 3887-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 3887-block  1
call    2 returned 4
        4: 3887-block  2
call    3 returned 4
call    4 returned 4
        8: 3887-block  3
branch  5 taken 4
branch  6 taken 4 (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3888:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3888-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3888-block  1
call    2 returned 1
        1: 3888-block  2
call    3 returned 1
call    4 returned 1
        2: 3888-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3889:
        -: 3890:#undef GTEST_REPEATER_METHOD_
        -: 3891:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3892:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3893:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3894:                                             int iteration) {
        1: 3895:  if (forwarding_enabled_) {
        1: 3895-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3896:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3896-block  0
        2: 3896-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3897:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3897-block  0
call    0 returned 1
call    1 returned 1
        -: 3898:    }
        -: 3899:  }
        1: 3900:}
        -: 3901:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3902:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3903:                                           int iteration) {
        1: 3904:  if (forwarding_enabled_) {
        1: 3904-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3905:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3905-block  0
call    0 returned 1
        2: 3905-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3906:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3906-block  0
call    0 returned 1
call    1 returned 1
        -: 3907:    }
        -: 3908:  }
        1: 3909:}
        -: 3910:
        -: 3911:// End TestEventRepeater
        -: 3912:
        -: 3913:#if GTEST_HAS_FILE_SYSTEM
        -: 3914:// This class generates an XML output file.
        -: 3915:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3916: public:
        -: 3917:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3918:
        -: 3919:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3920:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3921:
        -: 3922:  // Prints an XML summary of all unit tests.
        -: 3923:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3924:                                const std::vector<TestSuite*>& test_suites);
        -: 3925:
        -: 3926: private:
        -: 3927:  // Is c a whitespace character that is normalized to a space character
        -: 3928:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3929:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3930:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3930-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3930-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3930-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3930-block  3
    %%%%%: 3930-block  4
    %%%%%: 3930-block  5
        -: 3931:  }
        -: 3932:
        -: 3933:  // May c appear in a well-formed XML document?
        -: 3934:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3935:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3936:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3936-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3936-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 3936-block  2
    %%%%%: 3936-block  3
    %%%%%: 3936-block  4
        -: 3937:  }
        -: 3938:
        -: 3939:  // Returns an XML-escaped copy of the input string str.  If
        -: 3940:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3941:  // value, and normalizable whitespace is preserved by replacing it
        -: 3942:  // with character references.
        -: 3943:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3944:
        -: 3945:  // Returns the given string with all characters invalid in XML removed.
        -: 3946:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3947:
        -: 3948:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3949:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3950:    return EscapeXml(str, true);
    %%%%%: 3950-block  0
call    0 never executed
        -: 3951:  }
        -: 3952:
        -: 3953:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3954:  static std::string EscapeXmlText(const char* str) {
        -: 3955:    return EscapeXml(str, false);
        -: 3956:  }
        -: 3957:
        -: 3958:  // Verifies that the given attribute belongs to the given element and
        -: 3959:  // streams the attribute as XML.
        -: 3960:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3961:                                 const std::string& element_name,
        -: 3962:                                 const std::string& name,
        -: 3963:                                 const std::string& value);
        -: 3964:
        -: 3965:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3966:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3967:
        -: 3968:  // Streams a test suite XML stanza containing the given test result.
        -: 3969:  //
        -: 3970:  // Requires: result.Failed()
        -: 3971:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3972:                                              const TestResult& result);
        -: 3973:
        -: 3974:  // Streams an XML representation of a TestResult object.
        -: 3975:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3976:                                  const TestResult& result);
        -: 3977:
        -: 3978:  // Streams an XML representation of a TestInfo object.
        -: 3979:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3980:                                const char* test_suite_name,
        -: 3981:                                const TestInfo& test_info);
        -: 3982:
        -: 3983:  // Prints an XML representation of a TestSuite object
        -: 3984:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3985:                                const TestSuite& test_suite);
        -: 3986:
        -: 3987:  // Prints an XML summary of unit_test to output stream out.
        -: 3988:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3989:                               const UnitTest& unit_test);
        -: 3990:
        -: 3991:  // Produces a string representing the test properties in a result as space
        -: 3992:  // delimited XML attributes based on the property key="value" pairs.
        -: 3993:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3994:  // to delimit this attribute from prior attributes.
        -: 3995:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3996:
        -: 3997:  // Streams an XML representation of the test properties of a TestResult
        -: 3998:  // object.
        -: 3999:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 4000:                                      const TestResult& result);
        -: 4001:
        -: 4002:  // The output file.
        -: 4003:  const std::string output_file_;
        -: 4004:
        -: 4005:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 4006:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 4007:};
        -: 4008:
        -: 4009:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4010:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4011:    : output_file_(output_file) {
    %%%%%: 4011-block  0
call    0 never executed
    %%%%%: 4011-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 4011-block  2
    #####: 4012:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4013:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4013-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4013-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4013-block  2
call    7 never executed
    $$$$$: 4013-block  3
call    8 never executed
    $$$$$: 4013-block  4
        -: 4014:  }
    #####: 4015:}
    %%%%%: 4015-block  0
    $$$$$: 4015-block  1
call    0 never executed
    $$$$$: 4015-block  2
call    1 never executed
        -: 4016:
        -: 4017:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4018:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4019:                                                  int /*iteration*/) {
    #####: 4020:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4020-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4021:  std::stringstream stream;
    %%%%%: 4021-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4022:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4022-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4023:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4023-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4023-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4023-block  2
    #####: 4024:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4025:}
    %%%%%: 4025-block  0
call    0 never executed
    $$$$$: 4025-block  1
call    1 never executed
        -: 4026:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4027:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4028:    const std::vector<TestSuite*>& test_suites) {
    #####: 4029:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4029-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4030:  std::stringstream stream;
    %%%%%: 4030-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4031:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4031-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4032:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4032-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4032-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4032-block  2
    #####: 4033:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4034:}
    %%%%%: 4034-block  0
call    0 never executed
    $$$$$: 4034-block  1
call    1 never executed
        -: 4035:
        -: 4036:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4037:// is true, the text is meant to appear as an attribute value, and
        -: 4038:// normalizable whitespace is preserved by replacing it with character
        -: 4039:// references.
        -: 4040://
        -: 4041:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4042:// It is expected that most, if not all, of the text processed by this
        -: 4043:// module will consist of ordinary English text.
        -: 4044:// If this module is ever modified to produce version 1.1 XML output,
        -: 4045:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4046:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4047:                                                bool is_attribute) {
    #####: 4048:  Message m;
    %%%%%: 4048-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4049:
    #####: 4050:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4050-block  0
    %%%%%: 4050-block  1
    %%%%%: 4050-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4051:    const char ch = str[i];
    %%%%%: 4051-block  0
call    0 never executed
    #####: 4052:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4053:      case '<':
    #####: 4054:        m << "&lt;";
    %%%%%: 4054-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4055:        break;
    %%%%%: 4055-block  0
    #####: 4056:      case '>':
    #####: 4057:        m << "&gt;";
    %%%%%: 4057-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4058:        break;
    %%%%%: 4058-block  0
    #####: 4059:      case '&':
    #####: 4060:        m << "&amp;";
    %%%%%: 4060-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4061:        break;
    %%%%%: 4061-block  0
    #####: 4062:      case '\'':
    #####: 4063:        if (is_attribute)
    %%%%%: 4063-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4064:          m << "&apos;";
    %%%%%: 4064-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4065:        else
    #####: 4066:          m << '\'';
    %%%%%: 4066-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4066-block  1
    $$$$$: 4066-block  2
    #####: 4067:        break;
    %%%%%: 4067-block  0
    #####: 4068:      case '"':
    #####: 4069:        if (is_attribute)
    %%%%%: 4069-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4070:          m << "&quot;";
    %%%%%: 4070-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4071:        else
    #####: 4072:          m << '"';
    %%%%%: 4072-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4072-block  1
    $$$$$: 4072-block  2
    #####: 4073:        break;
    %%%%%: 4073-block  0
    #####: 4074:      default:
    #####: 4075:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4075-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4076:          if (is_attribute &&
    %%%%%: 4076-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4076-block  1
    %%%%%: 4076-block  2
    %%%%%: 4076-block  3
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4077:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4077-block  0
call    0 never executed
    #####: 4078:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4078-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4078-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4078-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4078-block  3
call    9 never executed
    $$$$$: 4078-block  4
call   10 never executed
    $$$$$: 4078-block  5
    #####: 4079:              << ";";
    %%%%%: 4079-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4080:          else
    #####: 4081:            m << ch;
    %%%%%: 4081-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4082:        }
    #####: 4083:        break;
    %%%%%: 4083-block  0
        -: 4084:    }
        -: 4085:  }
        -: 4086:
    #####: 4087:  return m.GetString();
    %%%%%: 4087-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4087-block  1
    #####: 4088:}
    %%%%%: 4088-block  0
call    0 never executed
    $$$$$: 4088-block  1
call    1 never executed
        -: 4089:
        -: 4090:// Returns the given string with all characters invalid in XML removed.
        -: 4091:// Currently invalid characters are dropped from the string. An
        -: 4092:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4093:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4094:    const std::string& str) {
    #####: 4095:  std::string output;
    %%%%%: 4095-block  0
call    0 never executed
    #####: 4096:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 4097:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4097-block  0
call    0 never executed
    %%%%%: 4097-block  1
call    1 never executed
    %%%%%: 4097-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4098:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4098-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4099:      output.push_back(*it);
    %%%%%: 4099-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4100:
    #####: 4101:  return output;
    %%%%%: 4101-block  0
    %%%%%: 4101-block  1
    =====: 4102:}
    $$$$$: 4102-block  0
call    0 never executed
        -: 4103:
        -: 4104:// The following routines generate an XML representation of a UnitTest
        -: 4105:// object.
        -: 4106://
        -: 4107:// This is how Google Test concepts map to the DTD:
        -: 4108://
        -: 4109:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4110://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4111://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4112://       <failure message="...">...</failure>
        -: 4113://       <failure message="...">...</failure>
        -: 4114://       <failure message="...">...</failure>
        -: 4115://                                     <-- individual assertion failures
        -: 4116://     </testcase>
        -: 4117://   </testsuite>
        -: 4118:// </testsuites>
        -: 4119:
        -: 4120:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4121:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4122:  ::std::stringstream ss;
    %%%%%: 4122-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4123:  // For the exact N seconds, makes sure output has a trailing decimal point.
        -: 4124:  // Sets precision so that we won't have many trailing zeros (e.g., 300 ms
        -: 4125:  // will be just 0.3, 410 ms 0.41, and so on)
    #####: 4126:  ss << std::fixed
    %%%%%: 4126-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4127:     << std::setprecision(
    #####: 4128:            ms % 1000 == 0 ? 0 : (ms % 100 == 0 ? 1 : (ms % 10 == 0 ? 2 : 3)))
    %%%%%: 4128-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4128-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4128-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 4128-block  3
    %%%%%: 4128-block  4
    %%%%%: 4128-block  5
    %%%%%: 4128-block  6
    %%%%%: 4128-block  7
    %%%%%: 4128-block  8
    %%%%%: 4128-block  9
call    6 never executed
call    7 never executed
    #####: 4129:     << std::showpoint;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4130:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4131:  return ss.str();
    %%%%%: 4131-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4131-block  1
    #####: 4132:}
    %%%%%: 4132-block  0
call    0 never executed
    $$$$$: 4132-block  1
call    1 never executed
        -: 4133:
function _ZN7testing8internalL17PortableLocaltimeExP2tm called 0 returned 0% blocks executed 0%
    #####: 4134:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4135:#if defined(_MSC_VER)
        -: 4136:  return localtime_s(out, &seconds) == 0;
        -: 4137:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4138:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4139:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 4140:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    %%%%%: 4140-block  0
call    0 never executed
    #####: 4141:  if (tm_ptr == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4141-block  0
    #####: 4142:  *out = *tm_ptr;
    #####: 4143:  return true;
    %%%%%: 4143-block  0
        -: 4144:#elif defined(__STDC_LIB_EXT1__)
        -: 4145:  // Uses localtime_s when available as localtime_r is only available from
        -: 4146:  // C23 standard.
        -: 4147:  return localtime_s(&seconds, out) != nullptr;
        -: 4148:#else
        -: 4149:  return localtime_r(&seconds, out) != nullptr;
        -: 4150:#endif
        -: 4151:}
        -: 4152:
        -: 4153:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4154:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4155:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4156:  struct tm time_struct;
    #####: 4157:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4157-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4157-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4158:    return "";
    %%%%%: 4158-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4158-block  1
        -: 4159:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4160:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4160-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4160-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4160-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4160-block  3
call   12 never executed
    $$$$$: 4160-block  4
call   13 never executed
    $$$$$: 4160-block  5
call   14 never executed
    $$$$$: 4160-block  6
    $$$$$: 4160-block  7
    $$$$$: 4160-block  8
    $$$$$: 4160-block  9
    #####: 4161:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4161-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4161-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4161-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4161-block  3
call   12 never executed
    $$$$$: 4161-block  4
call   13 never executed
    $$$$$: 4161-block  5
call   14 never executed
    $$$$$: 4161-block  6
    $$$$$: 4161-block  7
    $$$$$: 4161-block  8
    #####: 4162:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4162-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4162-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4162-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4162-block  3
call   12 never executed
    $$$$$: 4162-block  4
call   13 never executed
    $$$$$: 4162-block  5
call   14 never executed
    $$$$$: 4162-block  6
    $$$$$: 4162-block  7
    $$$$$: 4162-block  8
    #####: 4163:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4163-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4163-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4163-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4163-block  3
call   12 never executed
    $$$$$: 4163-block  4
call   13 never executed
    $$$$$: 4163-block  5
call   14 never executed
    $$$$$: 4163-block  6
    $$$$$: 4163-block  7
    $$$$$: 4163-block  8
    #####: 4164:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4164-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4164-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4164-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4164-block  3
call   12 never executed
    $$$$$: 4164-block  4
call   13 never executed
    $$$$$: 4164-block  5
call   14 never executed
    $$$$$: 4164-block  6
    $$$$$: 4164-block  7
    $$$$$: 4164-block  8
    #####: 4165:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4165-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4165-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4165-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4165-block  3
call    8 never executed
    $$$$$: 4165-block  4
call    9 never executed
    $$$$$: 4165-block  5
    $$$$$: 4165-block  6
    #####: 4166:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4166-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4166-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4166-block  2
call    7 never executed
    $$$$$: 4166-block  3
        -: 4167:}
        -: 4168:
        -: 4169:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4170:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4171:                                                     const char* data) {
    #####: 4172:  const char* segment = data;
    #####: 4173:  *stream << "<![CDATA[";
    %%%%%: 4173-block  0
call    0 never executed
        -: 4174:  for (;;) {
    #####: 4175:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4176:    if (next_segment != nullptr) {
    %%%%%: 4176-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4177:      stream->write(segment,
    #####: 4178:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4178-block  0
call    0 never executed
    #####: 4179:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4180:      segment = next_segment + strlen("]]>");
        -: 4181:    } else {
    #####: 4182:      *stream << segment;
    %%%%%: 4182-block  0
call    0 never executed
    #####: 4183:      break;
        -: 4184:    }
    #####: 4185:  }
    %%%%%: 4185-block  0
    #####: 4186:  *stream << "]]>";
    %%%%%: 4186-block  0
call    0 never executed
    #####: 4187:}
        -: 4188:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4189:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4190:    std::ostream* stream, const std::string& element_name,
        -: 4191:    const std::string& name, const std::string& value) {
        -: 4192:  const std::vector<std::string>& allowed_names =
    #####: 4193:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4193-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4194:
    #####: 4195:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4195-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4195-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4195-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4195-block  3
call   13 never executed
    %%%%%: 4195-block  4
call   14 never executed
    $$$$$: 4195-block  5
    $$$$$: 4195-block  6
    $$$$$: 4195-block  7
call   15 never executed
    $$$$$: 4195-block  8
        -: 4196:               allowed_names.end())
        -: 4197:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4198:      << ">.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4198-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4198-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4198-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4198-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4198-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4199:
    #####: 4200:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4200-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4200-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4200-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4200-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4200-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4200-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4200-block  6
call   18 never executed
    $$$$$: 4200-block  7
call   19 never executed
    $$$$$: 4200-block  8
    #####: 4201:}
call    0 never executed
    $$$$$: 4201-block  0
call    1 never executed
        -: 4202:
        -: 4203:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4204:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4205:    ::std::ostream* stream, const TestResult& result) {
        -: 4206:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4207:  *stream << "  <testsuite";
    %%%%%: 4207-block  0
call    0 never executed
    #####: 4208:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
    %%%%%: 4208-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4208-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4208-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4208-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4208-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4208-block  5
call   15 never executed
    $$$$$: 4208-block  6
    $$$$$: 4208-block  7
    $$$$$: 4208-block  8
call   16 never executed
    $$$$$: 4208-block  9
    $$$$$: 4208-block 10
    $$$$$: 4208-block 11
call   17 never executed
    $$$$$: 4208-block 12
    $$$$$: 4208-block 13
call   18 never executed
    #####: 4209:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
    %%%%%: 4209-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4209-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4209-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4209-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4209-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4209-block  5
call   15 never executed
    $$$$$: 4209-block  6
    $$$$$: 4209-block  7
    $$$$$: 4209-block  8
call   16 never executed
    $$$$$: 4209-block  9
    $$$$$: 4209-block 10
    $$$$$: 4209-block 11
call   17 never executed
    $$$$$: 4209-block 12
    $$$$$: 4209-block 13
call   18 never executed
    #####: 4210:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
    %%%%%: 4210-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4210-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4210-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4210-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4210-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4210-block  5
call   15 never executed
    $$$$$: 4210-block  6
    $$$$$: 4210-block  7
    $$$$$: 4210-block  8
call   16 never executed
    $$$$$: 4210-block  9
    $$$$$: 4210-block 10
    $$$$$: 4210-block 11
call   17 never executed
    $$$$$: 4210-block 12
    $$$$$: 4210-block 13
call   18 never executed
    #####: 4211:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
    %%%%%: 4211-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4211-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4211-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4211-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4211-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4211-block  5
call   15 never executed
    $$$$$: 4211-block  6
    $$$$$: 4211-block  7
    $$$$$: 4211-block  8
call   16 never executed
    $$$$$: 4211-block  9
    $$$$$: 4211-block 10
    $$$$$: 4211-block 11
call   17 never executed
    $$$$$: 4211-block 12
    $$$$$: 4211-block 13
call   18 never executed
    #####: 4212:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
    %%%%%: 4212-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4212-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4212-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4212-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4212-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4212-block  5
call   15 never executed
    $$$$$: 4212-block  6
    $$$$$: 4212-block  7
    $$$$$: 4212-block  8
call   16 never executed
    $$$$$: 4212-block  9
    $$$$$: 4212-block 10
    $$$$$: 4212-block 11
call   17 never executed
    $$$$$: 4212-block 12
    $$$$$: 4212-block 13
call   18 never executed
    #####: 4213:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
    %%%%%: 4213-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4213-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4213-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4213-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4213-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4213-block  5
call   15 never executed
    $$$$$: 4213-block  6
    $$$$$: 4213-block  7
    $$$$$: 4213-block  8
call   16 never executed
    $$$$$: 4213-block  9
    $$$$$: 4213-block 10
    $$$$$: 4213-block 11
call   17 never executed
    $$$$$: 4213-block 12
    $$$$$: 4213-block 13
call   18 never executed
    #####: 4214:  OutputXmlAttribute(stream, "testsuite", "time",
    %%%%%: 4214-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4214-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4214-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4214-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4214-block  4
call   11 never executed
    $$$$$: 4214-block  5
    $$$$$: 4214-block  6
    $$$$$: 4214-block  7
call   12 never executed
    $$$$$: 4214-block  8
    $$$$$: 4214-block  9
    #####: 4215:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4215-block  0
call    5 never executed
    $$$$$: 4215-block  1
call    6 never executed
    #####: 4216:  OutputXmlAttribute(
    %%%%%: 4216-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4216-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4216-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4216-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4216-block  4
call   11 never executed
    $$$$$: 4216-block  5
    $$$$$: 4216-block  6
    $$$$$: 4216-block  7
call   12 never executed
    $$$$$: 4216-block  8
    $$$$$: 4216-block  9
        -: 4217:      stream, "testsuite", "timestamp",
    #####: 4218:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4218-block  0
call    5 never executed
    $$$$$: 4218-block  1
call    6 never executed
    #####: 4219:  *stream << ">";
call    0 never executed
        -: 4220:
        -: 4221:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4222:  *stream << "    <testcase";
call    0 never executed
    #####: 4223:  OutputXmlAttribute(stream, "testcase", "name", "");
    %%%%%: 4223-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4223-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4223-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4223-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4223-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4223-block  5
call   15 never executed
    $$$$$: 4223-block  6
    $$$$$: 4223-block  7
    $$$$$: 4223-block  8
call   16 never executed
    $$$$$: 4223-block  9
    $$$$$: 4223-block 10
    $$$$$: 4223-block 11
call   17 never executed
    $$$$$: 4223-block 12
    $$$$$: 4223-block 13
call   18 never executed
    #####: 4224:  OutputXmlAttribute(stream, "testcase", "status", "run");
    %%%%%: 4224-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4224-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4224-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4224-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4224-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4224-block  5
call   15 never executed
    $$$$$: 4224-block  6
    $$$$$: 4224-block  7
    $$$$$: 4224-block  8
call   16 never executed
    $$$$$: 4224-block  9
    $$$$$: 4224-block 10
    $$$$$: 4224-block 11
call   17 never executed
    $$$$$: 4224-block 12
    $$$$$: 4224-block 13
call   18 never executed
    #####: 4225:  OutputXmlAttribute(stream, "testcase", "result", "completed");
    %%%%%: 4225-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4225-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4225-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4225-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4225-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4225-block  5
call   15 never executed
    $$$$$: 4225-block  6
    $$$$$: 4225-block  7
    $$$$$: 4225-block  8
call   16 never executed
    $$$$$: 4225-block  9
    $$$$$: 4225-block 10
    $$$$$: 4225-block 11
call   17 never executed
    $$$$$: 4225-block 12
    $$$$$: 4225-block 13
call   18 never executed
    #####: 4226:  OutputXmlAttribute(stream, "testcase", "classname", "");
    %%%%%: 4226-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4226-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4226-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4226-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4226-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4226-block  5
call   15 never executed
    $$$$$: 4226-block  6
    $$$$$: 4226-block  7
    $$$$$: 4226-block  8
call   16 never executed
    $$$$$: 4226-block  9
    $$$$$: 4226-block 10
    $$$$$: 4226-block 11
call   17 never executed
    $$$$$: 4226-block 12
    $$$$$: 4226-block 13
call   18 never executed
    #####: 4227:  OutputXmlAttribute(stream, "testcase", "time",
    %%%%%: 4227-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4227-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4227-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4227-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4227-block  4
call   11 never executed
    $$$$$: 4227-block  5
    $$$$$: 4227-block  6
    $$$$$: 4227-block  7
call   12 never executed
    $$$$$: 4227-block  8
    $$$$$: 4227-block  9
    #####: 4228:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4228-block  0
call    5 never executed
    $$$$$: 4228-block  1
call    6 never executed
    #####: 4229:  OutputXmlAttribute(
    %%%%%: 4229-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4229-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4229-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4229-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4229-block  4
call   11 never executed
    $$$$$: 4229-block  5
    $$$$$: 4229-block  6
    $$$$$: 4229-block  7
call   12 never executed
    $$$$$: 4229-block  8
    $$$$$: 4229-block  9
        -: 4230:      stream, "testcase", "timestamp",
    #####: 4231:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4231-block  0
call    5 never executed
        -: 4232:
        -: 4233:  // Output the actual test result.
    #####: 4234:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4235:
        -: 4236:  // Complete the test suite.
    #####: 4237:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4238:}
        -: 4239:
        -: 4240:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4241:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4242:                                                 const char* test_suite_name,
        -: 4243:                                                 const TestInfo& test_info) {
    #####: 4244:  const TestResult& result = *test_info.result();
    %%%%%: 4244-block  0
call    0 never executed
    #####: 4245:  const std::string kTestsuite = "testcase";
    %%%%%: 4245-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4245-block  1
        -: 4246:
    #####: 4247:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4248:    return;
    %%%%%: 4248-block  0
        -: 4249:  }
        -: 4250:
    #####: 4251:  *stream << "    <testcase";
    %%%%%: 4251-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4252:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4252-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4252-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4252-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4252-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4252-block  4
call   12 never executed
    $$$$$: 4252-block  5
    $$$$$: 4252-block  6
    $$$$$: 4252-block  7
call   13 never executed
    $$$$$: 4252-block  8
    $$$$$: 4252-block  9
        -: 4253:
    #####: 4254:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4255:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4255-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4255-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4255-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4255-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4255-block  4
call   12 never executed
    $$$$$: 4255-block  5
    $$$$$: 4255-block  6
    $$$$$: 4255-block  7
call   13 never executed
    $$$$$: 4255-block  8
    $$$$$: 4255-block  9
        -: 4256:                       test_info.value_param());
        -: 4257:  }
    #####: 4258:  if (test_info.type_param() != nullptr) {
    %%%%%: 4258-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4259:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4259-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4259-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4259-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4259-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4259-block  4
call   12 never executed
    $$$$$: 4259-block  5
    $$$$$: 4259-block  6
    $$$$$: 4259-block  7
call   13 never executed
    $$$$$: 4259-block  8
    $$$$$: 4259-block  9
        -: 4260:                       test_info.type_param());
        -: 4261:  }
        -: 4262:
    #####: 4263:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4263-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4263-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4263-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4263-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4263-block  4
call   12 never executed
    $$$$$: 4263-block  5
    $$$$$: 4263-block  6
    $$$$$: 4263-block  7
call   13 never executed
    $$$$$: 4263-block  8
    $$$$$: 4263-block  9
    #####: 4264:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4264-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4264-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4264-block  2
call    6 never executed
    $$$$$: 4264-block  3
call    7 never executed
    $$$$$: 4264-block  4
    $$$$$: 4264-block  5
    #####: 4265:                     StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4265-block  0
call    5 never executed
    $$$$$: 4265-block  1
    $$$$$: 4265-block  2
    #####: 4266:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4267:    *stream << " />\n";
    %%%%%: 4267-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4268:    return;
    %%%%%: 4268-block  0
        -: 4269:  }
        -: 4270:
    #####: 4271:  OutputXmlAttribute(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4271-block  0
    %%%%%: 4271-block  1
    %%%%%: 4271-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4271-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4271-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4271-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4271-block  6
call   13 never executed
    $$$$$: 4271-block  7
    $$$$$: 4271-block  8
    $$$$$: 4271-block  9
call   14 never executed
    $$$$$: 4271-block 10
    $$$$$: 4271-block 11
    #####: 4272:                     test_info.should_run() ? "run" : "notrun");
    %%%%%: 4272-block  0
call    0 never executed
    #####: 4273:  OutputXmlAttribute(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4273-block  0
    %%%%%: 4273-block  1
    %%%%%: 4273-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4273-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4273-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4273-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4273-block  6
call   13 never executed
    $$$$$: 4273-block  7
    $$$$$: 4273-block  8
    $$$$$: 4273-block  9
call   14 never executed
    $$$$$: 4273-block 10
    $$$$$: 4273-block 11
    #####: 4274:                     test_info.should_run()
    %%%%%: 4274-block  0
call    0 never executed
    #####: 4275:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4275-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4275-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4275-block  2
    %%%%%: 4275-block  3
        -: 4276:                         : "suppressed");
    #####: 4277:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4277-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4277-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4277-block  2
call    6 never executed
    $$$$$: 4277-block  3
call    7 never executed
    $$$$$: 4277-block  4
    $$$$$: 4277-block  5
    #####: 4278:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4278-block  0
call    5 never executed
    $$$$$: 4278-block  1
    #####: 4279:  OutputXmlAttribute(
    %%%%%: 4279-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4279-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4279-block  2
call    6 never executed
    $$$$$: 4279-block  3
call    7 never executed
    $$$$$: 4279-block  4
    $$$$$: 4279-block  5
        -: 4280:      stream, kTestsuite, "timestamp",
    #####: 4281:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4281-block  0
call    5 never executed
    $$$$$: 4281-block  1
    #####: 4282:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
    %%%%%: 4282-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4282-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4282-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4282-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4282-block  4
call   11 never executed
    $$$$$: 4282-block  5
    $$$$$: 4282-block  6
    $$$$$: 4282-block  7
call   12 never executed
    $$$$$: 4282-block  8
    $$$$$: 4282-block  9
        -: 4283:
    #####: 4284:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4285:}
    %%%%%: 4285-block  0
    %%%%%: 4285-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 4285-block  2
call    3 never executed
        -: 4286:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4287:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4288:                                                   const TestResult& result) {
    #####: 4289:  int failures = 0;
    #####: 4290:  int skips = 0;
    #####: 4291:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4291-block  0
    %%%%%: 4291-block  1
    %%%%%: 4291-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4292:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4292-block  0
call    0 never executed
    #####: 4293:    if (part.failed()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4294:      if (++failures == 1 && skips == 0) {
    %%%%%: 4294-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4294-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4294-block  2
    %%%%%: 4294-block  3
    %%%%%: 4294-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4295:        *stream << ">\n";
    %%%%%: 4295-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4296:      }
        -: 4297:      const std::string location =
        -: 4298:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4299:                                                          part.line_number());
    %%%%%: 4299-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4300:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4300-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4300-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4300-block  2
call    7 never executed
    $$$$$: 4300-block  3
call    8 never executed
    $$$$$: 4300-block  4
    #####: 4301:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4301-block  0
call    0 never executed
    $$$$$: 4301-block  1
call    1 never executed
    $$$$$: 4301-block  2
    #####: 4302:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4302-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4302-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4302-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4303:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4303-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4303-block  1
call    7 never executed
    $$$$$: 4303-block  2
call    8 never executed
    $$$$$: 4303-block  3
    #####: 4304:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4304-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4304-block  1
call    7 never executed
    $$$$$: 4304-block  2
call    8 never executed
    $$$$$: 4304-block  3
    #####: 4305:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4306:    } else if (part.skipped()) {
    %%%%%: 4306-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4306-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4306-block  2
call    6 never executed
    $$$$$: 4306-block  3
call    7 never executed
    $$$$$: 4306-block  4
call    8 never executed
    #####: 4307:      if (++skips == 1 && failures == 0) {
    %%%%%: 4307-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4307-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4307-block  2
    %%%%%: 4307-block  3
    %%%%%: 4307-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4308:        *stream << ">\n";
    %%%%%: 4308-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4309:      }
        -: 4310:      const std::string location =
        -: 4311:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4312:                                                          part.line_number());
    %%%%%: 4312-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4313:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4313-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4313-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4313-block  2
call    7 never executed
    $$$$$: 4313-block  3
call    8 never executed
    $$$$$: 4313-block  4
        -: 4314:      *stream << "      <skipped message=\""
    #####: 4315:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4315-block  0
    %%%%%: 4315-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4315-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4315-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4315-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4315-block  5
call   16 never executed
call   17 never executed
    $$$$$: 4315-block  6
call   18 never executed
    $$$$$: 4315-block  7
call   19 never executed
    $$$$$: 4315-block  8
    $$$$$: 4315-block  9
    $$$$$: 4315-block 10
    #####: 4316:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4316-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4316-block  1
call    7 never executed
    $$$$$: 4316-block  2
call    8 never executed
    $$$$$: 4316-block  3
    #####: 4317:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4317-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4317-block  1
call    7 never executed
    $$$$$: 4317-block  2
call    8 never executed
    $$$$$: 4317-block  3
    #####: 4318:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4319:    }
    %%%%%: 4319-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4319-block  1
call    3 never executed
    $$$$$: 4319-block  2
call    4 never executed
    $$$$$: 4319-block  3
call    5 never executed
        -: 4320:  }
        -: 4321:
    #####: 4322:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4322-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4322-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4322-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 4322-block  3
    %%%%%: 4322-block  4
    %%%%%: 4322-block  5
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 4323:    *stream << " />\n";
    %%%%%: 4323-block  0
call    0 never executed
        -: 4324:  } else {
    #####: 4325:    if (failures == 0 && skips == 0) {
    %%%%%: 4325-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4325-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4326:      *stream << ">\n";
    %%%%%: 4326-block  0
call    0 never executed
        -: 4327:    }
    #####: 4328:    OutputXmlTestProperties(stream, result);
    %%%%%: 4328-block  0
call    0 never executed
    #####: 4329:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4330:  }
    #####: 4331:}
    %%%%%: 4331-block  0
        -: 4332:
        -: 4333:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4334:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
    %%%%%: 4334-block  0
        -: 4335:                                                 const TestSuite& test_suite) {
    #####: 4336:  const std::string kTestsuite = "testsuite";
    %%%%%: 4336-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4336-block  1
    #####: 4337:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4337-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4338:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4338-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4338-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4338-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4338-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4338-block  4
call   12 never executed
    $$$$$: 4338-block  5
    $$$$$: 4338-block  6
    $$$$$: 4338-block  7
call   13 never executed
    $$$$$: 4338-block  8
    $$$$$: 4338-block  9
    #####: 4339:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4339-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4339-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4339-block  2
call    6 never executed
    $$$$$: 4339-block  3
call    7 never executed
    $$$$$: 4339-block  4
    $$$$$: 4339-block  5
    #####: 4340:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4340-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4340-block  1
call    7 never executed
    $$$$$: 4340-block  2
    $$$$$: 4340-block  3
    #####: 4341:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4342:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4342-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4342-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4342-block  2
call    6 never executed
    $$$$$: 4342-block  3
call    7 never executed
    $$$$$: 4342-block  4
    $$$$$: 4342-block  5
    #####: 4343:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4343-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4343-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4343-block  2
call    7 never executed
    $$$$$: 4343-block  3
    $$$$$: 4343-block  4
    #####: 4344:    OutputXmlAttribute(
    %%%%%: 4344-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4344-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4344-block  2
call    6 never executed
    $$$$$: 4344-block  3
call    7 never executed
    $$$$$: 4344-block  4
    $$$$$: 4344-block  5
        -: 4345:        stream, kTestsuite, "disabled",
    #####: 4346:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4346-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4346-block  1
call    7 never executed
    $$$$$: 4346-block  2
    $$$$$: 4346-block  3
    #####: 4347:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4347-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4347-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4347-block  2
call    6 never executed
    $$$$$: 4347-block  3
call    7 never executed
    $$$$$: 4347-block  4
    $$$$$: 4347-block  5
    #####: 4348:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4348-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4348-block  1
call    7 never executed
    $$$$$: 4348-block  2
    $$$$$: 4348-block  3
        -: 4349:
    #####: 4350:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
    %%%%%: 4350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4350-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4350-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4350-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4350-block  4
call   11 never executed
    $$$$$: 4350-block  5
    $$$$$: 4350-block  6
    $$$$$: 4350-block  7
call   12 never executed
    $$$$$: 4350-block  8
    $$$$$: 4350-block  9
        -: 4351:
    #####: 4352:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4352-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4352-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4352-block  2
call    6 never executed
    $$$$$: 4352-block  3
call    7 never executed
    $$$$$: 4352-block  4
    $$$$$: 4352-block  5
    #####: 4353:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4353-block  0
call    5 never executed
    $$$$$: 4353-block  1
    #####: 4354:    OutputXmlAttribute(
    %%%%%: 4354-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4354-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4354-block  2
call    6 never executed
    $$$$$: 4354-block  3
call    7 never executed
    $$$$$: 4354-block  4
    $$$$$: 4354-block  5
        -: 4355:        stream, kTestsuite, "timestamp",
    #####: 4356:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4356-block  0
call    5 never executed
    $$$$$: 4356-block  1
    #####: 4357:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4357-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4357-block  1
call    7 never executed
    $$$$$: 4357-block  2
call    8 never executed
    $$$$$: 4357-block  3
        -: 4358:  }
    #####: 4359:  *stream << ">\n";
    %%%%%: 4359-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4360:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4360-block  0
    %%%%%: 4360-block  1
    %%%%%: 4360-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4361:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4361-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4361-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4362:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4362-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4362-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4363:  }
    #####: 4364:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4364-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4364-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4364-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4365:}
    %%%%%: 4365-block  0
call    0 never executed
    $$$$$: 4365-block  1
call    1 never executed
        -: 4366:
        -: 4367:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4368:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
    %%%%%: 4368-block  0
        -: 4369:                                                const UnitTest& unit_test) {
    #####: 4370:  const std::string kTestsuites = "testsuites";
    %%%%%: 4370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4370-block  1
        -: 4371:
    #####: 4372:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4373:  *stream << "<" << kTestsuites;
    %%%%%: 4373-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4373-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4374:
    #####: 4375:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4375-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4375-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4375-block  2
call    6 never executed
    $$$$$: 4375-block  3
call    7 never executed
    $$$$$: 4375-block  4
    $$$$$: 4375-block  5
    #####: 4376:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4376-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4376-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4376-block  2
call    7 never executed
    $$$$$: 4376-block  3
    $$$$$: 4376-block  4
    #####: 4377:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4377-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4377-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4377-block  2
call    6 never executed
    $$$$$: 4377-block  3
call    7 never executed
    $$$$$: 4377-block  4
    $$$$$: 4377-block  5
    #####: 4378:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4378-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4378-block  1
call    7 never executed
    $$$$$: 4378-block  2
    $$$$$: 4378-block  3
    #####: 4379:  OutputXmlAttribute(
    %%%%%: 4379-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4379-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4379-block  2
call    6 never executed
    $$$$$: 4379-block  3
call    7 never executed
    $$$$$: 4379-block  4
    $$$$$: 4379-block  5
        -: 4380:      stream, kTestsuites, "disabled",
    #####: 4381:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4381-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4381-block  1
call    7 never executed
    $$$$$: 4381-block  2
    $$$$$: 4381-block  3
    #####: 4382:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
    %%%%%: 4382-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4382-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4382-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4382-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4382-block  4
call   11 never executed
    $$$$$: 4382-block  5
    $$$$$: 4382-block  6
    $$$$$: 4382-block  7
call   12 never executed
    $$$$$: 4382-block  8
    $$$$$: 4382-block  9
    #####: 4383:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4383-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4383-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4383-block  2
call    6 never executed
    $$$$$: 4383-block  3
call    7 never executed
    $$$$$: 4383-block  4
    $$$$$: 4383-block  5
    #####: 4384:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4384-block  0
call    5 never executed
    $$$$$: 4384-block  1
    #####: 4385:  OutputXmlAttribute(
    %%%%%: 4385-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4385-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4385-block  2
call    6 never executed
    $$$$$: 4385-block  3
call    7 never executed
    $$$$$: 4385-block  4
    $$$$$: 4385-block  5
        -: 4386:      stream, kTestsuites, "timestamp",
    #####: 4387:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4387-block  0
call    5 never executed
    $$$$$: 4387-block  1
        -: 4388:
    #####: 4389:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4390:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4390-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4390-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4390-block  2
call    6 never executed
    $$$$$: 4390-block  3
call    7 never executed
    $$$$$: 4390-block  4
    $$$$$: 4390-block  5
    #####: 4391:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4391-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4391-block  1
call    5 never executed
    $$$$$: 4391-block  2
    $$$$$: 4391-block  3
        -: 4392:  }
    #####: 4393:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4393-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4393-block  2
call    7 never executed
    $$$$$: 4393-block  3
call    8 never executed
    $$$$$: 4393-block  4
        -: 4394:
    #####: 4395:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4395-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4395-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4395-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4395-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4395-block  4
call   11 never executed
    $$$$$: 4395-block  5
    $$$$$: 4395-block  6
    $$$$$: 4395-block  7
call   12 never executed
    $$$$$: 4395-block  8
    $$$$$: 4395-block  9
    #####: 4396:  *stream << ">\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4397:
    #####: 4398:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4398-block  0
    %%%%%: 4398-block  1
    %%%%%: 4398-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4399:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4399-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4399-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4399-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4400:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4400-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4400-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4401:  }
        -: 4402:
        -: 4403:  // If there was a test failure outside of one of the test suites (like in a
        -: 4404:  // test environment) include that in the output.
    #####: 4405:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4405-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4405-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4406:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4406-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4407:  }
        -: 4408:
    #####: 4409:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4409-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4409-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4409-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4410:}
    %%%%%: 4410-block  0
call    0 never executed
    $$$$$: 4410-block  1
call    1 never executed
        -: 4411:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4412:void XmlUnitTestResultPrinter::PrintXmlTestsList(
    %%%%%: 4412-block  0
        -: 4413:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4414:  const std::string kTestsuites = "testsuites";
    %%%%%: 4414-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4414-block  1
        -: 4415:
    #####: 4416:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4417:  *stream << "<" << kTestsuites;
    %%%%%: 4417-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4417-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4418:
    #####: 4419:  int total_tests = 0;
    #####: 4420:  for (auto test_suite : test_suites) {
    %%%%%: 4420-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4420-block  1
call    2 never executed
    %%%%%: 4420-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4421:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4422:  }
    #####: 4423:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4423-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4423-block  2
call    6 never executed
    $$$$$: 4423-block  3
call    7 never executed
    $$$$$: 4423-block  4
    $$$$$: 4423-block  5
    #####: 4424:                     StreamableToString(total_tests));
    %%%%%: 4424-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4424-block  1
call    4 never executed
    $$$$$: 4424-block  2
    #####: 4425:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4425-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4425-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4425-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4425-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4425-block  4
call   11 never executed
    $$$$$: 4425-block  5
    $$$$$: 4425-block  6
    $$$$$: 4425-block  7
call   12 never executed
    $$$$$: 4425-block  8
    $$$$$: 4425-block  9
    #####: 4426:  *stream << ">\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4427:
    #####: 4428:  for (auto test_suite : test_suites) {
    %%%%%: 4428-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4428-block  1
call    2 never executed
    %%%%%: 4428-block  2
call    3 never executed
    %%%%%: 4428-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 4429:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4430:  }
    #####: 4431:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4431-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4431-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4431-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4432:}
    %%%%%: 4432-block  0
call    0 never executed
    $$$$$: 4432-block  1
call    1 never executed
        -: 4433:
        -: 4434:// Produces a string representing the test properties in a result as space
        -: 4435:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4436:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4437:    const TestResult& result) {
    #####: 4438:  Message attributes;
    %%%%%: 4438-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4439:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4439-block  0
    %%%%%: 4439-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4440:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4440-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4441:    attributes << " " << property.key() << "=" << "\""
    %%%%%: 4441-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4441-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4441-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4441-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4441-block  4
    $$$$$: 4441-block  5
    #####: 4442:               << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4442-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4442-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4442-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4442-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4442-block  4
call   13 never executed
call   14 never executed
    $$$$$: 4442-block  5
call   15 never executed
    $$$$$: 4442-block  6
call   16 never executed
    $$$$$: 4442-block  7
    $$$$$: 4442-block  8
    $$$$$: 4442-block  9
        -: 4443:  }
    #####: 4444:  return attributes.GetString();
    %%%%%: 4444-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4444-block  1
    #####: 4445:}
    %%%%%: 4445-block  0
call    0 never executed
    $$$$$: 4445-block  1
call    1 never executed
        -: 4446:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4447:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
    %%%%%: 4447-block  0
        -: 4448:    std::ostream* stream, const TestResult& result) {
    #####: 4449:  const std::string kProperties = "properties";
    %%%%%: 4449-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4449-block  1
    #####: 4450:  const std::string kProperty = "property";
    %%%%%: 4450-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4450-block  1
        -: 4451:
    #####: 4452:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4453:    return;
    %%%%%: 4453-block  0
        -: 4454:  }
        -: 4455:
    #####: 4456:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4456-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4456-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4456-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4457:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4457-block  0
    %%%%%: 4457-block  1
    %%%%%: 4457-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4458:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4458-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4459:    *stream << "        <" << kProperty;
    %%%%%: 4459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4459-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4460:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4460-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4460-block  1
    %%%%%: 4460-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4460-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4460-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4460-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4460-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4460-block  7
call   18 never executed
    $$$$$: 4460-block  8
call   19 never executed
    $$$$$: 4460-block  9
    $$$$$: 4460-block 10
    $$$$$: 4460-block 11
    #####: 4461:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4461-block  0
    %%%%%: 4461-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4461-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4461-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4461-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4461-block  5
call   16 never executed
call   17 never executed
    $$$$$: 4461-block  6
call   18 never executed
    $$$$$: 4461-block  7
call   19 never executed
    $$$$$: 4461-block  8
    $$$$$: 4461-block  9
    $$$$$: 4461-block 10
    #####: 4462:    *stream << "/>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4463:  }
    #####: 4464:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4464-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4464-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4465:}
    %%%%%: 4465-block  0
    %%%%%: 4465-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4465-block  2
    %%%%%: 4465-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4465-block  4
call    6 never executed
    $$$$$: 4465-block  5
call    7 never executed
        -: 4466:
        -: 4467:// End XmlUnitTestResultPrinter
        -: 4468:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4469:
        -: 4470:#if GTEST_HAS_FILE_SYSTEM
        -: 4471:// This class generates an JSON output file.
        -: 4472:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4473: public:
        -: 4474:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4475:
        -: 4476:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4477:
        -: 4478:  // Prints an JSON summary of all unit tests.
        -: 4479:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4480:                                const std::vector<TestSuite*>& test_suites);
        -: 4481:
        -: 4482: private:
        -: 4483:  // Returns an JSON-escaped copy of the input string str.
        -: 4484:  static std::string EscapeJson(const std::string& str);
        -: 4485:
        -: 4486:  //// Verifies that the given attribute belongs to the given element and
        -: 4487:  //// streams the attribute as JSON.
        -: 4488:  static void OutputJsonKey(std::ostream* stream,
        -: 4489:                            const std::string& element_name,
        -: 4490:                            const std::string& name, const std::string& value,
        -: 4491:                            const std::string& indent, bool comma = true);
        -: 4492:  static void OutputJsonKey(std::ostream* stream,
        -: 4493:                            const std::string& element_name,
        -: 4494:                            const std::string& name, int value,
        -: 4495:                            const std::string& indent, bool comma = true);
        -: 4496:
        -: 4497:  // Streams a test suite JSON stanza containing the given test result.
        -: 4498:  //
        -: 4499:  // Requires: result.Failed()
        -: 4500:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4501:                                               const TestResult& result);
        -: 4502:
        -: 4503:  // Streams a JSON representation of a TestResult object.
        -: 4504:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4505:                                   const TestResult& result);
        -: 4506:
        -: 4507:  // Streams a JSON representation of a TestInfo object.
        -: 4508:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4509:                                 const char* test_suite_name,
        -: 4510:                                 const TestInfo& test_info);
        -: 4511:
        -: 4512:  // Prints a JSON representation of a TestSuite object
        -: 4513:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4514:                                 const TestSuite& test_suite);
        -: 4515:
        -: 4516:  // Prints a JSON summary of unit_test to output stream out.
        -: 4517:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4518:                                const UnitTest& unit_test);
        -: 4519:
        -: 4520:  // Produces a string representing the test properties in a result as
        -: 4521:  // a JSON dictionary.
        -: 4522:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4523:                                          const std::string& indent);
        -: 4524:
        -: 4525:  // The output file.
        -: 4526:  const std::string output_file_;
        -: 4527:
        -: 4528:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4529:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4530:      delete;
        -: 4531:};
        -: 4532:
        -: 4533:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4534:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4535:    : output_file_(output_file) {
    %%%%%: 4535-block  0
call    0 never executed
    %%%%%: 4535-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 4535-block  2
    #####: 4536:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4537:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4537-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4537-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4537-block  2
call    7 never executed
    $$$$$: 4537-block  3
call    8 never executed
    $$$$$: 4537-block  4
        -: 4538:  }
    #####: 4539:}
    %%%%%: 4539-block  0
    $$$$$: 4539-block  1
call    0 never executed
    $$$$$: 4539-block  2
call    1 never executed
        -: 4540:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4541:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4542:                                                   int /*iteration*/) {
    #####: 4543:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4543-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4544:  std::stringstream stream;
    %%%%%: 4544-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4545:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4545-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4546:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4546-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4546-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4546-block  2
    #####: 4547:  fclose(jsonout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4548:}
    %%%%%: 4548-block  0
call    0 never executed
    $$$$$: 4548-block  1
call    1 never executed
        -: 4549:
        -: 4550:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4551:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4552:  Message m;
    %%%%%: 4552-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4553:
    #####: 4554:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4554-block  0
    %%%%%: 4554-block  1
    %%%%%: 4554-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4555:    const char ch = str[i];
    %%%%%: 4555-block  0
call    0 never executed
    #####: 4556:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4557:      case '\\':
        -: 4558:      case '"':
        -: 4559:      case '/':
    #####: 4560:        m << '\\' << ch;
    %%%%%: 4560-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4560-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 4560-block  2
    #####: 4561:        break;
    %%%%%: 4561-block  0
    #####: 4562:      case '\b':
    #####: 4563:        m << "\\b";
    %%%%%: 4563-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4564:        break;
    %%%%%: 4564-block  0
    #####: 4565:      case '\t':
    #####: 4566:        m << "\\t";
    %%%%%: 4566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4567:        break;
    %%%%%: 4567-block  0
    #####: 4568:      case '\n':
    #####: 4569:        m << "\\n";
    %%%%%: 4569-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4570:        break;
    %%%%%: 4570-block  0
    #####: 4571:      case '\f':
    #####: 4572:        m << "\\f";
    %%%%%: 4572-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4573:        break;
    %%%%%: 4573-block  0
    #####: 4574:      case '\r':
    #####: 4575:        m << "\\r";
    %%%%%: 4575-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4576:        break;
    %%%%%: 4576-block  0
    #####: 4577:      default:
    #####: 4578:        if (ch < ' ') {
    %%%%%: 4578-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4579:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4579-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4579-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4579-block  3
call    9 never executed
    $$$$$: 4579-block  4
call   10 never executed
    $$$$$: 4579-block  5
        -: 4580:        } else {
    #####: 4581:          m << ch;
    %%%%%: 4581-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4582:        }
    #####: 4583:        break;
    %%%%%: 4583-block  0
        -: 4584:    }
        -: 4585:  }
        -: 4586:
    #####: 4587:  return m.GetString();
    %%%%%: 4587-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4587-block  1
    #####: 4588:}
    %%%%%: 4588-block  0
call    0 never executed
    $$$$$: 4588-block  1
call    1 never executed
        -: 4589:
        -: 4590:// The following routines generate an JSON representation of a UnitTest
        -: 4591:// object.
        -: 4592:
        -: 4593:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 4594:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4595:  ::std::stringstream ss;
    %%%%%: 4595-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4596:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4596-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4596-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4597:  return ss.str();
    %%%%%: 4597-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4597-block  1
    #####: 4598:}
    %%%%%: 4598-block  0
call    0 never executed
    $$$$$: 4598-block  1
call    1 never executed
        -: 4599:
        -: 4600:// Converts the given epoch time in milliseconds to a date string in the
        -: 4601:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 4602:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4603:  struct tm time_struct;
    #####: 4604:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4604-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4604-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4605:    return "";
    %%%%%: 4605-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4605-block  1
        -: 4606:  // YYYY-MM-DDThh:mm:ss
    #####: 4607:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4607-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4607-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4607-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4607-block  3
call   12 never executed
    $$$$$: 4607-block  4
call   13 never executed
    $$$$$: 4607-block  5
call   14 never executed
    $$$$$: 4607-block  6
    $$$$$: 4607-block  7
    $$$$$: 4607-block  8
    $$$$$: 4607-block  9
    #####: 4608:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4608-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4608-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4608-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4608-block  3
call   12 never executed
    $$$$$: 4608-block  4
call   13 never executed
    $$$$$: 4608-block  5
call   14 never executed
    $$$$$: 4608-block  6
    $$$$$: 4608-block  7
    $$$$$: 4608-block  8
    #####: 4609:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4609-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4609-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4609-block  3
call   12 never executed
    $$$$$: 4609-block  4
call   13 never executed
    $$$$$: 4609-block  5
call   14 never executed
    $$$$$: 4609-block  6
    $$$$$: 4609-block  7
    $$$$$: 4609-block  8
    #####: 4610:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4610-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4610-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4610-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4610-block  3
call   12 never executed
    $$$$$: 4610-block  4
call   13 never executed
    $$$$$: 4610-block  5
call   14 never executed
    $$$$$: 4610-block  6
    $$$$$: 4610-block  7
    $$$$$: 4610-block  8
    #####: 4611:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4611-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4611-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4611-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4611-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4611-block  4
call   12 never executed
    $$$$$: 4611-block  5
call   13 never executed
    $$$$$: 4611-block  6
call   14 never executed
    $$$$$: 4611-block  7
    $$$$$: 4611-block  8
    $$$$$: 4611-block  9
    #####: 4612:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4612-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4612-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4612-block  2
call    7 never executed
    $$$$$: 4612-block  3
        -: 4613:}
        -: 4614:
function _ZN7testing8internalL6IndentEy called 0 returned 0% blocks executed 0%
    #####: 4615:static inline std::string Indent(size_t width) {
    %%%%%: 4615-block  0
    #####: 4616:  return std::string(width, ' ');
    %%%%%: 4616-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4616-block  1
        -: 4617:}
        -: 4618:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4619:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4620:                                              const std::string& element_name,
        -: 4621:                                              const std::string& name,
        -: 4622:                                              const std::string& value,
        -: 4623:                                              const std::string& indent,
        -: 4624:                                              bool comma) {
        -: 4625:  const std::vector<std::string>& allowed_names =
    #####: 4626:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4626-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4627:
    #####: 4628:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4628-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4628-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4628-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4628-block  3
call   13 never executed
    %%%%%: 4628-block  4
call   14 never executed
    $$$$$: 4628-block  5
    $$$$$: 4628-block  6
    $$$$$: 4628-block  7
call   15 never executed
    $$$$$: 4628-block  8
        -: 4629:               allowed_names.end())
        -: 4630:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4631:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4631-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4631-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4631-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4631-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4631-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4632:
    #####: 4633:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4633-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4633-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4633-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4633-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4633-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4633-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4633-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4633-block  7
call   21 never executed
    $$$$$: 4633-block  8
call   22 never executed
    $$$$$: 4633-block  9
    #####: 4634:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4634-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4635:}
    %%%%%: 4635-block  0
call    0 never executed
    $$$$$: 4635-block  1
call    1 never executed
        -: 4636:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4637:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4638:    std::ostream* stream, const std::string& element_name,
        -: 4639:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4640:  const std::vector<std::string>& allowed_names =
    #####: 4641:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4642:
    #####: 4643:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4643-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4643-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4643-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4643-block  3
call   13 never executed
    %%%%%: 4643-block  4
call   14 never executed
    $$$$$: 4643-block  5
    $$$$$: 4643-block  6
    $$$$$: 4643-block  7
call   15 never executed
    $$$$$: 4643-block  8
        -: 4644:               allowed_names.end())
        -: 4645:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4646:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4646-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4646-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4646-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4646-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4646-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4647:
    #####: 4648:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4648-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4648-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4648-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4648-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4648-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4648-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4648-block  6
call   18 never executed
    $$$$$: 4648-block  7
call   19 never executed
    $$$$$: 4648-block  8
    #####: 4649:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4649-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4650:}
    %%%%%: 4650-block  0
call    0 never executed
    $$$$$: 4650-block  1
call    1 never executed
        -: 4651:
        -: 4652:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4653:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4654:    ::std::ostream* stream, const TestResult& result) {
        -: 4655:  // Output the boilerplate for a new test suite.
    #####: 4656:  *stream << Indent(4) << "{\n";
    %%%%%: 4656-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4656-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4656-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4656-block  3
call    9 never executed
    $$$$$: 4656-block  4
call   10 never executed
    $$$$$: 4656-block  5
call   11 never executed
    #####: 4657:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4657-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4657-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4657-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4657-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4657-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4657-block  5
call   19 never executed
    $$$$$: 4657-block  6
    $$$$$: 4657-block  7
    $$$$$: 4657-block  8
call   20 never executed
    $$$$$: 4657-block  9
    $$$$$: 4657-block 10
    $$$$$: 4657-block 11
call   21 never executed
    $$$$$: 4657-block 12
    $$$$$: 4657-block 13
    $$$$$: 4657-block 14
call   22 never executed
    $$$$$: 4657-block 15
call   23 never executed
    #####: 4658:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4658-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4658-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4658-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4658-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4658-block  4
call   15 never executed
    $$$$$: 4658-block  5
    $$$$$: 4658-block  6
    $$$$$: 4658-block  7
call   16 never executed
    $$$$$: 4658-block  8
    $$$$$: 4658-block  9
    $$$$$: 4658-block 10
call   17 never executed
    $$$$$: 4658-block 11
call   18 never executed
    #####: 4659:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4660:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4660-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4660-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4660-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4660-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4660-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4660-block  5
call   15 never executed
    $$$$$: 4660-block  6
    $$$$$: 4660-block  7
    $$$$$: 4660-block  8
call   16 never executed
    $$$$$: 4660-block  9
    $$$$$: 4660-block 10
    $$$$$: 4660-block 11
call   17 never executed
    $$$$$: 4660-block 12
call   18 never executed
    #####: 4661:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4661-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4661-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4661-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4661-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4661-block  4
call   15 never executed
    $$$$$: 4661-block  5
    $$$$$: 4661-block  6
    $$$$$: 4661-block  7
call   16 never executed
    $$$$$: 4661-block  8
    $$$$$: 4661-block  9
    $$$$$: 4661-block 10
call   17 never executed
    $$$$$: 4661-block 11
call   18 never executed
    #####: 4662:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4662-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4662-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4662-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4662-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4662-block  4
call   15 never executed
    $$$$$: 4662-block  5
    $$$$$: 4662-block  6
    $$$$$: 4662-block  7
call   16 never executed
    $$$$$: 4662-block  8
    $$$$$: 4662-block  9
    $$$$$: 4662-block 10
call   17 never executed
    $$$$$: 4662-block 11
call   18 never executed
    #####: 4663:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4663-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4663-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4663-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4663-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4663-block  4
call   15 never executed
    $$$$$: 4663-block  5
    $$$$$: 4663-block  6
    $$$$$: 4663-block  7
call   16 never executed
    $$$$$: 4663-block  8
    $$$$$: 4663-block  9
    $$$$$: 4663-block 10
call   17 never executed
    $$$$$: 4663-block 11
call   18 never executed
    #####: 4664:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4664-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4664-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4664-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4664-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4664-block  4
call   11 never executed
    $$$$$: 4664-block  5
    $$$$$: 4664-block  6
    $$$$$: 4664-block  7
call   12 never executed
    $$$$$: 4664-block  8
    $$$$$: 4664-block  9
    #####: 4665:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4665-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4665-block  1
call    5 never executed
    $$$$$: 4665-block  2
    #####: 4666:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4666-block  0
call    4 never executed
    $$$$$: 4666-block  1
call    5 never executed
    #####: 4667:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4667-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4667-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4667-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4667-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4667-block  4
call   11 never executed
    $$$$$: 4667-block  5
    $$$$$: 4667-block  6
    $$$$$: 4667-block  7
call   12 never executed
    $$$$$: 4667-block  8
    $$$$$: 4667-block  9
    #####: 4668:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4668-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4668-block  1
call    5 never executed
    $$$$$: 4668-block  2
    #####: 4669:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4669-block  0
call    4 never executed
    $$$$$: 4669-block  1
call    5 never executed
        -: 4670:  }
    #####: 4671:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4671-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4671-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4671-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4671-block  3
call    9 never executed
    $$$$$: 4671-block  4
call   10 never executed
    $$$$$: 4671-block  5
call   11 never executed
        -: 4672:
        -: 4673:  // Output the boilerplate for a new test case.
    #####: 4674:  *stream << Indent(8) << "{\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4674-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4674-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4674-block  2
call    9 never executed
    $$$$$: 4674-block  3
call   10 never executed
    $$$$$: 4674-block  4
call   11 never executed
    #####: 4675:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4675-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4675-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4675-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4675-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4675-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4675-block  5
call   19 never executed
    $$$$$: 4675-block  6
    $$$$$: 4675-block  7
    $$$$$: 4675-block  8
call   20 never executed
    $$$$$: 4675-block  9
    $$$$$: 4675-block 10
    $$$$$: 4675-block 11
call   21 never executed
    $$$$$: 4675-block 12
    $$$$$: 4675-block 13
    $$$$$: 4675-block 14
call   22 never executed
    $$$$$: 4675-block 15
call   23 never executed
    #####: 4676:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4676-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4676-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4676-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4676-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4676-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4676-block  5
call   19 never executed
    $$$$$: 4676-block  6
    $$$$$: 4676-block  7
    $$$$$: 4676-block  8
call   20 never executed
    $$$$$: 4676-block  9
    $$$$$: 4676-block 10
    $$$$$: 4676-block 11
call   21 never executed
    $$$$$: 4676-block 12
    $$$$$: 4676-block 13
    $$$$$: 4676-block 14
call   22 never executed
    $$$$$: 4676-block 15
call   23 never executed
    #####: 4677:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4677-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4677-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4677-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4677-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4677-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4677-block  5
call   19 never executed
    $$$$$: 4677-block  6
    $$$$$: 4677-block  7
    $$$$$: 4677-block  8
call   20 never executed
    $$$$$: 4677-block  9
    $$$$$: 4677-block 10
    $$$$$: 4677-block 11
call   21 never executed
    $$$$$: 4677-block 12
    $$$$$: 4677-block 13
    $$$$$: 4677-block 14
call   22 never executed
    $$$$$: 4677-block 15
call   23 never executed
    #####: 4678:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4678-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4678-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4678-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4678-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4678-block  4
call   11 never executed
    $$$$$: 4678-block  5
    $$$$$: 4678-block  6
    $$$$$: 4678-block  7
call   12 never executed
    $$$$$: 4678-block  8
    $$$$$: 4678-block  9
    #####: 4679:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4679-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4679-block  1
call    5 never executed
    $$$$$: 4679-block  2
    #####: 4680:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4680-block  0
call    4 never executed
    $$$$$: 4680-block  1
call    5 never executed
    #####: 4681:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4681-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4681-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4681-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4681-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4681-block  4
call   11 never executed
    $$$$$: 4681-block  5
    $$$$$: 4681-block  6
    $$$$$: 4681-block  7
call   12 never executed
    $$$$$: 4681-block  8
    $$$$$: 4681-block  9
    #####: 4682:                FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4682-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4682-block  1
call    5 never executed
    $$$$$: 4682-block  2
    #####: 4683:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4683-block  0
call    4 never executed
    $$$$$: 4683-block  1
call    5 never executed
    #####: 4684:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4684-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4684-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4684-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4684-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4684-block  5
call   19 never executed
    $$$$$: 4684-block  6
    $$$$$: 4684-block  7
    $$$$$: 4684-block  8
call   20 never executed
    $$$$$: 4684-block  9
    $$$$$: 4684-block 10
    $$$$$: 4684-block 11
call   21 never executed
    $$$$$: 4684-block 12
    $$$$$: 4684-block 13
    $$$$$: 4684-block 14
call   22 never executed
    $$$$$: 4684-block 15
call   23 never executed
    #####: 4685:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4685-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4685-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4685-block  2
call    9 never executed
call   10 never executed
    $$$$$: 4685-block  3
call   11 never executed
    $$$$$: 4685-block  4
call   12 never executed
    $$$$$: 4685-block  5
    $$$$$: 4685-block  6
call   13 never executed
        -: 4686:
        -: 4687:  // Output the actual test result.
    #####: 4688:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4689:
        -: 4690:  // Finish the test suite.
    #####: 4691:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4691-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4691-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4691-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4691-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4691-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 4691-block  5
call   19 never executed
call   20 never executed
    $$$$$: 4691-block  6
call   21 never executed
    $$$$$: 4691-block  7
    $$$$$: 4691-block  8
call   22 never executed
    #####: 4692:}
        -: 4693:
        -: 4694:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4695:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4696:                                                   const char* test_suite_name,
        -: 4697:                                                   const TestInfo& test_info) {
    #####: 4698:  const TestResult& result = *test_info.result();
    %%%%%: 4698-block  0
call    0 never executed
    #####: 4699:  const std::string kTestsuite = "testcase";
    %%%%%: 4699-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4699-block  1
    #####: 4700:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4701:
    #####: 4702:  *stream << Indent(8) << "{\n";
    %%%%%: 4702-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4702-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4702-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4702-block  3
call    9 never executed
    $$$$$: 4702-block  4
call   10 never executed
    $$$$$: 4702-block  5
    #####: 4703:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
    %%%%%: 4703-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4703-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4703-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4703-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4703-block  4
call   12 never executed
    $$$$$: 4703-block  5
    $$$$$: 4703-block  6
    $$$$$: 4703-block  7
call   13 never executed
    $$$$$: 4703-block  8
    $$$$$: 4703-block  9
        -: 4704:
    #####: 4705:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4706:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4706-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4706-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4706-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4706-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4706-block  4
call   12 never executed
    $$$$$: 4706-block  5
    $$$$$: 4706-block  6
    $$$$$: 4706-block  7
call   13 never executed
    $$$$$: 4706-block  8
    $$$$$: 4706-block  9
        -: 4707:                  kIndent);
        -: 4708:  }
    #####: 4709:  if (test_info.type_param() != nullptr) {
    %%%%%: 4709-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4710:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4710-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4710-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4710-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4710-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4710-block  4
call   12 never executed
    $$$$$: 4710-block  5
    $$$$$: 4710-block  6
    $$$$$: 4710-block  7
call   13 never executed
    $$$$$: 4710-block  8
    $$$$$: 4710-block  9
        -: 4711:                  kIndent);
        -: 4712:  }
        -: 4713:
    #####: 4714:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4714-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4714-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4714-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4714-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4714-block  4
call   12 never executed
    $$$$$: 4714-block  5
    $$$$$: 4714-block  6
    $$$$$: 4714-block  7
call   13 never executed
    $$$$$: 4714-block  8
    $$$$$: 4714-block  9
    #####: 4715:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
    %%%%%: 4715-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4715-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4715-block  2
call    7 never executed
    $$$$$: 4715-block  3
call    8 never executed
    $$$$$: 4715-block  4
    $$$$$: 4715-block  5
    #####: 4716:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4717:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4717-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4717-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4717-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4717-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4717-block  4
call   12 never executed
    $$$$$: 4717-block  5
call   13 never executed
    $$$$$: 4717-block  6
    #####: 4718:    return;
        -: 4719:  } else {
    #####: 4720:    *stream << ",\n";
    %%%%%: 4720-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4721:  }
        -: 4722:
    #####: 4723:  OutputJsonKey(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4723-block  0
    %%%%%: 4723-block  1
    %%%%%: 4723-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4723-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4723-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4723-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4723-block  6
call   13 never executed
    $$$$$: 4723-block  7
    $$$$$: 4723-block  8
    $$$$$: 4723-block  9
call   14 never executed
    $$$$$: 4723-block 10
    $$$$$: 4723-block 11
    #####: 4724:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
    %%%%%: 4724-block  0
call    0 never executed
    #####: 4725:  OutputJsonKey(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4725-block  0
    %%%%%: 4725-block  1
    %%%%%: 4725-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4725-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4725-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4725-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4725-block  6
call   13 never executed
    $$$$$: 4725-block  7
    $$$$$: 4725-block  8
    $$$$$: 4725-block  9
call   14 never executed
    $$$$$: 4725-block 10
    $$$$$: 4725-block 11
    #####: 4726:                test_info.should_run()
    %%%%%: 4726-block  0
call    0 never executed
    #####: 4727:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4727-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4727-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4727-block  2
    %%%%%: 4727-block  3
        -: 4728:                    : "SUPPRESSED",
        -: 4729:                kIndent);
    #####: 4730:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4730-block  2
call    6 never executed
    $$$$$: 4730-block  3
call    7 never executed
    $$$$$: 4730-block  4
    $$$$$: 4730-block  5
    #####: 4731:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4731-block  0
call    5 never executed
    $$$$$: 4731-block  1
        -: 4732:                kIndent);
    #####: 4733:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4733-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4733-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4733-block  2
call    6 never executed
    $$$$$: 4733-block  3
call    7 never executed
    $$$$$: 4733-block  4
    $$$$$: 4733-block  5
    #####: 4734:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4734-block  0
call    5 never executed
    $$$$$: 4734-block  1
    #####: 4735:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
    %%%%%: 4735-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4735-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4735-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4735-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4735-block  4
call   11 never executed
    $$$$$: 4735-block  5
    $$$$$: 4735-block  6
    $$$$$: 4735-block  7
call   12 never executed
    $$$$$: 4735-block  8
    $$$$$: 4735-block  9
        -: 4736:                false);
    #####: 4737:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4737-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4737-block  1
call    6 never executed
    $$$$$: 4737-block  2
call    7 never executed
    $$$$$: 4737-block  3
        -: 4738:
    #####: 4739:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4740:}
    %%%%%: 4740-block  0
    %%%%%: 4740-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4740-block  2
    %%%%%: 4740-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4740-block  4
call    6 never executed
    $$$$$: 4740-block  5
call    7 never executed
        -: 4741:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4742:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4743:                                                     const TestResult& result) {
    #####: 4744:  const std::string kIndent = Indent(10);
    %%%%%: 4744-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4745:
        -: 4746:  {
    #####: 4747:    int failures = 0;
    #####: 4748:    for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4748-block  0
    %%%%%: 4748-block  1
    %%%%%: 4748-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4749:      const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4749-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4750:      if (part.failed()) {
    %%%%%: 4750-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4751:        *stream << ",\n";
    %%%%%: 4751-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4752:        if (++failures == 1) {
    %%%%%: 4752-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4753:          *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4753-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4753-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4753-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4753-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4754:        }
        -: 4755:        const std::string location =
        -: 4756:            internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4757:                                                            part.line_number());
    %%%%%: 4757-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 4758:        const std::string message =
    #####: 4759:            EscapeJson(location + "\n" + part.message());
    %%%%%: 4759-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4759-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4759-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4759-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4759-block  4
call   12 never executed
    $$$$$: 4759-block  5
call   13 never executed
    $$$$$: 4759-block  6
    $$$$$: 4759-block  7
        -: 4760:        *stream << kIndent << "  {\n"
        -: 4761:                << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4762:                << kIndent << "    \"type\": \"\"\n"
    #####: 4763:                << kIndent << "  }";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4763-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4763-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4763-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4763-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4763-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4763-block  5
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4763-block  6
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%: 4763-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%: 4763-block  8
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed (throw)
    #####: 4764:      }
    %%%%%: 4764-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4764-block  1
call    2 never executed
    $$$$$: 4764-block  2
call    3 never executed
        -: 4765:    }
        -: 4766:
    #####: 4767:    if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4767-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4767-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4767-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4767-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 4768:  }
        -: 4769:
        -: 4770:  {
    #####: 4771:    int skipped = 0;
    #####: 4772:    for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4772-block  0
    %%%%%: 4772-block  1
    %%%%%: 4772-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4773:      const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4773-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4774:      if (part.skipped()) {
    %%%%%: 4774-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4775:        *stream << ",\n";
    %%%%%: 4775-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4776:        if (++skipped == 1) {
    %%%%%: 4776-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4777:          *stream << kIndent << "\"" << "skipped" << "\": [\n";
    %%%%%: 4777-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4777-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4777-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4777-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4778:        }
        -: 4779:        const std::string location =
        -: 4780:            internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4781:                                                            part.line_number());
    %%%%%: 4781-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 4782:        const std::string message =
    #####: 4783:            EscapeJson(location + "\n" + part.message());
    %%%%%: 4783-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4783-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4783-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4783-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4783-block  4
call   12 never executed
    $$$$$: 4783-block  5
call   13 never executed
    $$$$$: 4783-block  6
    $$$$$: 4783-block  7
        -: 4784:        *stream << kIndent << "  {\n"
        -: 4785:                << kIndent << "    \"message\": \"" << message << "\"\n"
    #####: 4786:                << kIndent << "  }";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4786-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4786-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4786-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4786-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4786-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4786-block  5
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4786-block  6
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    #####: 4787:      }
    %%%%%: 4787-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4787-block  1
call    2 never executed
    $$$$$: 4787-block  2
call    3 never executed
        -: 4788:    }
        -: 4789:
    #####: 4790:    if (skipped > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4790-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4790-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4790-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4790-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 4791:  }
        -: 4792:
    #####: 4793:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4793-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4793-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4793-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4793-block  4
call   12 never executed
    $$$$$: 4793-block  5
call   13 never executed
    $$$$$: 4793-block  6
    #####: 4794:}
call    0 never executed
    $$$$$: 4794-block  0
call    1 never executed
        -: 4795:
        -: 4796:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4797:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
    %%%%%: 4797-block  0
        -: 4798:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4799:  const std::string kTestsuite = "testsuite";
    %%%%%: 4799-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4799-block  1
    #####: 4800:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4801:
    #####: 4802:  *stream << Indent(4) << "{\n";
    %%%%%: 4802-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4802-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4802-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4802-block  3
call    9 never executed
    $$$$$: 4802-block  4
call   10 never executed
    $$$$$: 4802-block  5
    #####: 4803:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
    %%%%%: 4803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4803-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4803-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4803-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4803-block  4
call   12 never executed
    $$$$$: 4803-block  5
    $$$$$: 4803-block  6
    $$$$$: 4803-block  7
call   13 never executed
    $$$$$: 4803-block  8
    $$$$$: 4803-block  9
    #####: 4804:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4804-block  0
    %%%%%: 4804-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4804-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4804-block  3
call    9 never executed
    $$$$$: 4804-block  4
call   10 never executed
    $$$$$: 4804-block  5
    $$$$$: 4804-block  6
        -: 4805:                kIndent);
    #####: 4806:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4807:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4807-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4807-block  1
    %%%%%: 4807-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4807-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4807-block  4
call    9 never executed
    $$$$$: 4807-block  5
call   10 never executed
    $$$$$: 4807-block  6
    $$$$$: 4807-block  7
        -: 4808:                  test_suite.failed_test_count(), kIndent);
    #####: 4809:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4809-block  0
    %%%%%: 4809-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4809-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4809-block  3
call    9 never executed
    $$$$$: 4809-block  4
call   10 never executed
    $$$$$: 4809-block  5
    $$$$$: 4809-block  6
        -: 4810:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4811:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
    %%%%%: 4811-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4811-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4811-block  2
call    6 never executed
    $$$$$: 4811-block  3
call    7 never executed
    $$$$$: 4811-block  4
    $$$$$: 4811-block  5
    #####: 4812:    OutputJsonKey(
    %%%%%: 4812-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4812-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4812-block  2
call    6 never executed
    $$$$$: 4812-block  3
call    7 never executed
    $$$$$: 4812-block  4
    $$$$$: 4812-block  5
        -: 4813:        stream, kTestsuite, "timestamp",
    #####: 4814:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4814-block  0
call    5 never executed
    $$$$$: 4814-block  1
        -: 4815:        kIndent);
    #####: 4816:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4816-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4816-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4816-block  2
call    6 never executed
    $$$$$: 4816-block  3
call    7 never executed
    $$$$$: 4816-block  4
    $$$$$: 4816-block  5
    #####: 4817:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4817-block  0
call    5 never executed
    $$$$$: 4817-block  1
        -: 4818:                  kIndent, false);
    #####: 4819:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4819-block  0
call    3 never executed
    $$$$$: 4819-block  1
call    4 never executed
    $$$$$: 4819-block  2
    #####: 4820:            << ",\n";
call    0 never executed
    %%%%%: 4820-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4820-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4821:  }
        -: 4822:
    #####: 4823:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4823-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4823-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4823-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4823-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4824:
    #####: 4825:  bool comma = false;
    #####: 4826:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4826-block  0
    %%%%%: 4826-block  1
    %%%%%: 4826-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4827:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4827-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4827-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4828:      if (comma) {
    %%%%%: 4828-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4829:        *stream << ",\n";
    %%%%%: 4829-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4830:      } else {
    #####: 4831:        comma = true;
    %%%%%: 4831-block  0
        -: 4832:      }
    #####: 4833:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4833-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4833-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4834:    }
        -: 4835:  }
    #####: 4836:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4836-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4836-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4836-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4836-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4836-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4836-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4836-block  6
call   18 never executed
    $$$$$: 4836-block  7
call   19 never executed
    $$$$$: 4836-block  8
    #####: 4837:}
call    0 never executed
call    1 never executed
    $$$$$: 4837-block  0
call    2 never executed
    $$$$$: 4837-block  1
call    3 never executed
        -: 4838:
        -: 4839:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4840:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
    %%%%%: 4840-block  0
        -: 4841:                                                  const UnitTest& unit_test) {
    #####: 4842:  const std::string kTestsuites = "testsuites";
    %%%%%: 4842-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4842-block  1
    #####: 4843:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4844:  *stream << "{\n";
    %%%%%: 4844-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4845:
    #####: 4846:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4846-block  1
    %%%%%: 4846-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4846-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4846-block  4
call    9 never executed
    $$$$$: 4846-block  5
call   10 never executed
    $$$$$: 4846-block  6
    $$$$$: 4846-block  7
        -: 4847:                kIndent);
    #####: 4848:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4848-block  0
    %%%%%: 4848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4848-block  3
call    9 never executed
    $$$$$: 4848-block  4
call   10 never executed
    $$$$$: 4848-block  5
    $$$$$: 4848-block  6
        -: 4849:                kIndent);
    #####: 4850:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4850-block  0
    %%%%%: 4850-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4850-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4850-block  3
call    9 never executed
    $$$$$: 4850-block  4
call   10 never executed
    $$$$$: 4850-block  5
    $$$$$: 4850-block  6
        -: 4851:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4852:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
    %%%%%: 4852-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4852-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4852-block  2
call    6 never executed
    $$$$$: 4852-block  3
call    7 never executed
    $$$$$: 4852-block  4
    $$$$$: 4852-block  5
    #####: 4853:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4854:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4854-block  0
call    0 never executed
    %%%%%: 4854-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4854-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4854-block  3
call    7 never executed
    $$$$$: 4854-block  4
call    8 never executed
    $$$$$: 4854-block  5
    $$$$$: 4854-block  6
        -: 4855:                  kIndent);
        -: 4856:  }
    #####: 4857:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4857-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4857-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4857-block  2
call    6 never executed
    $$$$$: 4857-block  3
call    7 never executed
    $$$$$: 4857-block  4
    $$$$$: 4857-block  5
    #####: 4858:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4858-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4858-block  1
call    5 never executed
    $$$$$: 4858-block  2
        -: 4859:                kIndent);
    #####: 4860:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4860-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4860-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4860-block  2
call    6 never executed
    $$$$$: 4860-block  3
call    7 never executed
    $$$$$: 4860-block  4
    $$$$$: 4860-block  5
    #####: 4861:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4861-block  0
call    5 never executed
    $$$$$: 4861-block  1
        -: 4862:                false);
        -: 4863:
    #####: 4864:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4864-block  0
call    3 never executed
    $$$$$: 4864-block  1
call    4 never executed
    $$$$$: 4864-block  2
    #####: 4865:          << ",\n";
call    0 never executed
    %%%%%: 4865-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4865-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4866:
    #####: 4867:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4867-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4867-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4867-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4867-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4867-block  4
call   11 never executed
    $$$$$: 4867-block  5
    $$$$$: 4867-block  6
    $$$$$: 4867-block  7
call   12 never executed
    $$$$$: 4867-block  8
    $$$$$: 4867-block  9
    #####: 4868:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4868-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4868-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4868-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4869:
    #####: 4870:  bool comma = false;
    #####: 4871:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4871-block  0
    %%%%%: 4871-block  1
    %%%%%: 4871-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4872:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4872-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4872-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4872-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4873:      if (comma) {
    %%%%%: 4873-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4874:        *stream << ",\n";
    %%%%%: 4874-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4875:      } else {
    #####: 4876:        comma = true;
    %%%%%: 4876-block  0
        -: 4877:      }
    #####: 4878:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4878-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4878-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4879:    }
        -: 4880:  }
        -: 4881:
        -: 4882:  // If there was a test failure outside of one of the test suites (like in a
        -: 4883:  // test environment) include that in the output.
    #####: 4884:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4884-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4884-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4885:    if (comma) {
    %%%%%: 4885-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4886:      *stream << ",\n";
    %%%%%: 4886-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4887:    }
    #####: 4888:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4888-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4889:  }
        -: 4890:
        -: 4891:  *stream << "\n"
        -: 4892:          << kIndent << "]\n"
    #####: 4893:          << "}\n";
    %%%%%: 4893-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4893-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4893-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4893-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4894:}
    %%%%%: 4894-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4894-block  1
call    2 never executed
    $$$$$: 4894-block  2
call    3 never executed
        -: 4895:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4896:void JsonUnitTestResultPrinter::PrintJsonTestList(
    %%%%%: 4896-block  0
        -: 4897:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4898:  const std::string kTestsuites = "testsuites";
    %%%%%: 4898-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4898-block  1
    #####: 4899:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4900:  *stream << "{\n";
    %%%%%: 4900-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4901:  int total_tests = 0;
    #####: 4902:  for (auto test_suite : test_suites) {
    %%%%%: 4902-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4902-block  1
call    2 never executed
    %%%%%: 4902-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4903:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4904:  }
    #####: 4905:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4905-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4905-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4905-block  2
call    6 never executed
    $$$$$: 4905-block  3
call    7 never executed
    $$$$$: 4905-block  4
    $$$$$: 4905-block  5
        -: 4906:
    #####: 4907:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4907-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4907-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4907-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4907-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4907-block  4
call   11 never executed
    $$$$$: 4907-block  5
    $$$$$: 4907-block  6
    $$$$$: 4907-block  7
call   12 never executed
    $$$$$: 4907-block  8
    $$$$$: 4907-block  9
    #####: 4908:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4908-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4908-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4908-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4909:
    #####: 4910:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4910-block  0
    %%%%%: 4910-block  1
    %%%%%: 4910-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4911:    if (i != 0) {
    %%%%%: 4911-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4912:      *stream << ",\n";
    %%%%%: 4912-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4913:    }
    #####: 4914:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4914-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4915:  }
        -: 4916:
        -: 4917:  *stream << "\n"
        -: 4918:          << kIndent << "]\n"
    #####: 4919:          << "}\n";
    %%%%%: 4919-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4919-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4919-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4919-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4920:}
    %%%%%: 4920-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4920-block  1
call    2 never executed
    $$$$$: 4920-block  2
call    3 never executed
        -: 4921:// Produces a string representing the test properties in a result as
        -: 4922:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4923:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4924:    const TestResult& result, const std::string& indent) {
    #####: 4925:  Message attributes;
    %%%%%: 4925-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4926:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4926-block  0
    %%%%%: 4926-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4927:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4927-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4928:    attributes << ",\n"
    %%%%%: 4928-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4929:               << indent << "\"" << property.key() << "\": " << "\""
    %%%%%: 4929-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4929-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4929-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4929-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4929-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4929-block  5
    $$$$$: 4929-block  6
    #####: 4930:               << EscapeJson(property.value()) << "\"";
    %%%%%: 4930-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4930-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4930-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4930-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4930-block  4
call   13 never executed
call   14 never executed
    $$$$$: 4930-block  5
call   15 never executed
    $$$$$: 4930-block  6
call   16 never executed
    $$$$$: 4930-block  7
    $$$$$: 4930-block  8
    $$$$$: 4930-block  9
        -: 4931:  }
    #####: 4932:  return attributes.GetString();
    %%%%%: 4932-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4932-block  1
    #####: 4933:}
    %%%%%: 4933-block  0
call    0 never executed
    $$$$$: 4933-block  1
call    1 never executed
        -: 4934:
        -: 4935:// End JsonUnitTestResultPrinter
        -: 4936:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4937:
        -: 4938:#if GTEST_CAN_STREAM_RESULTS_
        -: 4939:
        -: 4940:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4941:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4942:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4943:// in both time and space -- important as the input str may contain an
        -: 4944:// arbitrarily long test failure message and stack trace.
        -: 4945:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4946:  std::string result;
        -: 4947:  result.reserve(strlen(str) + 1);
        -: 4948:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4949:    switch (ch) {
        -: 4950:      case '%':
        -: 4951:      case '=':
        -: 4952:      case '&':
        -: 4953:      case '\n':
        -: 4954:        result.push_back('%');
        -: 4955:        result.append(String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4956:        break;
        -: 4957:      default:
        -: 4958:        result.push_back(ch);
        -: 4959:        break;
        -: 4960:    }
        -: 4961:  }
        -: 4962:  return result;
        -: 4963:}
        -: 4964:
        -: 4965:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4966:  GTEST_CHECK_(sockfd_ == -1)
        -: 4967:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4968:
        -: 4969:  addrinfo hints;
        -: 4970:  memset(&hints, 0, sizeof(hints));
        -: 4971:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
        -: 4972:  hints.ai_socktype = SOCK_STREAM;
        -: 4973:  addrinfo* servinfo = nullptr;
        -: 4974:
        -: 4975:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4976:  // the given host name.
        -: 4977:  const int error_num =
        -: 4978:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4979:  if (error_num != 0) {
        -: 4980:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4981:                        << gai_strerror(error_num);
        -: 4982:  }
        -: 4983:
        -: 4984:  // Loop through all the results and connect to the first we can.
        -: 4985:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
        -: 4986:       cur_addr = cur_addr->ai_next) {
        -: 4987:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
        -: 4988:                     cur_addr->ai_protocol);
        -: 4989:    if (sockfd_ != -1) {
        -: 4990:      // Connect the client socket to the server socket.
        -: 4991:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4992:        close(sockfd_);
        -: 4993:        sockfd_ = -1;
        -: 4994:      }
        -: 4995:    }
        -: 4996:  }
        -: 4997:
        -: 4998:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4999:
        -: 5000:  if (sockfd_ == -1) {
        -: 5001:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 5002:                        << host_name_ << ":" << port_num_;
        -: 5003:  }
        -: 5004:}
        -: 5005:
        -: 5006:// End of class Streaming Listener
        -: 5007:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 5008:
        -: 5009:// class OsStackTraceGetter
        -: 5010:
        -: 5011:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 5012:    "... " GTEST_NAME_ " internal frames ...";
        -: 5013:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 5014:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
    %%%%%: 5014-block  0
        -: 5015:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5016:#ifdef GTEST_HAS_ABSL
        -: 5017:  std::string result;
        -: 5018:
        -: 5019:  if (max_depth <= 0) {
        -: 5020:    return result;
        -: 5021:  }
        -: 5022:
        -: 5023:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 5024:
        -: 5025:  std::vector<void*> raw_stack(max_depth);
        -: 5026:  // Skips the frames requested by the caller, plus this function.
        -: 5027:  const int raw_stack_size =
        -: 5028:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 5029:
        -: 5030:  void* caller_frame = nullptr;
        -: 5031:  {
        -: 5032:    MutexLock lock(&mutex_);
        -: 5033:    caller_frame = caller_frame_;
        -: 5034:  }
        -: 5035:
        -: 5036:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 5037:    if (raw_stack[i] == caller_frame &&
        -: 5038:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 5039:      // Add a marker to the trace and stop adding frames.
        -: 5040:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 5041:      break;
        -: 5042:    }
        -: 5043:
        -: 5044:    char tmp[1024];
        -: 5045:    const char* symbol = "(unknown)";
        -: 5046:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 5047:      symbol = tmp;
        -: 5048:    }
        -: 5049:
        -: 5050:    char line[1024];
        -: 5051:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 5052:    result += line;
        -: 5053:  }
        -: 5054:
        -: 5055:  return result;
        -: 5056:
        -: 5057:#else   // !GTEST_HAS_ABSL
        -: 5058:  static_cast<void>(max_depth);
        -: 5059:  static_cast<void>(skip_count);
    #####: 5060:  return "";
    %%%%%: 5060-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5060-block  1
        -: 5061:#endif  // GTEST_HAS_ABSL
        -: 5062:}
        -: 5063:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 263 returned 100% blocks executed 100%
      263: 5064:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5065:#ifdef GTEST_HAS_ABSL
        -: 5066:  void* caller_frame = nullptr;
        -: 5067:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5068:    caller_frame = nullptr;
        -: 5069:  }
        -: 5070:
        -: 5071:  MutexLock lock(&mutex_);
        -: 5072:  caller_frame_ = caller_frame;
        -: 5073:#endif  // GTEST_HAS_ABSL
      263: 5074:}
        -: 5075:
        -: 5076:#ifdef GTEST_HAS_DEATH_TEST
        -: 5077:// A helper class that creates the premature-exit file in its
        -: 5078:// constructor and deletes the file in its destructor.
        -: 5079:class ScopedPrematureExitFile {
        -: 5080: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 53%
        1: 5081:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
       2*: 5082:      : premature_exit_filepath_(
        1: 5082-block  0
        1: 5082-block  1
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5082-block  2
        1: 5082-block  3
        1: 5082-block  4
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5082-block  5
call    5 never executed
        -: 5083:            premature_exit_filepath ? premature_exit_filepath : "") {
        -: 5084:    // If a path to the premature-exit file is specified...
        1: 5085:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5086:      // create the file with a single "0" character in it.  I/O
        -: 5087:      // errors are ignored as there's nothing better we can do and we
        -: 5088:      // don't want to fail the test because of this.
    #####: 5089:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5089-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 5090:      fwrite("0", 1, 1, pfile);
    %%%%%: 5090-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5091:      fclose(pfile);
    %%%%%: 5091-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5092:    }
        1: 5093:  }
        1: 5093-block  0
    $$$$$: 5093-block  1
call    0 never executed
        -: 5094:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 27%
        2: 5095:  ~ScopedPrematureExitFile() {
        -: 5096:#ifndef GTEST_OS_ESP8266
        1: 5097:    if (!premature_exit_filepath_.empty()) {
        1: 5097-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5098:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5098-block  0
call    0 never executed
call    1 never executed
    #####: 5099:      if (retval) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5100:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5101:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5102:                          << retval;
call    0 never executed
        -: 5103:      }
        -: 5104:    }
        -: 5105:#endif
        1: 5106:  }
        1: 5106-block  0
call    0 returned 1
        -: 5107:
        -: 5108: private:
        -: 5109:  const std::string premature_exit_filepath_;
        -: 5110:
        -: 5111:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5112:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5113:};
        -: 5114:#endif  // GTEST_HAS_DEATH_TEST
        -: 5115:
        -: 5116:}  // namespace internal
        -: 5117:
        -: 5118:// class TestEventListeners
        -: 5119:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5120:TestEventListeners::TestEventListeners()
        1: 5121:    : repeater_(new internal::TestEventRepeater()),
        1: 5121-block  0
call    0 returned 1
call    1 returned 1
        1: 5122:      default_result_printer_(nullptr),
        1: 5123:      default_xml_generator_(nullptr) {}
        -: 5124:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 5125:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5125-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5125-block  1
call    2 never executed
        -: 5126:
        -: 5127:// Returns the standard listener responsible for the default console
        -: 5128:// output.  Can be removed from the listeners list to shut down default
        -: 5129:// console output.  Note that removing this object from the listener list
        -: 5130:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5131:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5132:  repeater_->Append(listener);
        1: 5132-block  0
call    0 returned 1
        1: 5133:}
        -: 5134:
        -: 5135:// Removes the given event listener from the list and returns it.  It then
        -: 5136:// becomes the caller's responsibility to delete the listener. Returns
        -: 5137:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5138:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5139:  if (listener == default_result_printer_)
        1: 5139-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5140:    default_result_printer_ = nullptr;
        1: 5140-block  0
    #####: 5141:  else if (listener == default_xml_generator_)
    %%%%%: 5141-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5142:    default_xml_generator_ = nullptr;
    %%%%%: 5142-block  0
        1: 5143:  return repeater_->Release(listener);
        1: 5143-block  0
call    0 returned 1
        -: 5144:}
        -: 5145:
        -: 5146:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5147:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 56 returned 100% blocks executed 100%
       56: 5148:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       56: 5148-block  0
        -: 5149:
        -: 5150:// Sets the default_result_printer attribute to the provided listener.
        -: 5151:// The listener is also added to the listener list and previous
        -: 5152:// default_result_printer is removed from it and deleted. The listener can
        -: 5153:// also be NULL in which case it will not be added to the list. Does
        -: 5154:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5155:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5156:  if (default_result_printer_ != listener) {
        1: 5156-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5157:    // It is an error to pass this method a listener that is already in the
        -: 5158:    // list.
       1*: 5159:    delete Release(default_result_printer_);
        1: 5159-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5159-block  1
call    3 never executed
        1: 5160:    default_result_printer_ = listener;
        1: 5161:    if (listener != nullptr) Append(listener);
        1: 5161-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5161-block  1
call    2 returned 1
        -: 5162:  }
        1: 5163:}
        -: 5164:
        -: 5165:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5166:// listener is also added to the listener list and previous
        -: 5167:// default_xml_generator is removed from it and deleted. The listener can
        -: 5168:// also be NULL in which case it will not be added to the list. Does
        -: 5169:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5170:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5171:  if (default_xml_generator_ != listener) {
    %%%%%: 5171-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5172:    // It is an error to pass this method a listener that is already in the
        -: 5173:    // list.
    #####: 5174:    delete Release(default_xml_generator_);
    %%%%%: 5174-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 5174-block  1
call    3 never executed
    #####: 5175:    default_xml_generator_ = listener;
    #####: 5176:    if (listener != nullptr) Append(listener);
    %%%%%: 5176-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5176-block  1
call    2 never executed
        -: 5177:  }
    #####: 5178:}
        -: 5179:
        -: 5180:// Controls whether events will be forwarded by the repeater to the
        -: 5181:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5182:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5183:  return repeater_->forwarding_enabled();
    %%%%%: 5183-block  0
call    0 never executed
        -: 5184:}
        -: 5185:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEb called 0 returned 0% blocks executed 0%
    #####: 5186:void TestEventListeners::SuppressEventForwarding(bool suppress) {
    #####: 5187:  repeater_->set_forwarding_enabled(!suppress);
    %%%%%: 5187-block  0
call    0 never executed
    #####: 5188:}
        -: 5189:
        -: 5190:// class UnitTest
        -: 5191:
        -: 5192:// Gets the singleton UnitTest object.  The first time this method is
        -: 5193:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5194:// calls will return the same object.
        -: 5195://
        -: 5196:// We don't protect this under mutex_ as a user is not supposed to
        -: 5197:// call this before main() starts, from which point on the return
        -: 5198:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 901 returned 100% blocks executed 82%
      901: 5199:UnitTest* UnitTest::GetInstance() {
        -: 5200:  // CodeGear C++Builder insists on a public destructor for the
        -: 5201:  // default implementation.  Use this implementation to keep good OO
        -: 5202:  // design with private destructor.
        -: 5203:
        -: 5204:#if defined(__BORLANDC__)
        -: 5205:  static UnitTest* const instance = new UnitTest;
        -: 5206:  return instance;
        -: 5207:#else
      901: 5208:  static UnitTest instance;
      901: 5208-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 900
        1: 5208-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5208-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5208-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5208-block  4
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$: 5208-block  5
call   12 never executed
      901: 5209:  return &instance;
      901: 5209-block  0
      901: 5209-block  1
        -: 5210:#endif  // defined(__BORLANDC__)
        -: 5211:}
        -: 5212:
        -: 5213:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5214:int UnitTest::successful_test_suite_count() const {
    #####: 5215:  return impl()->successful_test_suite_count();
    %%%%%: 5215-block  0
call    0 never executed
call    1 never executed
        -: 5216:}
        -: 5217:
        -: 5218:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5219:int UnitTest::failed_test_suite_count() const {
    #####: 5220:  return impl()->failed_test_suite_count();
    %%%%%: 5220-block  0
call    0 never executed
call    1 never executed
        -: 5221:}
        -: 5222:
        -: 5223:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5224:int UnitTest::total_test_suite_count() const {
    #####: 5225:  return impl()->total_test_suite_count();
    %%%%%: 5225-block  0
call    0 never executed
call    1 never executed
        -: 5226:}
        -: 5227:
        -: 5228:// Gets the number of all test suites that contain at least one test
        -: 5229:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5230:int UnitTest::test_suite_to_run_count() const {
        2: 5231:  return impl()->test_suite_to_run_count();
        2: 5231-block  0
call    0 returned 2
call    1 returned 2
        -: 5232:}
        -: 5233:
        -: 5234://  Legacy API is deprecated but still available
        -: 5235:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5236:int UnitTest::successful_test_case_count() const {
    #####: 5237:  return impl()->successful_test_suite_count();
    %%%%%: 5237-block  0
call    0 never executed
call    1 never executed
        -: 5238:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5239:int UnitTest::failed_test_case_count() const {
    #####: 5240:  return impl()->failed_test_suite_count();
    %%%%%: 5240-block  0
call    0 never executed
call    1 never executed
        -: 5241:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5242:int UnitTest::total_test_case_count() const {
    #####: 5243:  return impl()->total_test_suite_count();
    %%%%%: 5243-block  0
call    0 never executed
call    1 never executed
        -: 5244:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5245:int UnitTest::test_case_to_run_count() const {
    #####: 5246:  return impl()->test_suite_to_run_count();
    %%%%%: 5246-block  0
call    0 never executed
call    1 never executed
        -: 5247:}
        -: 5248:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5249:
        -: 5250:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5251:int UnitTest::successful_test_count() const {
        1: 5252:  return impl()->successful_test_count();
        1: 5252-block  0
call    0 returned 1
call    1 returned 1
        -: 5253:}
        -: 5254:
        -: 5255:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5256:int UnitTest::skipped_test_count() const {
        1: 5257:  return impl()->skipped_test_count();
        1: 5257-block  0
call    0 returned 1
call    1 returned 1
        -: 5258:}
        -: 5259:
        -: 5260:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5261:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5261-block  0
call    0 never executed
call    1 never executed
        -: 5262:
        -: 5263:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5264:int UnitTest::reportable_disabled_test_count() const {
        1: 5265:  return impl()->reportable_disabled_test_count();
        1: 5265-block  0
call    0 returned 1
call    1 returned 1
        -: 5266:}
        -: 5267:
        -: 5268:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5269:int UnitTest::disabled_test_count() const {
    #####: 5270:  return impl()->disabled_test_count();
    %%%%%: 5270-block  0
call    0 never executed
call    1 never executed
        -: 5271:}
        -: 5272:
        -: 5273:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5274:int UnitTest::reportable_test_count() const {
    #####: 5275:  return impl()->reportable_test_count();
    %%%%%: 5275-block  0
call    0 never executed
call    1 never executed
        -: 5276:}
        -: 5277:
        -: 5278:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5279:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5279-block  0
call    0 never executed
call    1 never executed
        -: 5280:
        -: 5281:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5282:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5282-block  0
call    0 returned 2
call    1 returned 2
        -: 5283:
        -: 5284:// Gets the time of the test program start, in ms from the start of the
        -: 5285:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5286:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5287:  return impl()->start_timestamp();
    %%%%%: 5287-block  0
call    0 never executed
call    1 never executed
        -: 5288:}
        -: 5289:
        -: 5290:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5291:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5292:  return impl()->elapsed_time();
        1: 5292-block  0
call    0 returned 1
call    1 returned 1
        -: 5293:}
        -: 5294:
        -: 5295:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5296:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5297:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5297-block  0
call    0 returned 1
call    1 returned 1
        -: 5298:
        -: 5299:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5300:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5301:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5301-block  0
call    0 never executed
call    1 never executed
        -: 5302:
        -: 5303:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5304:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5305:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5306:  return impl()->GetTestSuite(i);
    %%%%%: 5306-block  0
call    0 never executed
call    1 never executed
        -: 5307:}
        -: 5308:
        -: 5309://  Legacy API is deprecated but still available
        -: 5310:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5311:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5312:  return impl()->GetTestCase(i);
    %%%%%: 5312-block  0
call    0 never executed
call    1 never executed
        -: 5313:}
        -: 5314:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5315:
        -: 5316:// Returns the TestResult containing information on test failures and
        -: 5317:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5318:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5319:  return *impl()->ad_hoc_test_result();
    %%%%%: 5319-block  0
call    0 never executed
call    1 never executed
        -: 5320:}
        -: 5321:
        -: 5322:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5323:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5324:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5325:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5325-block  0
call    0 never executed
call    1 never executed
        -: 5326:}
        -: 5327:
function _ZN7testing8UnitTest16UponLeavingGTestEv called 110 returned 100% blocks executed 100%
      110: 5328:void UnitTest::UponLeavingGTest() {
      110: 5329:  impl()->os_stack_trace_getter()->UponLeavingGTest();
      110: 5329-block  0
call    0 returned 110
call    1 returned 110
call    2 returned 110
      110: 5330:}
        -: 5331:
        -: 5332:// Sets the TestSuite object for the test that's currently running.
function _ZN7testing8UnitTest22set_current_test_suiteEPNS_9TestSuiteE called 8 returned 100% blocks executed 100%
        8: 5333:void UnitTest::set_current_test_suite(TestSuite* a_current_test_suite) {
        8: 5334:  internal::MutexLock lock(&mutex_);
        8: 5334-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 5335:  impl_->set_current_test_suite(a_current_test_suite);
        8: 5335-block  0
call    0 returned 8
        8: 5336:}
call    0 returned 8
        -: 5337:
        -: 5338:// Sets the TestInfo object for the test that's currently running.
function _ZN7testing8UnitTest21set_current_test_infoEPNS_8TestInfoE called 102 returned 100% blocks executed 100%
      102: 5339:void UnitTest::set_current_test_info(TestInfo* a_current_test_info) {
      102: 5340:  internal::MutexLock lock(&mutex_);
      102: 5340-block  0
call    0 returned 102
branch  1 taken 102 (fallthrough)
branch  2 taken 0 (throw)
      102: 5341:  impl_->set_current_test_info(a_current_test_info);
      102: 5341-block  0
call    0 returned 102
      102: 5342:}
call    0 returned 102
        -: 5343:
        -: 5344:// Returns the list of event listeners that can be used to track events
        -: 5345:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 55 returned 100% blocks executed 100%
       55: 5346:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
       55: 5346-block  0
call    0 returned 55
call    1 returned 55
        -: 5347:
        -: 5348:// Registers and returns a global test environment.  When a test
        -: 5349:// program is run, all global test environments will be set-up in the
        -: 5350:// order they were registered.  After all tests in the program have
        -: 5351:// finished, all global test environments will be torn-down in the
        -: 5352:// *reverse* order they were registered.
        -: 5353://
        -: 5354:// The UnitTest object takes ownership of the given environment.
        -: 5355://
        -: 5356:// We don't protect this under mutex_, as we only support calling it
        -: 5357:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5358:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5359:  if (env == nullptr) {
    %%%%%: 5359-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5360:    return nullptr;
    %%%%%: 5360-block  0
        -: 5361:  }
        -: 5362:
    #####: 5363:  impl_->environments().push_back(env);
    %%%%%: 5363-block  0
call    0 never executed
call    1 never executed
    #####: 5364:  return env;
        -: 5365:}
        -: 5366:
        -: 5367:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5368:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5369:// this to report their results.  The user code should use the
        -: 5370:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5371:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5372:                                 const char* file_name, int line_number,
        -: 5373:                                 const std::string& message,
        -: 5374:                                 const std::string& os_stack_trace)
        -: 5375:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5376:  Message msg;
    %%%%%: 5376-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5377:  msg << message;
    %%%%%: 5377-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5378:
    #####: 5379:  internal::MutexLock lock(&mutex_);
    %%%%%: 5379-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5380:  if (!impl_->gtest_trace_stack().empty()) {
    %%%%%: 5380-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5380-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5381:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5381-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5381-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5381-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5382:
    #####: 5383:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5383-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5383-block  1
call    3 never executed
    %%%%%: 5383-block  2
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 5384:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5384-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5384-block  1
call    3 never executed
    #####: 5385:      msg << "\n"
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5386:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5386-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5386-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5386-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 5386-block  3
call    9 never executed
    $$$$$: 5386-block  4
call   10 never executed
    $$$$$: 5386-block  5
    #####: 5387:          << trace.message;
    %%%%%: 5387-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5388:    }
        -: 5389:  }
        -: 5390:
    #####: 5391:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5391-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 5391-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 5391-block  2
    %%%%%: 5391-block  3
    %%%%%: 5391-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 5392:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5392-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5392-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5393:  } else {
    #####: 5394:    msg << "\n";
    %%%%%: 5394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5395:  }
        -: 5396:
        -: 5397:  const TestPartResult result = TestPartResult(
    #####: 5398:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5398-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5398-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 5398-block  2
call    7 never executed
    $$$$$: 5398-block  3
call    8 never executed
    $$$$$: 5398-block  4
    #####: 5399:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5399-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5400:      result);
        -: 5401:
    #####: 5402:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5402-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5402-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 5403:      result_type != TestPartResult::kSkip) {
        -: 5404:    // gtest_break_on_failure takes precedence over
        -: 5405:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5406:    // in the code (perhaps in order to use Google Test assertions
        -: 5407:    // with another testing framework) and specify the former on the
        -: 5408:    // command line for debugging.
    #####: 5409:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5409-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5410:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5411:    !defined(GTEST_OS_WINDOWS_RT)
        -: 5412:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5413:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5414:      // the --gtest_catch_exceptions flags are specified.
    #####: 5415:      DebugBreak();
    %%%%%: 5415-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5416:#elif (!defined(__native_client__)) &&            \
        -: 5417:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5418:     (defined(__x86_64__) || defined(__i386__)))
        -: 5419:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 5420:      asm("int3");
        -: 5421:#elif GTEST_HAS_BUILTIN(__builtin_trap)
        -: 5422:      __builtin_trap();
        -: 5423:#elif defined(SIGTRAP)
        -: 5424:      raise(SIGTRAP);
        -: 5425:#else
        -: 5426:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5427:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5428:      // portability: some debuggers don't correctly trap abort().
        -: 5429:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5430:#endif  // GTEST_OS_WINDOWS
    #####: 5431:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5431-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5432:#if GTEST_HAS_EXCEPTIONS
    #####: 5433:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5433-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 5433-block  1
call    4 never executed
    $$$$$: 5433-block  2
call    5 never executed
        -: 5434:#else
        -: 5435:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5436:      // that cannot be suppressed in VC 7.1 or below.
        -: 5437:      exit(1);
        -: 5438:#endif
        -: 5439:    }
        -: 5440:  }
    #####: 5441:}
    %%%%%: 5441-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 5441-block  1
call    3 never executed
    $$$$$: 5441-block  2
call    4 never executed
    $$$$$: 5441-block  3
call    5 never executed
        -: 5442:
        -: 5443:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5444:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5445:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5446:// when invoked elsewhere.  If the result already contains a property with
        -: 5447:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5448:void UnitTest::RecordProperty(const std::string& key,
        -: 5449:                              const std::string& value) {
    #####: 5450:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5450-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5450-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5450-block  2
call    6 never executed
    $$$$$: 5450-block  3
call    7 never executed
    #####: 5451:}
        -: 5452:
        -: 5453:// Runs all tests in this UnitTest object and prints the result.
        -: 5454:// Returns 0 if successful, or 1 otherwise.
        -: 5455://
        -: 5456:// We don't protect this under mutex_, as we only support calling it
        -: 5457:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5458:int UnitTest::Run() {
        -: 5459:#ifdef GTEST_HAS_DEATH_TEST
        -: 5460:  const bool in_death_test_child_process =
        1: 5461:      !GTEST_FLAG_GET(internal_run_death_test).empty();
        1: 5461-block  0
call    0 returned 1
        -: 5462:
        -: 5463:  // Google Test implements this protocol for catching that a test
        -: 5464:  // program exits before returning control to Google Test:
        -: 5465:  //
        -: 5466:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5467:  //      is specified by the environment variable
        -: 5468:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5469:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5470:  //
        -: 5471:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5472:  // running a Google-Test-based test program and check the existence
        -: 5473:  // of the file at the end of the test execution to see if it has
        -: 5474:  // exited prematurely.
        -: 5475:
        -: 5476:  // If we are in the child process of a death test, don't
        -: 5477:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5478:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5479:  // the file upon entering/leaving this function.  If the program
        -: 5480:  // somehow exits before this function has a chance to return, the
        -: 5481:  // premature-exit file will be left undeleted, causing a test runner
        -: 5482:  // that understands the premature-exit-file protocol to report the
        -: 5483:  // test as having failed.
        -: 5484:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5485:      in_death_test_child_process
        -: 5486:          ? nullptr
       1*: 5487:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5487-block  0
        1: 5487-block  1
call    2 returned 1
        1: 5487-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 5488:#else
        -: 5489:  const bool in_death_test_child_process = false;
        -: 5490:#endif  // GTEST_HAS_DEATH_TEST
        -: 5491:
        -: 5492:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5493:  // used for the duration of the program.
        1: 5494:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5494-block  0
call    0 returned 1
call    1 returned 1
        -: 5495:
        -: 5496:#ifdef GTEST_OS_WINDOWS
        -: 5497:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5498:  // tests or this is executing in the context of death test child
        -: 5499:  // process. In either case the user does not want to see pop-up dialogs
        -: 5500:  // about crashes - they are expected.
       1*: 5501:  if (impl()->catch_exceptions() || in_death_test_child_process) {
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5501-block  0
branch  4 never executed (fallthrough)
branch  5 never executed
        1: 5501-block  1
    %%%%%: 5501-block  2
        1: 5501-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -: 5502:#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5503:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_GAMES)
        -: 5504:    // SetErrorMode doesn't exist on CE.
        1: 5505:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        1: 5505-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5506:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5507:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5508:
        -: 5509:#if (defined(_MSC_VER) || defined(GTEST_OS_WINDOWS_MINGW)) && \
        -: 5510:    !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5511:    // Death test children can be terminated with _abort().  On Windows,
        -: 5512:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5513:    // abort message to go to stderr instead.
        1: 5514:    _set_error_mode(_OUT_TO_STDERR);
        1: 5514-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5515:#endif
        -: 5516:
        -: 5517:#if defined(_MSC_VER) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5518:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5519:    // offering a choice to debug the aborted program. We need to suppress
        -: 5520:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5521:    // executed. Google Test will notify the user of any unexpected
        -: 5522:    // failure via stderr.
        -: 5523:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5524:      _set_abort_behavior(
        -: 5525:          0x0,                                    // Clear the following flags:
        -: 5526:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5527:
        -: 5528:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5529:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5530:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5531:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5532:    if (!IsDebuggerPresent()) {
        -: 5533:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5534:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5535:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5536:    }
        -: 5537:#endif
        -: 5538:  }
        -: 5539:#else
        -: 5540:  (void)in_death_test_child_process;  // Needed inside the #if block above
        -: 5541:#endif  // GTEST_OS_WINDOWS
        -: 5542:
        1: 5543:  return internal::HandleExceptionsInMethodIfSupported(
        1: 5543-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5544:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5545:             "auxiliary test code (environments or event listeners)")
       1*: 5546:             ? 0
        1: 5546-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5546-block  1
    %%%%%: 5546-block  2
        1: 5547:             : 1;
        1: 5547-block  0
        1: 5548:}
        1: 5548-block  0
call    0 returned 1
    $$$$$: 5548-block  1
call    1 never executed
        -: 5549:
        -: 5550:#if GTEST_HAS_FILE_SYSTEM
        -: 5551:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5552:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5553:const char* UnitTest::original_working_dir() const {
    #####: 5554:  return impl_->original_working_dir_.c_str();
    %%%%%: 5554-block  0
call    0 never executed
        -: 5555:}
        -: 5556:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5557:
        -: 5558:// Returns the TestSuite object for the test that's currently running,
        -: 5559:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5560:const TestSuite* UnitTest::current_test_suite() const
        -: 5561:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5562:  internal::MutexLock lock(&mutex_);
    %%%%%: 5562-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5563:  return impl_->current_test_suite();
    %%%%%: 5563-block  0
call    0 never executed
    %%%%%: 5563-block  1
    #####: 5564:}
call    0 never executed
        -: 5565:
        -: 5566:// Legacy API is still available but deprecated
        -: 5567:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5568:const TestCase* UnitTest::current_test_case() const
        -: 5569:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5570:  internal::MutexLock lock(&mutex_);
    %%%%%: 5570-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5571:  return impl_->current_test_suite();
    %%%%%: 5571-block  0
call    0 never executed
    %%%%%: 5571-block  1
    #####: 5572:}
call    0 never executed
        -: 5573:#endif
        -: 5574:
        -: 5575:// Returns the TestInfo object for the test that's currently running,
        -: 5576:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5577:const TestInfo* UnitTest::current_test_info() const
        -: 5578:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5579:  internal::MutexLock lock(&mutex_);
    %%%%%: 5579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5580:  return impl_->current_test_info();
    %%%%%: 5580-block  0
call    0 never executed
    %%%%%: 5580-block  1
    #####: 5581:}
call    0 never executed
        -: 5582:
        -: 5583:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5584:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5584-block  0
call    0 never executed
        -: 5585:
        -: 5586:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5587:// value-parameterized tests and instantiate and register them.
        -: 5588:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5589:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5590:  return impl_->parameterized_test_registry();
    %%%%%: 5590-block  0
call    0 never executed
        -: 5591:}
        -: 5592:
        -: 5593:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 56%
        1: 5594:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5594-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5594-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5594-block  2
    $$$$$: 5594-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$: 5594-block  4
call    9 never executed
    $$$$$: 5594-block  5
call   10 never executed
        -: 5595:
        -: 5596:// Destructor of UnitTest.
    #####: 5597:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5597:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5597-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 5597:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5597-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5597-block  1
call    2 never executed
    %%%%%: 5597-block  2
call    3 never executed
------------------
        -: 5598:
        -: 5599:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5600:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5601:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5602:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5603:  internal::MutexLock lock(&mutex_);
    %%%%%: 5603-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5604:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5604-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5604-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 5605:}
    %%%%%: 5605-block  0
call    0 never executed
    $$$$$: 5605-block  1
call    1 never executed
        -: 5606:
        -: 5607:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5608:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5609:  internal::MutexLock lock(&mutex_);
    %%%%%: 5609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5610:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5610-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5610-block  1
call    3 never executed
    #####: 5611:}
call    0 never executed
    $$$$$: 5611-block  0
call    1 never executed
        -: 5612:
        -: 5613:namespace internal {
        -: 5614:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 41%
        1: 5615:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 5616:    : parent_(parent),
        -: 5617:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        1: 5618:          default_global_test_part_result_reporter_(this),
call    0 returned 1
        1: 5619:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 1
        1: 5620:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5621:          &default_global_test_part_result_reporter_),
        1: 5622:      per_thread_test_part_result_reporter_(
        1: 5622-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 5622-block  1
        -: 5623:          &default_per_thread_test_part_result_reporter_),
        1: 5624:      parameterized_test_registry_(),
call    0 returned 1
        1: 5625:      parameterized_tests_registered_(false),
        1: 5626:      last_death_test_suite_(-1),
        1: 5627:      current_test_suite_(nullptr),
        1: 5628:      current_test_info_(nullptr),
        1: 5629:      ad_hoc_test_result_(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5630:      os_stack_trace_getter_(nullptr),
        1: 5631:      post_flag_parse_init_performed_(false),
        1: 5632:      random_seed_(0),  // Will be overridden by the flag before first use.
        1: 5633:      random_(0),       // Will be reseeded before first use.
        1: 5633-block  0
call    0 returned 1
        1: 5634:      start_timestamp_(0),
        1: 5635:      elapsed_time_(0),
        -: 5636:#ifdef GTEST_HAS_DEATH_TEST
        1: 5637:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5637-block  0
call    3 returned 1
call    4 returned 1
        -: 5638:#endif
        -: 5639:      // Will be overridden by the flag before first use.
        7: 5640:      catch_exceptions_(false) {
        1: 5640-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5640-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
        1: 5640-block  2
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 5641:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5641-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5641-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$: 5641-block  2
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$: 5641-block  3
call   10 never executed
        1: 5642:}
        1: 5642-block  0
    $$$$$: 5642-block  1
call    0 never executed
    $$$$$: 5642-block  2
call    1 never executed
    $$$$$: 5642-block  3
call    2 never executed
    $$$$$: 5642-block  4
call    3 never executed
    $$$$$: 5642-block  5
call    4 never executed
    $$$$$: 5642-block  6
call    5 never executed
    $$$$$: 5642-block  7
call    6 never executed
    $$$$$: 5642-block  8
call    7 never executed
    $$$$$: 5642-block  9
call    8 never executed
    $$$$$: 5642-block 10
call    9 never executed
    $$$$$: 5642-block 11
call   10 never executed
    $$$$$: 5642-block 12
call   11 never executed
    $$$$$: 5642-block 13
call   12 never executed
    $$$$$: 5642-block 14
call   13 never executed
    $$$$$: 5642-block 15
call   14 never executed
    $$$$$: 5642-block 16
call   15 never executed
    $$$$$: 5642-block 17
call   16 never executed
        -: 5643:
    #####: 5644:UnitTestImpl::~UnitTestImpl() {
        -: 5645:  // Deletes every TestSuite.
    #####: 5646:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5647:
        -: 5648:  // Deletes every Environment.
    #####: 5649:  ForEach(environments_, internal::Delete<Environment>);
        -: 5650:
    #####: 5651:  delete os_stack_trace_getter_;
    #####: 5652:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 5644:UnitTestImpl::~UnitTestImpl() {
        -: 5645:  // Deletes every TestSuite.
        -: 5646:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5647:
        -: 5648:  // Deletes every Environment.
        -: 5649:  ForEach(environments_, internal::Delete<Environment>);
        -: 5650:
        -: 5651:  delete os_stack_trace_getter_;
    #####: 5652:}
    %%%%%: 5652-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 5644:UnitTestImpl::~UnitTestImpl() {
        -: 5645:  // Deletes every TestSuite.
    #####: 5646:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5646-block  0
call    0 never executed
        -: 5647:
        -: 5648:  // Deletes every Environment.
    #####: 5649:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5650:
    #####: 5651:  delete os_stack_trace_getter_;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5651-block  0
call    2 never executed
    #####: 5652:}
    %%%%%: 5652-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
------------------
        -: 5653:
        -: 5654:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5655:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5656:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5657:// otherwise.  If the result already contains a property with the same key,
        -: 5658:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5659:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5660:  std::string xml_element;
    %%%%%: 5660-block  0
call    0 never executed
        -: 5661:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5662:
    #####: 5663:  if (current_test_info_ != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5664:    xml_element = "testcase";
    %%%%%: 5664-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5665:    test_result = &(current_test_info_->result_);
    %%%%%: 5665-block  0
    #####: 5666:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5666-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5667:    xml_element = "testsuite";
    %%%%%: 5667-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5668:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5668-block  0
        -: 5669:  } else {
    #####: 5670:    xml_element = "testsuites";
    %%%%%: 5670-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5671:    test_result = &ad_hoc_test_result_;
    %%%%%: 5671-block  0
        -: 5672:  }
    #####: 5673:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5673-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5674:}
    %%%%%: 5674-block  0
call    0 never executed
    $$$$$: 5674-block  1
call    1 never executed
        -: 5675:
        -: 5676:#ifdef GTEST_HAS_DEATH_TEST
        -: 5677:// Disables event forwarding if the control is currently in a death test
        -: 5678:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5679:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5680:  if (internal_run_death_test_flag_ != nullptr)
        1: 5680-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5681:    listeners()->SuppressEventForwarding(true);
    %%%%%: 5681-block  0
call    0 never executed
call    1 never executed
        1: 5682:}
        -: 5683:#endif  // GTEST_HAS_DEATH_TEST
        -: 5684:
        -: 5685:// Initializes event listeners performing XML output as specified by
        -: 5686:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 20%
        1: 5687:void UnitTestImpl::ConfigureXmlOutput() {
        1: 5688:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5688-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5689:#if GTEST_HAS_FILE_SYSTEM
        1: 5690:  if (output_format == "xml") {
        1: 5690-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5691:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5691-block  0
call    0 never executed
    %%%%%: 5691-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5691-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5692:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5692-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5692-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5692-block  2
call   10 never executed
    $$$$$: 5692-block  3
call   11 never executed
    $$$$$: 5692-block  4
    $$$$$: 5692-block  5
call   12 never executed
        1: 5693:  } else if (output_format == "json") {
        1: 5693-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5694:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5694-block  0
call    0 never executed
    %%%%%: 5694-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5694-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5695:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5695-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5695-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5695-block  2
call   10 never executed
    $$$$$: 5695-block  3
call   11 never executed
    $$$$$: 5695-block  4
    $$$$$: 5695-block  5
call   12 never executed
        1: 5696:  } else if (!output_format.empty()) {
        1: 5696-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5697:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5697-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5697-block  1
call    3 never executed
    %%%%%: 5697-block  2
call    4 never executed
    $$$$$: 5697-block  3
call    5 never executed
    $$$$$: 5697-block  4
    #####: 5698:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5698-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5698-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5699:  }
        -: 5700:#else
        -: 5701:  if (!output_format.empty()) {
        -: 5702:    GTEST_LOG_(ERROR) << "ERROR: alternative output formats require "
        -: 5703:                      << "GTEST_HAS_FILE_SYSTEM to be enabled";
        -: 5704:  }
        -: 5705:#endif  // GTEST_HAS_FILE_SYSTEM
        1: 5706:}
        1: 5706-block  0
call    0 returned 1
    $$$$$: 5706-block  1
call    1 never executed
        -: 5707:
        -: 5708:#if GTEST_CAN_STREAM_RESULTS_
        -: 5709:// Initializes event listeners for streaming test results in string form.
        -: 5710:// Must not be called before InitGoogleTest.
        -: 5711:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 5712:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        -: 5713:  if (!target.empty()) {
        -: 5714:    const size_t pos = target.find(':');
        -: 5715:    if (pos != std::string::npos) {
        -: 5716:      listeners()->Append(
        -: 5717:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
        -: 5718:    } else {
        -: 5719:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 5720:                          << "\" ignored.";
        -: 5721:    }
        -: 5722:  }
        -: 5723:}
        -: 5724:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5725:
        -: 5726:// Performs initialization dependent upon flag values obtained in
        -: 5727:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5728:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5729:// this function is also called from RunAllTests.  Since this function can be
        -: 5730:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 57%
        2: 5731:void UnitTestImpl::PostFlagParsingInit() {
        -: 5732:  // Ensures that this function does not execute more than once.
        2: 5733:  if (!post_flag_parse_init_performed_) {
        2: 5733-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5734:    post_flag_parse_init_performed_ = true;
        -: 5735:
        -: 5736:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5737:    // Register to send notifications about key process state changes.
        -: 5738:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5739:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5740:
        -: 5741:#ifdef GTEST_HAS_DEATH_TEST
        1: 5742:    InitDeathTestSubprocessControlInfo();
        1: 5742-block  0
call    0 returned 1
        1: 5743:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5744:#endif  // GTEST_HAS_DEATH_TEST
        -: 5745:
        -: 5746:    // Registers parameterized tests. This makes parameterized tests
        -: 5747:    // available to the UnitTest reflection API without running
        -: 5748:    // RUN_ALL_TESTS.
        1: 5749:    RegisterParameterizedTests();
call    0 returned 1
        -: 5750:
        -: 5751:    // Configures listeners for XML output. This makes it possible for users
        -: 5752:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5753:    ConfigureXmlOutput();
call    0 returned 1
        -: 5754:
        1: 5755:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5756:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5756-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 5756-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5756-block  2
call    8 never executed
        -: 5757:    }
        -: 5758:
        -: 5759:#if GTEST_CAN_STREAM_RESULTS_
        -: 5760:    // Configures listeners for streaming test results to the specified server.
        -: 5761:    ConfigureStreamingOutput();
        -: 5762:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5763:
        -: 5764:#ifdef GTEST_HAS_ABSL
        -: 5765:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5766:      absl::FailureSignalHandlerOptions options;
        -: 5767:      absl::InstallFailureSignalHandler(options);
        -: 5768:    }
        -: 5769:#endif  // GTEST_HAS_ABSL
        -: 5770:  }
        2: 5771:}
        2: 5771-block  0
        -: 5772:
        -: 5773:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5774:// exist, creates one and returns it.  It's the CALLER'S
        -: 5775:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5776:// TESTS ARE NOT SHUFFLED.
        -: 5777://
        -: 5778:// Arguments:
        -: 5779://
        -: 5780://   test_suite_name: name of the test suite
        -: 5781://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5782://                    this is not a typed or a type-parameterized test suite.
        -: 5783://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5784://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESD_ called 51 returned 100% blocks executed 60%
       51: 5785:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5786:    const std::string& test_suite_name, const char* type_param,
        -: 5787:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5788:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5789:  // During initialization, all TestInfos for a given suite are added in
        -: 5790:  // sequence. To optimize this case, see if the most recently added suite is
        -: 5791:  // the one being requested now.
      101: 5792:  if (!test_suites_.empty() &&
       51: 5792-block  0
call    0 returned 51
branch  1 taken 50 (fallthrough)
branch  2 taken 1
branch  3 taken 47 (fallthrough)
branch  4 taken 3
       47: 5792-block  1
        4: 5792-block  2
      101: 5793:      (*test_suites_.rbegin())->name_ == test_suite_name) {
       50: 5793-block  0
call    0 returned 50
call    1 returned 50
call    2 returned 50
       51: 5793-block  1
branch  3 taken 47 (fallthrough)
branch  4 taken 4
       47: 5794:    return *test_suites_.rbegin();
       47: 5794-block  0
call    0 returned 47
call    1 returned 47
       47: 5794-block  1
        -: 5795:  }
        -: 5796:
        -: 5797:  // Fall back to searching the collection.
        4: 5798:  auto item_it = test_suites_by_name_.find(test_suite_name);
        4: 5798-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5799:  if (item_it != test_suites_by_name_.end()) {
        4: 5799-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####: 5800:    return item_it->second;
    %%%%%: 5800-block  0
call    0 never executed
        -: 5801:  }
        -: 5802:
        -: 5803:  // Not found. Create a new instance.
        -: 5804:  auto* const new_test_suite =
        4: 5805:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        4: 5805-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5805-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5805-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5805-block  3
call    8 never executed
        4: 5806:  test_suites_by_name_.emplace(test_suite_name, new_test_suite);
        4: 5806-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5806-block  1
    $$$$$: 5806-block  2
        -: 5807:
        4: 5808:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        4: 5808-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5808-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 5808-block  2
call    6 returned 4
    $$$$$: 5808-block  3
call    7 never executed
    $$$$$: 5808-block  4
    $$$$$: 5808-block  5
        -: 5809:  // Is this a death test suite?
        4: 5810:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5810-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 4
        -: 5811:    // Yes.  Inserts the test suite after the last death test suite
        -: 5812:    // defined so far.  This only works when the test suites haven't
        -: 5813:    // been shuffled.  Otherwise we may end up running a death test
        -: 5814:    // after a non-death test.
    #####: 5815:    ++last_death_test_suite_;
    #####: 5816:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    %%%%%: 5816-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5816-block  1
    $$$$$: 5816-block  2
    $$$$$: 5816-block  3
    $$$$$: 5816-block  4
        -: 5817:                        new_test_suite);
        -: 5818:  } else {
        -: 5819:    // No.  Appends to the end of the list.
        4: 5820:    test_suites_.push_back(new_test_suite);
        4: 5820-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 5821:  }
        -: 5822:
        4: 5823:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        4: 5823-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5823-block  1
        4: 5824:  return new_test_suite;
        4: 5825:}
        4: 5825-block  0
call    0 returned 4
    $$$$$: 5825-block  1
call    1 never executed
        -: 5826:
        -: 5827:// Helpers for setting up / tearing down the given environment.  They
        -: 5828:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5829:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5829-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5830:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5830-block  0
call    0 never executed
        -: 5831:
        -: 5832:// Runs all tests in this UnitTest object, prints the result, and
        -: 5833:// returns true if all tests are successful.  If any exception is
        -: 5834:// thrown during a test, the test is considered to be failed, but the
        -: 5835:// rest of the tests will still be run.
        -: 5836://
        -: 5837:// When parameterized tests are enabled, it expands and registers
        -: 5838:// parameterized tests first in RegisterParameterizedTests().
        -: 5839:// All other functions called from RunAllTests() may safely assume that
        -: 5840:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 52%
        1: 5841:bool UnitTestImpl::RunAllTests() {
        -: 5842:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5843:  // called.
        1: 5844:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5844-block  0
call    0 returned 1
        -: 5845:
        -: 5846:  // Do not run any test if the --help flag was specified.
       1*: 5847:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5847-block  0
        -: 5848:
        -: 5849:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5850:  // user didn't call InitGoogleTest.
        1: 5851:  PostFlagParsingInit();
        1: 5851-block  0
call    0 returned 1
        -: 5852:
        -: 5853:#if GTEST_HAS_FILE_SYSTEM
        -: 5854:  // Even if sharding is not on, test runners may want to use the
        -: 5855:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5856:  // protocol.
        1: 5857:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5858:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5859:
        -: 5860:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5861:  // death test.
        1: 5862:  bool in_subprocess_for_death_test = false;
        -: 5863:
        -: 5864:#ifdef GTEST_HAS_DEATH_TEST
        1: 5865:  in_subprocess_for_death_test = (internal_run_death_test_flag_ != nullptr);
call    0 returned 1
        -: 5866:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5867:  if (in_subprocess_for_death_test) {
        -: 5868:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5869:  }
        -: 5870:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5871:#endif  // GTEST_HAS_DEATH_TEST
        -: 5872:
        1: 5873:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5874:                                        in_subprocess_for_death_test);
        -: 5875:
        -: 5876:  // Compares the full test names with the filter to decide which
        -: 5877:  // tests to run.
        -: 5878:  const bool has_tests_to_run =
       1*: 5879:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5879-block  0
        1: 5879-block  1
        1: 5879-block  2
call    2 returned 1
        1: 5880:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5881:
        -: 5882:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5883:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5884:    // This must be called *after* FilterTests() has been called.
    #####: 5885:    ListTestsMatchingFilter();
    %%%%%: 5885-block  0
call    0 never executed
    #####: 5886:    return true;
        -: 5887:  }
        -: 5888:
        1: 5889:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5889-block  0
call    0 returned 1
        -: 5890:
        -: 5891:  // True if and only if at least one test has failed.
        1: 5892:  bool failed = false;
        -: 5893:
        1: 5894:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5895:
        1: 5896:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5897:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5898:
        -: 5899:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5900:  // when we are inside the subprocess of a death test.
       1*: 5901:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5901-block  0
        1: 5901-block  1
        -: 5902:
        -: 5903:  // Repeats forever if the repeat count is negative.
        1: 5904:  const bool gtest_repeat_forever = repeat < 0;
        -: 5905:
        -: 5906:  // Should test environments be set up and torn down for each repeat, or only
        -: 5907:  // set up on the first and torn down on the last iteration? If there is no
        -: 5908:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5909:  // environments to avoid leaks in case one of the environments is using
        -: 5910:  // resources that are external to this process. Without this check there would
        -: 5911:  // be no way to clean up those external resources automatically.
        1: 5912:  const bool recreate_environments_when_repeating =
       1*: 5913:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5913-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5913-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5913-block  2
        1: 5913-block  3
        -: 5914:      gtest_repeat_forever;
        -: 5915:
        2: 5916:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5916-block  0
        1: 5916-block  1
        2: 5916-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2: 5916-block  3
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -: 5917:    // We want to preserve failures generated by ad-hoc test
        -: 5918:    // assertions executed before RUN_ALL_TESTS().
        1: 5919:    ClearNonAdHocTestResult();
        1: 5919-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5920:
        1: 5921:    Timer timer;
        1: 5921-block  0
call    0 returned 1
        -: 5922:
        -: 5923:    // Shuffles test suites and tests if requested.
        1: 5924:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5924-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5925:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5925-block  0
call    0 never executed
call    1 never executed
        -: 5926:      // This should be done before calling OnTestIterationStart(),
        -: 5927:      // such that a test event listener can see the actual test order
        -: 5928:      // in the event.
    #####: 5929:      ShuffleTests();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5930:    }
        -: 5931:
        -: 5932:    // Tells the unit test event listeners that the tests are about to start.
        1: 5933:    repeater->OnTestIterationStart(*parent_, i);
        1: 5933-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5934:
        -: 5935:    // Runs each test suite if there is at least one test to run.
        1: 5936:    if (has_tests_to_run) {
        1: 5936-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5937:      // Sets up all environments beforehand. If test environments aren't
        -: 5938:      // recreated for each iteration, only do so on the first iteration.
       1*: 5939:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5939-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5939-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        1: 5940:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5940-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5941:        ForEach(environments_, SetUpEnvironment);
        1: 5941-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5942:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5942-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5943:      }
        -: 5944:
        -: 5945:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5946:      // during global set-up.
        1: 5947:      if (Test::IsSkipped()) {
        1: 5947-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5947-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5948:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5949:        // emitted by default.
        -: 5950:        TestResult& test_result =
    #####: 5951:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5951-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5951-block  1
call    3 never executed
    #####: 5952:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5952-block  0
    %%%%%: 5952-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 5953:          const TestPartResult& test_part_result =
    #####: 5954:              test_result.GetTestPartResult(j);
    %%%%%: 5954-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5955:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5955-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 5956:            const std::string& result = test_part_result.message();
    %%%%%: 5956-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 5956-block  1
call    4 never executed
    $$$$$: 5956-block  2
    #####: 5957:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 5958:          }
    %%%%%: 5958-block  0
call    0 never executed
    $$$$$: 5958-block  1
call    1 never executed
        -: 5959:        }
    #####: 5960:        fflush(stdout);
    %%%%%: 5960-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5960-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        1: 5961:      } else if (!Test::HasFatalFailure()) {
        1: 5961-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5961-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        5: 5962:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5962-block  0
        4: 5962-block  1
        5: 5962-block  2
call    0 returned 5
branch  1 taken 4
branch  2 taken 1 (fallthrough)
        -: 5963:             test_index++) {
        4: 5964:          GetMutableSuiteCase(test_index)->Run();
        4: 5964-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5964-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
       4*: 5965:          if (GTEST_FLAG_GET(fail_fast) &&
        4: 5965-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 5965-block  1
        4: 5965-block  2
        4: 5965-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####: 5966:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5966-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5966-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5966-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 5967:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5967-block  0
    %%%%%: 5967-block  1
    %%%%%: 5967-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 5968:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5968-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5968-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5969:            }
    #####: 5970:            break;
    %%%%%: 5970-block  0
        -: 5971:          }
        -: 5972:        }
    #####: 5973:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5973-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5973-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 5974:        // If there was a fatal failure during the global setup then we know we
        -: 5975:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5976:        // skipped to make this obvious in the output.
    #####: 5977:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5977-block  0
    %%%%%: 5977-block  1
    %%%%%: 5977-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 5978:             test_index++) {
    #####: 5979:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5979-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5979-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5980:        }
        -: 5981:      }
        -: 5982:
        -: 5983:      // Tears down all environments in reverse order afterwards. If test
        -: 5984:      // environments aren't recreated for each iteration, only do so on the
        -: 5985:      // last iteration.
       1*: 5986:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5986-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5986-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        1: 5987:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5987-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5988:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5988-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5988-block  1
    $$$$$: 5988-block  2
        -: 5989:                      TearDownEnvironment);
        1: 5990:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5990-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5991:      }
        -: 5992:    }
        -: 5993:
        1: 5994:    elapsed_time_ = timer.Elapsed();
        1: 5994-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5995:
        -: 5996:    // Tells the unit test event listener that the tests have just finished.
        1: 5997:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5997-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5998:
        -: 5999:    // Gets the result and clears it.
        1: 6000:    if (!Passed()) {
        1: 6000-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6000-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 6001:      failed = true;
    %%%%%: 6001-block  0
        -: 6002:    }
        -: 6003:
        -: 6004:    // Restores the original test order after the iteration.  This
        -: 6005:    // allows the user to quickly repro a failure that happens in the
        -: 6006:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 6007:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 6008:    // case the user somehow changes the value of the flag somewhere
        -: 6009:    // (it's always safe to unshuffle the tests).
        1: 6010:    UnshuffleTests();
        1: 6010-block  0
call    0 returned 1
        -: 6011:
        1: 6012:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6013:      // Picks a new random seed for each iteration.
    #####: 6014:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 6014-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6014-block  1
        -: 6015:    }
        -: 6016:  }
        -: 6017:
        1: 6018:  repeater->OnTestProgramEnd(*parent_);
        1: 6018-block  0
call    0 returned 1
        -: 6019:  // Destroy environments in normal code, not in static teardown.
        1: 6020:  bool delete_environment_on_teardown = true;
        1: 6021:  if (delete_environment_on_teardown) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6022:    ForEach(environments_, internal::Delete<Environment>);
        1: 6022-block  0
call    0 returned 1
        1: 6023:    environments_.clear();
call    0 returned 1
        -: 6024:  }
        -: 6025:
        1: 6026:  if (!gtest_is_initialized_before_run_all_tests) {
        1: 6026-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6027:    ColoredPrintf(
    %%%%%: 6027-block  0
call    0 never executed
        -: 6028:        GTestColor::kRed,
        -: 6029:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 6030:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 6031:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 6032:        " will start to enforce the valid usage. "
        -: 6033:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 6034:  }
        -: 6035:
        1: 6036:  return !failed;
        1: 6036-block  0
        -: 6037:}
        -: 6038:
        -: 6039:#if GTEST_HAS_FILE_SYSTEM
        -: 6040:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 6041:// if the variable is present. If a file already exists at this location, this
        -: 6042:// function will write over it. If the variable is present, but the file cannot
        -: 6043:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 30%
        1: 6044:void WriteToShardStatusFileIfNeeded() {
        1: 6045:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 6045-block  0
call    0 returned 1
        1: 6046:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6047:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 6047-block  0
call    0 never executed
    #####: 6048:    if (file == nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6049:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 6049-block  0
call    0 never executed
        -: 6050:                    "Could not write to the test shard status file \"%s\" "
        -: 6051:                    "specified by the %s environment variable.\n",
        -: 6052:                    test_shard_file, kTestShardStatusFile);
    #####: 6053:      fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 6054:      exit(EXIT_FAILURE);
call    0 never executed
        -: 6055:    }
    #####: 6056:    fclose(file);
    %%%%%: 6056-block  0
call    0 never executed
        -: 6057:  }
        1: 6058:}
        -: 6059:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 6060:
        -: 6061:// Checks whether sharding is enabled by examining the relevant
        -: 6062:// environment variable values. If the variables are present,
        -: 6063:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 6064:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6065:// disabled because it must only be applied to the original test
        -: 6066:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 6067:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 6068:                 bool in_subprocess_for_death_test) {
        2: 6069:  if (in_subprocess_for_death_test) {
        2: 6069-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6070:    return false;
    %%%%%: 6070-block  0
        -: 6071:  }
        -: 6072:
        2: 6073:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6073-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6074:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6074-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6075:
        2: 6076:  if (total_shards == -1 && shard_index == -1) {
        2: 6076-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6076-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6077:    return false;
        2: 6077-block  0
    #####: 6078:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6078-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6078-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6079:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 6079-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6079-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6079-block  2
call    6 never executed
    $$$$$: 6079-block  3
call    7 never executed
    $$$$$: 6079-block  4
    #####: 6080:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 6080-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6080-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6080-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6081:                                  << ", but have left " << kTestTotalShards
    %%%%%: 6081-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6081-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6082:                                  << " unset.\n";
    %%%%%: 6082-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6082-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6083:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6083-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6083-block  1
call    7 never executed
    $$$$$: 6083-block  2
call    8 never executed
    $$$$$: 6083-block  3
    #####: 6084:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6084-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6085:    exit(EXIT_FAILURE);
    %%%%%: 6085-block  0
call    0 never executed
    #####: 6086:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6086-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6086-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6086-block  2
call    4 never executed
    #####: 6087:    const Message msg = Message()
    %%%%%: 6087-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6087-block  1
call    3 never executed
    $$$$$: 6087-block  2
call    4 never executed
    $$$$$: 6087-block  3
    #####: 6088:                        << "Invalid environment variables: you have "
    %%%%%: 6088-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6089:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 6089-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6089-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6089-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6090:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6090-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6090-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6090-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6090-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6091:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6091-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6091-block  1
call    7 never executed
    $$$$$: 6091-block  2
call    8 never executed
    $$$$$: 6091-block  3
    #####: 6092:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6092-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6093:    exit(EXIT_FAILURE);
    %%%%%: 6093-block  0
call    0 never executed
    #####: 6094:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6094-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6094-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6094-block  2
call    4 never executed
        -: 6095:    const Message msg =
    #####: 6096:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6096-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6096-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6096-block  2
call    6 never executed
    $$$$$: 6096-block  3
call    7 never executed
    $$$$$: 6096-block  4
    #####: 6097:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6097-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6097-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6097-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6098:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6098-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6098-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6098-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6098-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6099:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6099-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6099-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6099-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6099-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6099-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 6099-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    #####: 6100:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6100-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6100-block  1
call    7 never executed
    $$$$$: 6100-block  2
call    8 never executed
    $$$$$: 6100-block  3
    #####: 6101:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6101-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6102:    exit(EXIT_FAILURE);
    %%%%%: 6102-block  0
call    0 never executed
    =====: 6103:  }
    $$$$$: 6103-block  0
call    0 never executed
        -: 6104:
    #####: 6105:  return total_shards > 1;
    %%%%%: 6105-block  0
        -: 6106:}
        -: 6107:
        -: 6108:// Parses the environment variable var as an Int32. If it is unset,
        -: 6109:// returns default_val. If it is not an Int32, prints an error
        -: 6110:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6111:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6112:  const char* str_val = posix::GetEnv(var);
        4: 6112-block  0
call    0 returned 4
        4: 6113:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6114:    return default_val;
        4: 6114-block  0
        -: 6115:  }
        -: 6116:
        -: 6117:  int32_t result;
    #####: 6118:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6118-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6118-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6118-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6118-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6118-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 6118-block  5
call   15 never executed
    $$$$$: 6118-block  6
        -: 6119:                  str_val, &result)) {
    #####: 6120:    exit(EXIT_FAILURE);
    %%%%%: 6120-block  0
call    0 never executed
        -: 6121:  }
    #####: 6122:  return result;
    %%%%%: 6122-block  0
        -: 6123:}
        -: 6124:
        -: 6125:// Given the total number of shards, the shard index, and the test id,
        -: 6126:// returns true if and only if the test should be run on this shard. The test id
        -: 6127:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6128:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6129:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6130:  return (test_id % total_shards) == shard_index;
    %%%%%: 6130-block  0
        -: 6131:}
        -: 6132:
        -: 6133:// Compares the name of each test with the user-specified filter to
        -: 6134:// decide whether the test should be run, then records the result in
        -: 6135:// each TestSuite and TestInfo object.
        -: 6136:// If shard_tests == true, further filters tests based on sharding
        -: 6137:// variables in the environment - see
        -: 6138:// https://github.com/google/googletest/blob/main/docs/advanced.md
        -: 6139:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 68%
        1: 6140:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6141:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6142:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6142-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6142-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6142-block  2
        1: 6142-block  3
        1: 6143:                                   : -1;
        -: 6144:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6145:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6145-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6145-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6145-block  2
        1: 6145-block  3
        1: 6146:                                  : -1;
        -: 6147:
        -: 6148:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        1: 6149:      GTEST_FLAG_GET(filter));
        1: 6149-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6150:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6150-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6150-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6150-block  2
call    6 returned 1
    $$$$$: 6150-block  3
call    7 never executed
    $$$$$: 6150-block  4
    $$$$$: 6150-block  5
        -: 6151:  // num_runnable_tests are the number of tests that will
        -: 6152:  // run across all shards (i.e., match filter and are not disabled).
        -: 6153:  // num_selected_tests are the number of tests to be run on
        -: 6154:  // this shard.
        1: 6155:  int num_runnable_tests = 0;
        1: 6156:  int num_selected_tests = 0;
        5: 6157:  for (auto* test_suite : test_suites_) {
call    0 returned 1
call    1 returned 1
        4: 6157-block  0
call    2 returned 4
        4: 6157-block  1
call    3 returned 4
        5: 6157-block  2
call    4 returned 5
branch  5 taken 4
branch  6 taken 1 (fallthrough)
        4: 6158:    const std::string& test_suite_name = test_suite->name_;
        4: 6159:    test_suite->set_should_run(false);
call    0 returned 4
        -: 6160:
       55: 6161:    for (TestInfo* test_info : test_suite->test_info_list()) {
call    0 returned 4
call    1 returned 4
call    2 returned 4
       51: 6161-block  0
call    3 returned 51
call    4 returned 51
       55: 6161-block  1
call    5 returned 55
branch  6 taken 51
branch  7 taken 4 (fallthrough)
       51: 6162:      const std::string& test_name = test_info->name_;
        -: 6163:      // A test is disabled if test suite name or test name matches
        -: 6164:      // kDisableTestFilter.
        -: 6165:      const bool is_disabled =
     102*: 6166:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 6166-block  0
branch  3 taken 51 (fallthrough)
branch  4 taken 0
    %%%%%: 6166-block  1
       51: 6166-block  2
       51: 6167:          disable_test_filter.MatchesName(test_name);
       51: 6167-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 6167-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 51
       51: 6168:      test_info->is_disabled_ = is_disabled;
        -: 6169:
        -: 6170:      const bool matches_filter =
       51: 6171:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
       51: 6171-block  0
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51: 6172:      test_info->matches_filter_ = matches_filter;
        -: 6173:
       51: 6174:      const bool is_runnable =
      51*: 6175:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
       51: 6175-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51: 6175-block  1
branch  2 taken 51 (fallthrough)
branch  3 taken 0
       51: 6175-block  2
branch  4 taken 51 (fallthrough)
branch  5 taken 0
       51: 6175-block  3
    %%%%%: 6175-block  4
        -: 6176:          matches_filter;
        -: 6177:
        -: 6178:      const bool is_in_another_shard =
      51*: 6179:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       51: 6179-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 51
    %%%%%: 6179-block  1
       51: 6179-block  2
    #####: 6180:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6180-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
       51: 6181:      test_info->is_in_another_shard_ = is_in_another_shard;
      51*: 6182:      const bool is_selected = is_runnable && !is_in_another_shard;
       51: 6182-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51: 6182-block  1
branch  2 taken 51 (fallthrough)
branch  3 taken 0
       51: 6182-block  2
    %%%%%: 6182-block  3
        -: 6183:
       51: 6184:      num_runnable_tests += is_runnable;
       51: 6185:      num_selected_tests += is_selected;
        -: 6186:
       51: 6187:      test_info->should_run_ = is_selected;
      51*: 6188:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       51: 6188-block  0
call    0 returned 51
branch  1 taken 4 (fallthrough)
branch  2 taken 47
        4: 6188-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 0
       51: 6188-block  2
    %%%%%: 6188-block  3
       51: 6188-block  4
call    5 returned 51
        -: 6189:    }
        -: 6190:  }
        1: 6191:  return num_selected_tests;
        1: 6191-block  0
        1: 6192:}
        1: 6192-block  0
call    0 returned 1
call    1 returned 1
    $$$$$: 6192-block  1
call    2 never executed
    $$$$$: 6192-block  2
call    3 never executed
        -: 6193:
        -: 6194:// Prints the given C-string on a single line by replacing all '\n'
        -: 6195:// characters with string "\\n".  If the output takes more than
        -: 6196:// max_length characters, only prints the first max_length characters
        -: 6197:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6198:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6199:  if (str != nullptr) {
    %%%%%: 6199-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6200:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6200-block  0
    %%%%%: 6200-block  1
    %%%%%: 6200-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6201:      if (i >= max_length) {
    %%%%%: 6201-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6202:        printf("...");
    %%%%%: 6202-block  0
call    0 never executed
    #####: 6203:        break;
        -: 6204:      }
    #####: 6205:      if (*str == '\n') {
    %%%%%: 6205-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6206:        printf("\\n");
    %%%%%: 6206-block  0
call    0 never executed
    #####: 6207:        i += 2;
        -: 6208:      } else {
    #####: 6209:        printf("%c", *str);
    %%%%%: 6209-block  0
call    0 never executed
    #####: 6210:        ++i;
        -: 6211:      }
        -: 6212:    }
        -: 6213:  }
    #####: 6214:}
        -: 6215:
        -: 6216:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6217:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6218:  // Print at most this many characters for each type/value parameter.
    #####: 6219:  const int kMaxParamLength = 250;
        -: 6220:
    #####: 6221:  for (auto* test_suite : test_suites_) {
    %%%%%: 6221-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6221-block  1
call    2 never executed
    %%%%%: 6221-block  2
call    3 never executed
    %%%%%: 6221-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6222:    bool printed_test_suite_name = false;
        -: 6223:
    #####: 6224:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6224-block  0
    %%%%%: 6224-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6225:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6225-block  0
call    0 never executed
call    1 never executed
    #####: 6226:      if (test_info->matches_filter_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6227:        if (!printed_test_suite_name) {
    %%%%%: 6227-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6228:          printed_test_suite_name = true;
    #####: 6229:          printf("%s.", test_suite->name());
    %%%%%: 6229-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6230:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6230-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6231:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6232:            // We print the type parameter on a single line to make
        -: 6233:            // the output easy to parse by a program.
    #####: 6234:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6234-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6235:          }
    #####: 6236:          printf("\n");
    %%%%%: 6236-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6237:        }
    #####: 6238:        printf("  %s", test_info->name());
    %%%%%: 6238-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6239:        if (test_info->value_param() != nullptr) {
    %%%%%: 6239-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6240:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6240-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6241:          // We print the value parameter on a single line to make the
        -: 6242:          // output easy to parse by a program.
    #####: 6243:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6243-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6244:        }
    #####: 6245:        printf("\n");
    %%%%%: 6245-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6246:      }
        -: 6247:    }
        -: 6248:  }
    #####: 6249:  fflush(stdout);
    %%%%%: 6249-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6249-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 6250:#if GTEST_HAS_FILE_SYSTEM
    #####: 6251:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6251-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6252:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6252-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6252-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6252-block  2
    %%%%%: 6252-block  3
    %%%%%: 6252-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 6253:    FILE* fileout =
    #####: 6254:        OpenFileForWriting(UnitTestOptions::GetAbsolutePathToOutputFile());
    %%%%%: 6254-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6254-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6254-block  2
call    6 never executed
    $$$$$: 6254-block  3
call    7 never executed
    $$$$$: 6254-block  4
    #####: 6255:    std::stringstream stream;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6256:    if (output_format == "xml") {
    %%%%%: 6256-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6257:      XmlUnitTestResultPrinter(
    %%%%%: 6257-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6257-block  1
call    4 never executed
    $$$$$: 6257-block  2
call    5 never executed
    $$$$$: 6257-block  3
    #####: 6258:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6258-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6258-block  1
call    4 never executed
    $$$$$: 6258-block  2
    #####: 6259:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6260:    } else if (output_format == "json") {
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6261:      JsonUnitTestResultPrinter(
    %%%%%: 6261-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6261-block  1
call    4 never executed
    $$$$$: 6261-block  2
call    5 never executed
    $$$$$: 6261-block  3
    #####: 6262:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6262-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6262-block  1
call    4 never executed
    $$$$$: 6262-block  2
    #####: 6263:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6263-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6264:    }
    #####: 6265:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6265-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6265-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 6265-block  2
    #####: 6266:    fclose(fileout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6267:  }
    %%%%%: 6267-block  0
call    0 never executed
    $$$$$: 6267-block  1
call    1 never executed
        -: 6268:#endif  // GTEST_HAS_FILE_SYSTEM
    #####: 6269:}
    %%%%%: 6269-block  0
call    0 never executed
    $$$$$: 6269-block  1
call    1 never executed
        -: 6270:
        -: 6271:// Sets the OS stack trace getter.
        -: 6272://
        -: 6273:// Does nothing if the input and the current OS stack trace getter are
        -: 6274:// the same; otherwise, deletes the old getter and makes the input the
        -: 6275:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6276:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6277:    OsStackTraceGetterInterface* getter) {
    #####: 6278:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6278-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6279:    delete os_stack_trace_getter_;
    %%%%%: 6279-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6279-block  1
call    2 never executed
    #####: 6280:    os_stack_trace_getter_ = getter;
    %%%%%: 6280-block  0
        -: 6281:  }
    #####: 6282:}
        -: 6283:
        -: 6284:// Returns the current OS stack trace getter if it is not NULL;
        -: 6285:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6286:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 263 returned 100% blocks executed 100%
      263: 6287:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
      263: 6288:  if (os_stack_trace_getter_ == nullptr) {
      263: 6288-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 262
        -: 6289:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6290:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6291:#else
        1: 6292:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6292-block  0
call    0 returned 1
call    1 returned 1
        -: 6293:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6294:  }
        -: 6295:
      263: 6296:  return os_stack_trace_getter_;
      263: 6296-block  0
        -: 6297:}
        -: 6298:
        -: 6299:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 206 returned 100% blocks executed 83%
      206: 6300:TestResult* UnitTestImpl::current_test_result() {
      206: 6301:  if (current_test_info_ != nullptr) {
      206: 6301-block  0
branch  0 taken 204 (fallthrough)
branch  1 taken 2
      204: 6302:    return &current_test_info_->result_;
      204: 6302-block  0
        -: 6303:  }
        2: 6304:  if (current_test_suite_ != nullptr) {
        2: 6304-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6305:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6305-block  0
        -: 6306:  }
        2: 6307:  return &ad_hoc_test_result_;
        2: 6307-block  0
        -: 6308:}
        -: 6309:
        -: 6310:// Shuffles all test suites, and the tests within each test suite,
        -: 6311:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6312:void UnitTestImpl::ShuffleTests() {
        -: 6313:  // Shuffles the death test suites.
    #####: 6314:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6314-block  0
call    0 never executed
call    1 never executed
        -: 6315:
        -: 6316:  // Shuffles the non-death test suites.
    #####: 6317:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6318:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6319:
        -: 6320:  // Shuffles the tests inside each test suite.
    #####: 6321:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6321-block  0
call    2 never executed
    %%%%%: 6321-block  1
call    3 never executed
    %%%%%: 6321-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6322:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6323:  }
    #####: 6324:}
    %%%%%: 6324-block  0
        -: 6325:
        -: 6326:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6327:void UnitTestImpl::UnshuffleTests() {
        5: 6328:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6328-block  0
        5: 6328-block  1
call    0 returned 5
branch  1 taken 4
branch  2 taken 1 (fallthrough)
        -: 6329:    // Unshuffles the tests in each test suite.
        4: 6330:    test_suites_[i]->UnshuffleTests();
        4: 6330-block  0
call    0 returned 4
call    1 returned 4
        -: 6331:    // Resets the index of each test suite.
        4: 6332:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 4
        -: 6333:  }
        1: 6334:}
        -: 6335:
        -: 6336:// Returns the current OS stack trace as an std::string.
        -: 6337://
        -: 6338:// The maximum number of stack frames to be included is specified by
        -: 6339:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6340:// specifies the number of top frames to be skipped, which doesn't
        -: 6341:// count against the number of frames to be included.
        -: 6342://
        -: 6343:// For example, if Foo() calls Bar(), which in turn calls
        -: 6344:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6345:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6346:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 6347:GetCurrentOsStackTraceExceptTop(int skip_count) {
        -: 6348:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6349:  // to what the user really wants to skip.
    #####: 6350:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6350-block  0
call    0 never executed
call    1 never executed
        -: 6351:}
        -: 6352:
        -: 6353:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6354:// suppress unreachable code warnings.
        -: 6355:namespace {
        -: 6356:class ClassUniqueToAlwaysTrue {};
        -: 6357:}  // namespace
        -: 6358:
function _ZN7testing8internal6IsTrueEb called 369 returned 100% blocks executed 100%
      369: 6359:bool IsTrue(bool condition) { return condition; }
      369: 6359-block  0
        -: 6360:
function _ZN7testing8internal10AlwaysTrueEv called 266 returned 100% blocks executed 67%
      266: 6361:bool AlwaysTrue() {
        -: 6362:#if GTEST_HAS_EXCEPTIONS
        -: 6363:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6364:  // but it makes the compiler think that it may throw.
     266*: 6365:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
      266: 6365-block  0
call    0 returned 266
branch  1 taken 0 (fallthrough)
branch  2 taken 266
    %%%%%: 6365-block  1
call    3 never executed
call    4 never executed
        -: 6366:#endif  // GTEST_HAS_EXCEPTIONS
      266: 6367:  return true;
      266: 6367-block  0
        -: 6368:}
        -: 6369:
        -: 6370:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6371:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6372:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6373:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6374:  const size_t prefix_len = strlen(prefix);
    #####: 6375:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6375-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6376:    *pstr += prefix_len;
    #####: 6377:    return true;
    %%%%%: 6377-block  0
        -: 6378:  }
    #####: 6379:  return false;
    %%%%%: 6379-block  0
        -: 6380:}
        -: 6381:
        -: 6382:// Parses a string as a command line flag.  The string should have
        -: 6383:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6384:// part can be omitted.
        -: 6385://
        -: 6386:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 62%
        4: 6387:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6388:                                  bool def_optional) {
        -: 6389:  // str and flag must not be NULL.
       4*: 6390:  if (str == nullptr || flag_name == nullptr) return nullptr;
        4: 6390-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6390-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 6390-block  2
        -: 6391:
        -: 6392:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6393:  const std::string flag_str =
        4: 6394:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
        4: 6394-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6394-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 6394-block  2
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4: 6394-block  3
call    9 returned 4
call   10 returned 4
    $$$$$: 6394-block  4
call   11 never executed
    $$$$$: 6394-block  5
call   12 never executed
    $$$$$: 6394-block  6
    $$$$$: 6394-block  7
    $$$$$: 6394-block  8
        4: 6395:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 6396:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6396-block  0
        -: 6397:
        -: 6398:  // Skips the flag name.
        1: 6399:  const char* flag_end = str + flag_len;
        -: 6400:
        -: 6401:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6402:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6402-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6402-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6403:    return flag_end;
    %%%%%: 6403-block  0
        -: 6404:  }
        -: 6405:
        -: 6406:  // If def_optional is true and there are more characters after the
        -: 6407:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6408:  // the flag name.
       1*: 6409:  if (flag_end[0] != '=') return nullptr;
        1: 6409-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6409-block  1
        -: 6410:
        -: 6411:  // Returns the string after "=".
        1: 6412:  return flag_end + 1;
        1: 6412-block  0
        4: 6413:}
        4: 6413-block  0
call    0 returned 4
        -: 6414:
        -: 6415:// Parses a string for a bool flag, in the form of either
        -: 6416:// "--flag=value" or "--flag".
        -: 6417://
        -: 6418:// In the former case, the value is taken as true as long as it does
        -: 6419:// not start with '0', 'f', or 'F'.
        -: 6420://
        -: 6421:// In the latter case, the value is taken as true.
        -: 6422://
        -: 6423:// On success, stores the value of the flag in *value, and returns
        -: 6424:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 6425:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6426:  // Gets the value of the flag as a string.
        3: 6427:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        3: 6427-block  0
call    0 returned 3
        -: 6428:
        -: 6429:  // Aborts if the parsing failed.
        3: 6430:  if (value_str == nullptr) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6430-block  0
        -: 6431:
        -: 6432:  // Converts the string value to a bool.
    #####: 6433:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6433-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6433-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6433-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6433-block  3
    %%%%%: 6433-block  4
    #####: 6434:  return true;
    %%%%%: 6434-block  0
        -: 6435:}
        -: 6436:
        -: 6437:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6438://
        -: 6439:// On success, stores the value of the flag in *value, and returns
        -: 6440:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6441:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6442:  // Gets the value of the flag as a string.
    #####: 6443:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6443-block  0
call    0 never executed
        -: 6444:
        -: 6445:  // Aborts if the parsing failed.
    #####: 6446:  if (value_str == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6446-block  0
        -: 6447:
        -: 6448:  // Sets *value to the value of the flag.
    #####: 6449:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6449-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6449-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6449-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6449-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6449-block  4
call   12 never executed
    $$$$$: 6449-block  5
call   13 never executed
    #####: 6450:                    value);
    %%%%%: 6450-block  0
        -: 6451:}
        -: 6452:
        -: 6453:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6454://
        -: 6455:// On success, stores the value of the flag in *value, and returns
        -: 6456:// true.  On failure, returns false without changing *value.
        -: 6457:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 6458:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6459:  // Gets the value of the flag as a string.
        1: 6460:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        1: 6460-block  0
call    0 returned 1
        -: 6461:
        -: 6462:  // Aborts if the parsing failed.
       1*: 6463:  if (value_str == nullptr) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6463-block  0
        -: 6464:
        -: 6465:  // Sets *value to the value of the flag.
        1: 6466:  *value = value_str;
        1: 6466-block  0
call    0 returned 1
        1: 6467:  return true;
        -: 6468:}
        -: 6469:
        -: 6470:// Determines whether a string has a prefix that Google Test uses for its
        -: 6471:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6472:// If Google Test detects that a command line flag has its prefix but is not
        -: 6473:// recognized, it will print its help message. Flags starting with
        -: 6474:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6475:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6476:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6477:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6477-block  0
call    0 never executed
    %%%%%: 6477-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 6478:          SkipPrefix("/", &str)) &&
    %%%%%: 6478-block  0
call    0 never executed
    #####: 6479:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6479-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6479-block  1
    %%%%%: 6479-block  2
    #####: 6480:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6480-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6481:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6481-block  0
call    0 never executed
    %%%%%: 6481-block  1
        -: 6482:}
        -: 6483:
        -: 6484:// Prints a string containing code-encoded text.  The following escape
        -: 6485:// sequences can be used in the string to control the text color:
        -: 6486://
        -: 6487://   @@    prints a single '@' character.
        -: 6488://   @R    changes the color to red.
        -: 6489://   @G    changes the color to green.
        -: 6490://   @Y    changes the color to yellow.
        -: 6491://   @D    changes to the default terminal text color.
        -: 6492://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6493:static void PrintColorEncoded(const char* str) {
    #####: 6494:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6494-block  0
        -: 6495:
        -: 6496:  // Conceptually, we split the string into segments divided by escape
        -: 6497:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6498:  // each iteration, the str pointer advances to the beginning of the
        -: 6499:  // next segment.
        -: 6500:  for (;;) {
    #####: 6501:    const char* p = strchr(str, '@');
    #####: 6502:    if (p == nullptr) {
    %%%%%: 6502-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6503:      ColoredPrintf(color, "%s", str);
    %%%%%: 6503-block  0
call    0 never executed
    #####: 6504:      return;
    %%%%%: 6504-block  0
        -: 6505:    }
        -: 6506:
    #####: 6507:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6507-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6507-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6507-block  2
call    7 never executed
    $$$$$: 6507-block  3
call    8 never executed
    $$$$$: 6507-block  4
        -: 6508:
    #####: 6509:    const char ch = p[1];
    #####: 6510:    str = p + 2;
    #####: 6511:    if (ch == '@') {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6512:      ColoredPrintf(color, "@");
    %%%%%: 6512-block  0
call    0 never executed
    #####: 6513:    } else if (ch == 'D') {
    %%%%%: 6513-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6514:      color = GTestColor::kDefault;
    %%%%%: 6514-block  0
    #####: 6515:    } else if (ch == 'R') {
    %%%%%: 6515-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6516:      color = GTestColor::kRed;
    %%%%%: 6516-block  0
    #####: 6517:    } else if (ch == 'G') {
    %%%%%: 6517-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6518:      color = GTestColor::kGreen;
    %%%%%: 6518-block  0
    #####: 6519:    } else if (ch == 'Y') {
    %%%%%: 6519-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6520:      color = GTestColor::kYellow;
    %%%%%: 6520-block  0
        -: 6521:    } else {
    #####: 6522:      --str;
    %%%%%: 6522-block  0
        -: 6523:    }
    #####: 6524:  }
    %%%%%: 6524-block  0
        -: 6525:}
        -: 6526:
        -: 6527:static const char kColorEncodedHelpMessage[] =
        -: 6528:    "This program contains tests written using " GTEST_NAME_
        -: 6529:    ". You can use the\n"
        -: 6530:    "following command line flags to control its behavior:\n"
        -: 6531:    "\n"
        -: 6532:    "Test Selection:\n"
        -: 6533:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6534:    "list_tests@D\n"
        -: 6535:    "      List the names of all tests instead of running them. The name of\n"
        -: 6536:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6537:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6538:    "filter=@YPOSITIVE_PATTERNS"
        -: 6539:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6540:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6541:    "but\n"
        -: 6542:    "      none of the negative patterns. '?' matches any single character; "
        -: 6543:    "'*'\n"
        -: 6544:    "      matches any substring; ':' separates two patterns.\n"
        -: 6545:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6546:    "also_run_disabled_tests@D\n"
        -: 6547:    "      Run all disabled tests too.\n"
        -: 6548:    "\n"
        -: 6549:    "Test Execution:\n"
        -: 6550:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6551:    "repeat=@Y[COUNT]@D\n"
        -: 6552:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6553:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6554:    "shuffle@D\n"
        -: 6555:    "      Randomize tests' orders on every iteration.\n"
        -: 6556:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6557:    "random_seed=@Y[NUMBER]@D\n"
        -: 6558:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6559:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6560:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6561:    "recreate_environments_when_repeating@D\n"
        -: 6562:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6563:    "      of the test.\n"
        -: 6564:    "\n"
        -: 6565:    "Test Output:\n"
        -: 6566:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6567:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6568:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6569:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6570:    "brief=1@D\n"
        -: 6571:    "      Only print test failures.\n"
        -: 6572:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6573:    "print_time=0@D\n"
        -: 6574:    "      Don't print the elapsed time of each test.\n"
        -: 6575:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6576:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6577:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6578:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6579:    "given\n"
        -: 6580:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6581:#if GTEST_CAN_STREAM_RESULTS_
        -: 6582:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6583:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6584:    "      Stream test results to the given server.\n"
        -: 6585:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6586:    "\n"
        -: 6587:    "Assertion Behavior:\n"
        -: 6588:#if defined(GTEST_HAS_DEATH_TEST) && !defined(GTEST_OS_WINDOWS)
        -: 6589:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6590:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6591:    "      Set the default death test style.\n"
        -: 6592:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6593:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6594:    "break_on_failure@D\n"
        -: 6595:    "      Turn assertion failures into debugger break-points.\n"
        -: 6596:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6597:    "throw_on_failure@D\n"
        -: 6598:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6599:    "      test framework.\n"
        -: 6600:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6601:    "catch_exceptions=0@D\n"
        -: 6602:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6603:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6604:    "\n"
        -: 6605:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6606:    "list_tests@D, you can alternatively set "
        -: 6607:    "the corresponding\n"
        -: 6608:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6609:    "to\n"
        -: 6610:    "disable colored text output, you can either specify "
        -: 6611:    "@G--" GTEST_FLAG_PREFIX_
        -: 6612:    "color=no@D or set\n"
        -: 6613:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6614:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6615:    "\n"
        -: 6616:    "For more information, please read the " GTEST_NAME_
        -: 6617:    " documentation at\n"
        -: 6618:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6619:    "\n"
        -: 6620:    "(not one in your own code or tests), please report it to\n"
        -: 6621:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6622:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 10%
        1: 6623:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6624:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6625:  do {                                        \
        -: 6626:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6627:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6628:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6629:      return true;                            \
        -: 6630:    }                                         \
        -: 6631:  } while (false)
        -: 6632:
       1*: 6633:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        1: 6633-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6633-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6633-block  2
    %%%%%: 6633-block  3
       1*: 6634:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        1: 6634-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6634-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6634-block  2
    %%%%%: 6634-block  3
       1*: 6635:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        1: 6635-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6635-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6635-block  2
    %%%%%: 6635-block  3
       1*: 6636:  GTEST_INTERNAL_PARSE_FLAG(color);
        1: 6636-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6636-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6636-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6636-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6636-block  4
    %%%%%: 6636-block  5
        1: 6636-block  6
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%: 6636-block  7
    $$$$$: 6636-block  8
call   14 never executed
    #####: 6637:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6637-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6637-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6637-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6637-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6637-block  4
    %%%%%: 6637-block  5
    %%%%%: 6637-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6637-block  7
    $$$$$: 6637-block  8
call   14 never executed
    #####: 6638:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6638-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6638-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6638-block  2
    %%%%%: 6638-block  3
    #####: 6639:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6639-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6639-block  2
    %%%%%: 6639-block  3
    #####: 6640:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6640-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6640-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6640-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6640-block  4
    %%%%%: 6640-block  5
    %%%%%: 6640-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6640-block  7
    $$$$$: 6640-block  8
call   14 never executed
    #####: 6641:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6641-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6641-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6641-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6641-block  4
    %%%%%: 6641-block  5
    %%%%%: 6641-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6641-block  7
    $$$$$: 6641-block  8
call   14 never executed
    #####: 6642:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6642-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6642-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6642-block  2
    %%%%%: 6642-block  3
    #####: 6643:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6643-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6643-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6643-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6643-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6643-block  4
    %%%%%: 6643-block  5
    %%%%%: 6643-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6643-block  7
    $$$$$: 6643-block  8
call   14 never executed
    #####: 6644:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6644-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6644-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6644-block  2
    %%%%%: 6644-block  3
    #####: 6645:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6645-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6645-block  2
    %%%%%: 6645-block  3
    #####: 6646:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6646-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6646-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6646-block  2
    %%%%%: 6646-block  3
    #####: 6647:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6647-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6647-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6647-block  2
    %%%%%: 6647-block  3
    #####: 6648:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6648-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6648-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6648-block  2
    %%%%%: 6648-block  3
    #####: 6649:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6649-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6649-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6649-block  2
    %%%%%: 6649-block  3
    #####: 6650:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6650-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6650-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6650-block  2
    %%%%%: 6650-block  3
    #####: 6651:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6651-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6651-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6651-block  2
    %%%%%: 6651-block  3
    #####: 6652:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6652-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6652-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6652-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6652-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6652-block  4
    %%%%%: 6652-block  5
    %%%%%: 6652-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6652-block  7
    $$$$$: 6652-block  8
call   14 never executed
    #####: 6653:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6653-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6653-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6653-block  2
    %%%%%: 6653-block  3
    #####: 6654:  return false;
    %%%%%: 6654-block  0
        -: 6655:}
        -: 6656:
        -: 6657:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6658:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6659:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6659-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6660:  if (!flagfile) {
    %%%%%: 6660-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6661:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6661-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6661-block  1
call    3 never executed
    %%%%%: 6661-block  2
call    4 never executed
    $$$$$: 6661-block  3
call    5 never executed
    $$$$$: 6661-block  4
    #####: 6662:                      << "\"";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6662-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6662-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 6663:  }
    #####: 6664:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6664-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6665:  posix::FClose(flagfile);
    %%%%%: 6665-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6666:  std::vector<std::string> lines;
    %%%%%: 6666-block  0
call    0 never executed
    #####: 6667:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6668:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6668-block  0
    %%%%%: 6668-block  1
    %%%%%: 6668-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 6669:    if (lines[i].empty()) continue;
    %%%%%: 6669-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6669-block  1
    #####: 6670:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6670-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6670-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6670-block  2
        -: 6671:  }
    #####: 6672:}
    %%%%%: 6672-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6672-block  1
call    2 never executed
    $$$$$: 6672-block  2
call    3 never executed
        -: 6673:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
        -: 6674:
        -: 6675:// Parses the command line for Google Test flags, without initializing
        -: 6676:// other parts of Google Test.  The type parameter CharType can be
        -: 6677:// instantiated to either char or wchar_t.
        -: 6678:template <typename CharType>
       1*: 6679:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       1*: 6680:  std::string flagfile_value;
       2*: 6681:  for (int i = 1; i < *argc; i++) {
       1*: 6682:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6683:    const char* const arg = arg_string.c_str();
        -: 6684:
        -: 6685:    using internal::ParseFlag;
        -: 6686:
       1*: 6687:    bool remove_flag = false;
       1*: 6688:    if (ParseGoogleTestFlag(arg)) {
       1*: 6689:      remove_flag = true;
        -: 6690:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6691:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6692:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6693:      LoadFlagsFromFile(flagfile_value);
    #####: 6694:      remove_flag = true;
        -: 6695:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6696:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6697:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6698:      // internal ones) trigger help display.
    #####: 6699:      g_help_flag = true;
        -: 6700:    }
        -: 6701:
       1*: 6702:    if (remove_flag) {
        -: 6703:      // Shift the remainder of the argv list left by one.
       1*: 6704:      for (int j = i + 1; j < *argc; ++j) {
    #####: 6705:        argv[j - 1] = argv[j];
        -: 6706:      }
        -: 6707:
        -: 6708:      // Decrements the argument count.
       1*: 6709:      (*argc)--;
        -: 6710:
        -: 6711:      // Terminate the array with nullptr.
       1*: 6712:      argv[*argc] = nullptr;
        -: 6713:
        -: 6714:      // We also need to decrement the iterator as we just removed
        -: 6715:      // an element.
       1*: 6716:      i--;
        -: 6717:    }
        -: 6718:  }
        -: 6719:
       1*: 6720:  if (g_help_flag) {
        -: 6721:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6722:    // latter may not be called at all if the user is using Google
        -: 6723:    // Test with another testing framework.
    #####: 6724:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6725:  }
       1*: 6726:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6679:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6680:  std::string flagfile_value;
    %%%%%: 6680-block  0
call    0 never executed
    #####: 6681:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6681-block  0
call    0 never executed
    %%%%%: 6681-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    $$$$$: 6681-block  2
call    3 never executed
    #####: 6682:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6682-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6683:    const char* const arg = arg_string.c_str();
    %%%%%: 6683-block  0
call    0 never executed
        -: 6684:
        -: 6685:    using internal::ParseFlag;
        -: 6686:
    #####: 6687:    bool remove_flag = false;
    #####: 6688:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6688-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6689:      remove_flag = true;
    %%%%%: 6689-block  0
        -: 6690:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6691:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6691-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6692:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6692-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6693:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6693-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6694:      remove_flag = true;
    %%%%%: 6694-block  0
        -: 6695:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6696:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6696-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6696-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6696-block  2
    %%%%%: 6696-block  3
    %%%%%: 6696-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 6697:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6698:      // internal ones) trigger help display.
    #####: 6699:      g_help_flag = true;
    %%%%%: 6699-block  0
        -: 6700:    }
        -: 6701:
    #####: 6702:    if (remove_flag) {
    %%%%%: 6702-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6703:      // Shift the remainder of the argv list left by one.
    #####: 6704:      for (int j = i + 1; j < *argc; ++j) {
    %%%%%: 6704-block  0
    %%%%%: 6704-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6705:        argv[j - 1] = argv[j];
    %%%%%: 6705-block  0
        -: 6706:      }
        -: 6707:
        -: 6708:      // Decrements the argument count.
    #####: 6709:      (*argc)--;
        -: 6710:
        -: 6711:      // Terminate the array with nullptr.
    #####: 6712:      argv[*argc] = nullptr;
        -: 6713:
        -: 6714:      // We also need to decrement the iterator as we just removed
        -: 6715:      // an element.
    #####: 6716:      i--;
    %%%%%: 6716-block  0
        -: 6717:    }
        -: 6718:  }
        -: 6719:
    #####: 6720:  if (g_help_flag) {
    %%%%%: 6720-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6721:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6722:    // latter may not be called at all if the user is using Google
        -: 6723:    // Test with another testing framework.
    #####: 6724:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6724-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6725:  }
    #####: 6726:}
    %%%%%: 6726-block  0
call    0 never executed
    $$$$$: 6726-block  1
call    1 never executed
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 47%
        1: 6679:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        1: 6680:  std::string flagfile_value;
        1: 6680-block  0
call    0 returned 1
        2: 6681:  for (int i = 1; i < *argc; i++) {
        1: 6681-block  0
call    0 returned 1
        2: 6681-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
    $$$$$: 6681-block  2
call    3 never executed
        1: 6682:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6682-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6683:    const char* const arg = arg_string.c_str();
        1: 6683-block  0
call    0 returned 1
        -: 6684:
        -: 6685:    using internal::ParseFlag;
        -: 6686:
        1: 6687:    bool remove_flag = false;
        1: 6688:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6688-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6689:      remove_flag = true;
        1: 6689-block  0
        -: 6690:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6691:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6691-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6692:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6692-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6693:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6693-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6694:      remove_flag = true;
    %%%%%: 6694-block  0
        -: 6695:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6696:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6696-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6696-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6696-block  2
    %%%%%: 6696-block  3
    %%%%%: 6696-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 6697:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6698:      // internal ones) trigger help display.
    #####: 6699:      g_help_flag = true;
    %%%%%: 6699-block  0
        -: 6700:    }
        -: 6701:
        1: 6702:    if (remove_flag) {
        1: 6702-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6703:      // Shift the remainder of the argv list left by one.
       1*: 6704:      for (int j = i + 1; j < *argc; ++j) {
        1: 6704-block  0
        1: 6704-block  1
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####: 6705:        argv[j - 1] = argv[j];
    %%%%%: 6705-block  0
        -: 6706:      }
        -: 6707:
        -: 6708:      // Decrements the argument count.
        1: 6709:      (*argc)--;
        -: 6710:
        -: 6711:      // Terminate the array with nullptr.
        1: 6712:      argv[*argc] = nullptr;
        -: 6713:
        -: 6714:      // We also need to decrement the iterator as we just removed
        -: 6715:      // an element.
        1: 6716:      i--;
        1: 6716-block  0
        -: 6717:    }
        -: 6718:  }
        -: 6719:
        1: 6720:  if (g_help_flag) {
        1: 6720-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6721:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6722:    // latter may not be called at all if the user is using Google
        -: 6723:    // Test with another testing framework.
    #####: 6724:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6724-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6725:  }
        1: 6726:}
        1: 6726-block  0
call    0 returned 1
    $$$$$: 6726-block  1
call    1 never executed
------------------
        -: 6727:
        -: 6728:// Parses the command line for Google Test flags, without initializing
        -: 6729:// other parts of Google Test. This function updates argc and argv by removing
        -: 6730:// flags that are known to GoogleTest (including other user flags defined using
        -: 6731:// ABSL_FLAG if GoogleTest is built with GTEST_USE_ABSL). Other arguments
        -: 6732:// remain in place. Unrecognized flags are not reported and do not cause the
        -: 6733:// program to exit.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6734:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6735:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6736:  if (*argc <= 0) return;
        -: 6737:
        -: 6738:  std::vector<char*> positional_args;
        -: 6739:  std::vector<absl::UnrecognizedFlag> unrecognized_flags;
        -: 6740:  absl::ParseAbseilFlagsOnly(*argc, argv, positional_args, unrecognized_flags);
        -: 6741:  absl::flat_hash_set<absl::string_view> unrecognized;
        -: 6742:  for (const auto& flag : unrecognized_flags) {
        -: 6743:    unrecognized.insert(flag.flag_name);
        -: 6744:  }
        -: 6745:  absl::flat_hash_set<char*> positional;
        -: 6746:  for (const auto& arg : positional_args) {
        -: 6747:    positional.insert(arg);
        -: 6748:  }
        -: 6749:
        -: 6750:  int out_pos = 1;
        -: 6751:  int in_pos = 1;
        -: 6752:  for (; in_pos < *argc; ++in_pos) {
        -: 6753:    char* arg = argv[in_pos];
        -: 6754:    absl::string_view arg_str(arg);
        -: 6755:    if (absl::ConsumePrefix(&arg_str, "--")) {
        -: 6756:      // Flag-like argument. If the flag was unrecognized, keep it.
        -: 6757:      // If it was a GoogleTest flag, remove it.
        -: 6758:      if (unrecognized.contains(arg_str)) {
        -: 6759:        argv[out_pos++] = argv[in_pos];
        -: 6760:        continue;
        -: 6761:      }
        -: 6762:    }
        -: 6763:
        -: 6764:    if (arg_str.empty()) {
        -: 6765:      ++in_pos;
        -: 6766:      break;  // '--' indicates that the rest of the arguments are positional
        -: 6767:    }
        -: 6768:
        -: 6769:    // Probably a positional argument. If it is in fact positional, keep it.
        -: 6770:    // If it was a value for the flag argument, remove it.
        -: 6771:    if (positional.contains(arg)) {
        -: 6772:      argv[out_pos++] = arg;
        -: 6773:    }
        -: 6774:  }
        -: 6775:
        -: 6776:  // The rest are positional args for sure.
        -: 6777:  while (in_pos < *argc) {
        -: 6778:    argv[out_pos++] = argv[in_pos++];
        -: 6779:  }
        -: 6780:
        -: 6781:  *argc = out_pos;
        -: 6782:  argv[out_pos] = nullptr;
        -: 6783:#else
        1: 6784:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6784-block  0
call    0 returned 1
        -: 6785:#endif
        -: 6786:
        -: 6787:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6788:  // *_NSGetArgv() == argv
        -: 6789:  // Only applicable to char** version of argv
        -: 6790:#ifdef GTEST_OS_MAC
        -: 6791:#ifndef GTEST_OS_IOS
        -: 6792:  if (*_NSGetArgv() == argv) {
        -: 6793:    *_NSGetArgc() = *argc;
        -: 6794:  }
        -: 6795:#endif
        -: 6796:#endif
        1: 6797:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6798:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6799:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6799-block  0
call    0 never executed
    #####: 6800:}
        -: 6801:
        -: 6802:// The internal implementation of InitGoogleTest().
        -: 6803://
        -: 6804:// The type parameter CharType can be instantiated to either char or
        -: 6805:// wchar_t.
        -: 6806:template <typename CharType>
       1*: 6807:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6808:  // We don't want to run the initialization code twice.
       1*: 6809:  if (GTestIsInitialized()) return;
        -: 6810:
       1*: 6811:  if (*argc <= 0) return;
        -: 6812:
       1*: 6813:  g_argvs.clear();
       3*: 6814:  for (int i = 0; i != *argc; i++) {
       2*: 6815:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6816:  }
        -: 6817:
        -: 6818:#ifdef GTEST_HAS_ABSL
        -: 6819:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6820:
        -: 6821:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6822:  // When using the Abseil Flags library, set the program usage message to the
        -: 6823:  // help message, but remove the color-encoding from the message first.
        -: 6824:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6825:      kColorEncodedHelpMessage,
        -: 6826:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6827:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6828:#endif  // GTEST_HAS_ABSL
        -: 6829:
       1*: 6830:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6831:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6832:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6807:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6808:  // We don't want to run the initialization code twice.
    #####: 6809:  if (GTestIsInitialized()) return;
    %%%%%: 6809-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6809-block  1
        -: 6810:
    #####: 6811:  if (*argc <= 0) return;
    %%%%%: 6811-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6811-block  1
        -: 6812:
    #####: 6813:  g_argvs.clear();
    %%%%%: 6813-block  0
call    0 never executed
    #####: 6814:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6814-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6815:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6815-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6815-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6815-block  2
call    6 never executed
    $$$$$: 6815-block  3
call    7 never executed
        -: 6816:  }
        -: 6817:
        -: 6818:#ifdef GTEST_HAS_ABSL
        -: 6819:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6820:
        -: 6821:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6822:  // When using the Abseil Flags library, set the program usage message to the
        -: 6823:  // help message, but remove the color-encoding from the message first.
        -: 6824:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6825:      kColorEncodedHelpMessage,
        -: 6826:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6827:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6828:#endif  // GTEST_HAS_ABSL
        -: 6829:
    #####: 6830:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6830-block  0
call    0 never executed
    #####: 6831:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6832:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6807:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6808:  // We don't want to run the initialization code twice.
       1*: 6809:  if (GTestIsInitialized()) return;
        1: 6809-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6809-block  1
        -: 6810:
       1*: 6811:  if (*argc <= 0) return;
        1: 6811-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6811-block  1
        -: 6812:
        1: 6813:  g_argvs.clear();
        1: 6813-block  0
call    0 returned 1
        3: 6814:  for (int i = 0; i != *argc; i++) {
        3: 6814-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2: 6815:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6815-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6815-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6815-block  2
call    6 returned 2
    $$$$$: 6815-block  3
call    7 never executed
        -: 6816:  }
        -: 6817:
        -: 6818:#ifdef GTEST_HAS_ABSL
        -: 6819:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6820:
        -: 6821:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6822:  // When using the Abseil Flags library, set the program usage message to the
        -: 6823:  // help message, but remove the color-encoding from the message first.
        -: 6824:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6825:      kColorEncodedHelpMessage,
        -: 6826:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6827:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6828:#endif  // GTEST_HAS_ABSL
        -: 6829:
        1: 6830:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6830-block  0
call    0 returned 1
        1: 6831:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6832:}
------------------
        -: 6833:
        -: 6834:}  // namespace internal
        -: 6835:
        -: 6836:// Initializes Google Test.  This must be called before calling
        -: 6837:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6838:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6839:// seen, it is removed from argv, and *argc is decremented.
        -: 6840://
        -: 6841:// No value is returned.  Instead, the Google Test flag variables are
        -: 6842:// updated.
        -: 6843://
        -: 6844:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6845:void InitGoogleTest(int* argc, char** argv) {
        -: 6846:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6847:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6848:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6849:  internal::InitGoogleTestImpl(argc, argv);
        1: 6849-block  0
call    0 returned 1
        -: 6850:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6851:}
        -: 6852:
        -: 6853:// This overloaded version can be used in Windows programs compiled in
        -: 6854:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6855:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6856:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6857:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6858:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6859:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6859-block  0
call    0 never executed
        -: 6860:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6861:}
        -: 6862:
        -: 6863:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6864:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6865:void InitGoogleTest() {
        -: 6866:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6867:  int argc = 1;
    #####: 6868:  const auto arg0 = "dummy";
    #####: 6869:  char* argv0 = const_cast<char*>(arg0);
    #####: 6870:  char** argv = &argv0;
        -: 6871:
        -: 6872:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6873:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6874:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6875:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6876:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6877:}
    %%%%%: 6877-block  0
        -: 6878:
        -: 6879:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_) || \
        -: 6880:    !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6881:// Returns the value of the first environment variable that is set and contains
        -: 6882:// a non-empty string. If there are none, returns the "fallback" string. Adds
        -: 6883:// the director-separator character as a suffix if not provided in the
        -: 6884:// environment variable value.
function _ZN7testingL13GetDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 6885:static std::string GetDirFromEnv(
        -: 6886:    std::initializer_list<const char*> environment_variables,
        -: 6887:    const char* fallback, char separator) {
    #####: 6888:  for (const char* variable_name : environment_variables) {
    %%%%%: 6888-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6888-block  1
    %%%%%: 6888-block  2
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6889:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 6889-block  0
call    0 never executed
    #####: 6890:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6890-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6891:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 6891-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6892:        return std::string(value).append(1, separator);
    %%%%%: 6892-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6892-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6892-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6892-block  3
    %%%%%: 6892-block  4
call    9 never executed
    $$$$$: 6892-block  5
call   10 never executed
    $$$$$: 6892-block  6
    $$$$$: 6892-block  7
        -: 6893:      }
    #####: 6894:      return value;
    %%%%%: 6894-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 6894-block  1
        -: 6895:    }
        -: 6896:  }
    #####: 6897:  return fallback;
    %%%%%: 6897-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6898:}
        -: 6899:#endif
        -: 6900:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6901:std::string TempDir() {
        -: 6902:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6903:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6904:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 6905:  return GetDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
    %%%%%: 6905-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6905-block  1
    %%%%%: 6905-block  2
        -: 6906:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6907:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 6908:#else
        -: 6909:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
        -: 6910:#endif
        -: 6911:}
        -: 6912:
        -: 6913:#if GTEST_HAS_FILE_SYSTEM && !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6914:// Returns the directory path (including terminating separator) of the current
        -: 6915:// executable as derived from argv[0].
function _ZN7testingL29GetCurrentExecutableDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 6916:static std::string GetCurrentExecutableDirectory() {
    #####: 6917:  internal::FilePath argv_0(internal::GetArgvs()[0]);
    %%%%%: 6917-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6917-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6917-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 6917-block  3
call   10 never executed
call   11 never executed
    $$$$$: 6917-block  4
call   12 never executed
    $$$$$: 6917-block  5
call   13 never executed
    $$$$$: 6917-block  6
    $$$$$: 6917-block  7
    #####: 6918:  return argv_0.RemoveFileName().string();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6918-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6918-block  1
    %%%%%: 6918-block  2
call    7 never executed
    %%%%%: 6918-block  3
    $$$$$: 6918-block  4
call    8 never executed
    $$$$$: 6918-block  5
    #####: 6919:}
call    0 never executed
    $$$$$: 6919-block  0
call    1 never executed
        -: 6920:#endif
        -: 6921:
        -: 6922:#if GTEST_HAS_FILE_SYSTEM
function _ZN7testing6SrcDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6923:std::string SrcDir() {
        -: 6924:#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6925:  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
        -: 6926:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 6927:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
    %%%%%: 6927-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 6927-block  1
call    3 never executed
    #####: 6928:                       '\\');
    %%%%%: 6928-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6928-block  1
call    4 never executed
    %%%%%: 6928-block  2
    $$$$$: 6928-block  3
        -: 6929:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6930:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6931:                       '/');
        -: 6932:#else
        -: 6933:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6934:                       '/');
        -: 6935:#endif
        -: 6936:}
        -: 6937:#endif
        -: 6938:
        -: 6939:// Class ScopedTrace
        -: 6940:
        -: 6941:// Pushes the given source file location and message onto a per-thread
        -: 6942:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6943:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6944:  internal::TraceInfo trace;
    %%%%%: 6944-block  0
call    0 never executed
    #####: 6945:  trace.file = file;
    #####: 6946:  trace.line = line;
    #####: 6947:  trace.message.swap(message);
call    0 never executed
        -: 6948:
    #####: 6949:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6949-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6950:}
    %%%%%: 6950-block  0
call    0 never executed
    $$$$$: 6950-block  1
call    1 never executed
        -: 6951:
        -: 6952:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6953:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6954:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6954-block  0
call    0 never executed
call    1 never executed
    #####: 6955:}
        -: 6956:
        -: 6957:}  // namespace testing
