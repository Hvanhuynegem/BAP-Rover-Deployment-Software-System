        -:    0:Source:C:/Users/henri/Documents/GitHub/BAP-Rover-Deployment-Software-System/test/TestingRepositoryBEP/Google_tests/all_tests.cpp
        -:    0:Graph:C:\Users\henri\Documents\GitHub\BAP-Rover-Deployment-Software-System\test\TestingRepositoryBEP\cmake-build-debug-coverage-1\Google_tests\CMakeFiles\Google_Tests_run.dir\all_tests.cpp.gcno
        -:    0:Data:C:\Users\henri\Documents\GitHub\BAP-Rover-Deployment-Software-System\test\TestingRepositoryBEP\cmake-build-debug-coverage-1\Google_tests\CMakeFiles\Google_Tests_run.dir\all_tests.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by henri on 16/06/2024.
        -:    3://
        -:    4:/*
        -:    5: * convert_array_to_message_tests.cpp file
        -:    6: *
        -:    7: * Testing file for the `convert_array_to_message` method. Multiple tests are executed here to demonstrate that the method behaves as expected.
        -:    8: * Created by Henri Vanhuynegem on 07/06/2024.
        -:    9: * Last edited: 10/06/2024.
        -:   10: *
        -:   11: * Tests:
        -:   12: * - Normal test: Verify a normal array is correctly converted to a message.
        -:   13: * - Length smaller than five: Handle an array that is smaller than length 5.
        -:   14: * - Start byte test: Ensure the start byte is correctly placed in the message.
        -:   15: * - Message type test: Verify the message type is correctly placed in the message.
        -:   16: * - Message length test: Ensure the message length is correctly placed in the message.
        -:   17: * - Message length longer than max payload size: Ensure that the message length longer than payload size is handled.
        -:   18: * - Message length smaller than zero: Handle the case where the message length is smaller than zero.
        -:   19: * - Empty payload test: Handle conversion when the payload is empty.
        -:   20: * - Checksum test: Verify the checksum is correctly placed in the message.
        -:   21: * - End byte test: Ensure the end byte is correctly placed in the message.
        -:   22: * - Checksum verification test: Check whether the checksum is correct.
        -:   23: */
        -:   24:
        -:   25:#include "gtest/gtest.h"
        -:   26:#include "lander_communication.h"
        -:   27:
        4:   28:TEST(convertArrayToMessageTestSuite, normalTest) {
        -:   29:    // input buffer
        1:   30:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   31:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   32:
        -:   33:    // expected message
        -:   34:    Message expected_msg;
        1:   35:    expected_msg.start_byte = 0x7E;
        1:   36:    expected_msg.msg_type = 0x01;
        1:   37:    expected_msg.length = 0x04;
        1:   38:    uint8_t expected_payload[] = {0x74, 0x65, 0x73, 0x74};
        1:   39:    memcpy(expected_msg.payload, expected_payload, expected_msg.length);
        1:   40:    expected_msg.checksum = 0x13;
        1:   41:    expected_msg.end_byte = 0x7F;
        -:   42:
        -:   43:    // actual message
        -:   44:    Message actual_msg;
        1:   45:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:   46:
       1*:   47:    EXPECT_EQ(expected_msg.start_byte, actual_msg.start_byte);
       1*:   48:    EXPECT_EQ(expected_msg.msg_type, actual_msg.msg_type);
       1*:   49:    EXPECT_EQ(expected_msg.length, actual_msg.length);
       1*:   50:    EXPECT_EQ(0, memcmp(expected_msg.payload, actual_msg.payload, expected_msg.length));
       1*:   51:    EXPECT_EQ(expected_msg.checksum, actual_msg.checksum);
       1*:   52:    EXPECT_EQ(expected_msg.end_byte, actual_msg.end_byte);
        1:   53:}
------------------
_ZN46convertArrayToMessageTestSuite_normalTest_TestC1Ev:
function _ZN46convertArrayToMessageTestSuite_normalTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   28:TEST(convertArrayToMessageTestSuite, normalTest) {
        1:   28-block  0
call    0 returned 1
------------------
_ZN46convertArrayToMessageTestSuite_normalTest_TestD0Ev:
function _ZN46convertArrayToMessageTestSuite_normalTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   28:TEST(convertArrayToMessageTestSuite, normalTest) {
        1:   28-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN46convertArrayToMessageTestSuite_normalTest_TestD1Ev:
function _ZN46convertArrayToMessageTestSuite_normalTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   28:TEST(convertArrayToMessageTestSuite, normalTest) {
        1:   28-block  0
call    0 returned 1
------------------
_ZN46convertArrayToMessageTestSuite_normalTest_Test8TestBodyEv:
function _ZN46convertArrayToMessageTestSuite_normalTest_Test8TestBodyEv called 1 returned 100% blocks executed 22%
        1:   28:TEST(convertArrayToMessageTestSuite, normalTest) {
        -:   29:    // input buffer
        1:   30:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   31:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   32:
        -:   33:    // expected message
        -:   34:    Message expected_msg;
        1:   35:    expected_msg.start_byte = 0x7E;
        1:   36:    expected_msg.msg_type = 0x01;
        1:   37:    expected_msg.length = 0x04;
        1:   38:    uint8_t expected_payload[] = {0x74, 0x65, 0x73, 0x74};
        1:   39:    memcpy(expected_msg.payload, expected_payload, expected_msg.length);
        1:   40:    expected_msg.checksum = 0x13;
        1:   41:    expected_msg.end_byte = 0x7F;
        -:   42:
        -:   43:    // actual message
        -:   44:    Message actual_msg;
        1:   45:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   46:
       1*:   47:    EXPECT_EQ(expected_msg.start_byte, actual_msg.start_byte);
        1:   47-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   47-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   47-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   47-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   47-block  5
call   16 never executed
call   17 never executed
        1:   47-block  6
call   18 returned 1
    $$$$$:   47-block  7
call   19 never executed
    $$$$$:   47-block  8
    $$$$$:   47-block  9
call   20 never executed
    $$$$$:   47-block 10
    $$$$$:   47-block 11
call   21 never executed
       1*:   48:    EXPECT_EQ(expected_msg.msg_type, actual_msg.msg_type);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   48-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   48-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   48-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   48-block  4
call   16 never executed
call   17 never executed
        1:   48-block  5
call   18 returned 1
    $$$$$:   48-block  6
call   19 never executed
    $$$$$:   48-block  7
    $$$$$:   48-block  8
call   20 never executed
    $$$$$:   48-block  9
    $$$$$:   48-block 10
call   21 never executed
       1*:   49:    EXPECT_EQ(expected_msg.length, actual_msg.length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   49-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   49-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   49-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   49-block  4
call   16 never executed
call   17 never executed
        1:   49-block  5
call   18 returned 1
    $$$$$:   49-block  6
call   19 never executed
    $$$$$:   49-block  7
    $$$$$:   49-block  8
call   20 never executed
    $$$$$:   49-block  9
    $$$$$:   49-block 10
call   21 never executed
       1*:   50:    EXPECT_EQ(0, memcmp(expected_msg.payload, actual_msg.payload, expected_msg.length));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   50-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   50-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   50-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   50-block  4
call   16 never executed
call   17 never executed
        1:   50-block  5
call   18 returned 1
    $$$$$:   50-block  6
    $$$$$:   50-block  7
    $$$$$:   50-block  8
call   19 never executed
    $$$$$:   50-block  9
    $$$$$:   50-block 10
call   20 never executed
    $$$$$:   50-block 11
    $$$$$:   50-block 12
call   21 never executed
       1*:   51:    EXPECT_EQ(expected_msg.checksum, actual_msg.checksum);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   51-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   51-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   51-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   51-block  4
call   16 never executed
call   17 never executed
        1:   51-block  5
call   18 returned 1
    $$$$$:   51-block  6
call   19 never executed
    $$$$$:   51-block  7
    $$$$$:   51-block  8
call   20 never executed
    $$$$$:   51-block  9
    $$$$$:   51-block 10
call   21 never executed
       1*:   52:    EXPECT_EQ(expected_msg.end_byte, actual_msg.end_byte);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   52-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   52-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   52-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   52-block  4
call   16 never executed
call   17 never executed
        1:   52-block  5
call   18 returned 1
    $$$$$:   52-block  6
call   19 never executed
    $$$$$:   52-block  7
    $$$$$:   52-block  8
call   20 never executed
    $$$$$:   52-block  9
    $$$$$:   52-block 10
call   21 never executed
        1:   53:}
------------------
        -:   54:
        -:   55:
        4:   56:TEST(convertArrayToMessageTestSuite, lengthSmallerThanFiveTest) {
        -:   57:    // input buffer
        1:   58:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04};
        1:   59:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   60:
        -:   61:    // actual message
        -:   62:    Message actual_msg;
        1:   63:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:   64:
       1*:   65:    EXPECT_FALSE(result);
        1:   66:}
------------------
_ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_TestC1Ev:
function _ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   56:TEST(convertArrayToMessageTestSuite, lengthSmallerThanFiveTest) {
        1:   56-block  0
call    0 returned 1
------------------
_ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_TestD0Ev:
function _ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   56:TEST(convertArrayToMessageTestSuite, lengthSmallerThanFiveTest) {
        1:   56-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_TestD1Ev:
function _ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   56:TEST(convertArrayToMessageTestSuite, lengthSmallerThanFiveTest) {
        1:   56-block  0
call    0 returned 1
------------------
_ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_Test8TestBodyEv:
function _ZN61convertArrayToMessageTestSuite_lengthSmallerThanFiveTest_Test8TestBodyEv called 1 returned 100% blocks executed 25%
        1:   56:TEST(convertArrayToMessageTestSuite, lengthSmallerThanFiveTest) {
        -:   57:    // input buffer
        1:   58:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04};
        1:   59:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   60:
        -:   61:    // actual message
        -:   62:    Message actual_msg;
        1:   63:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   64:
       1*:   65:    EXPECT_FALSE(result);
        1:   65-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   65-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:   65-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   65-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   65-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   65-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:   65-block  6
call   20 returned 1
    $$$$$:   65-block  7
call   21 never executed
    $$$$$:   65-block  8
call   22 never executed
    $$$$$:   65-block  9
    $$$$$:   65-block 10
    $$$$$:   65-block 11
call   23 never executed
    $$$$$:   65-block 12
    $$$$$:   65-block 13
call   24 never executed
        1:   66:}
------------------
        -:   67:
        4:   68:TEST(convertArrayToMessageTestSuite, startByteTest) {
        -:   69:    // input buffer
        1:   70:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   71:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   72:
        -:   73:    // actual message
        -:   74:    Message actual_msg;
        1:   75:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:   76:
       1*:   77:    EXPECT_TRUE(result);
       1*:   78:    EXPECT_EQ(0x7E, actual_msg.start_byte);
        1:   79:}
------------------
_ZN49convertArrayToMessageTestSuite_startByteTest_TestC1Ev:
function _ZN49convertArrayToMessageTestSuite_startByteTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   68:TEST(convertArrayToMessageTestSuite, startByteTest) {
        1:   68-block  0
call    0 returned 1
------------------
_ZN49convertArrayToMessageTestSuite_startByteTest_TestD0Ev:
function _ZN49convertArrayToMessageTestSuite_startByteTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   68:TEST(convertArrayToMessageTestSuite, startByteTest) {
        1:   68-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49convertArrayToMessageTestSuite_startByteTest_TestD1Ev:
function _ZN49convertArrayToMessageTestSuite_startByteTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   68:TEST(convertArrayToMessageTestSuite, startByteTest) {
        1:   68-block  0
call    0 returned 1
------------------
_ZN49convertArrayToMessageTestSuite_startByteTest_Test8TestBodyEv:
function _ZN49convertArrayToMessageTestSuite_startByteTest_Test8TestBodyEv called 1 returned 100% blocks executed 22%
        1:   68:TEST(convertArrayToMessageTestSuite, startByteTest) {
        -:   69:    // input buffer
        1:   70:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   71:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   72:
        -:   73:    // actual message
        -:   74:    Message actual_msg;
        1:   75:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:   75-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   76:
       1*:   77:    EXPECT_TRUE(result);
        1:   77-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   77-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:   77-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   77-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   77-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   77-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:   77-block  6
call   20 returned 1
    $$$$$:   77-block  7
call   21 never executed
    $$$$$:   77-block  8
call   22 never executed
    $$$$$:   77-block  9
    $$$$$:   77-block 10
    $$$$$:   77-block 11
call   23 never executed
    $$$$$:   77-block 12
    $$$$$:   77-block 13
call   24 never executed
       1*:   78:    EXPECT_EQ(0x7E, actual_msg.start_byte);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   78-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   78-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   78-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   78-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   78-block  4
call   16 never executed
call   17 never executed
        1:   78-block  5
call   18 returned 1
    $$$$$:   78-block  6
    $$$$$:   78-block  7
call   19 never executed
    $$$$$:   78-block  8
    $$$$$:   78-block  9
call   20 never executed
    $$$$$:   78-block 10
    $$$$$:   78-block 11
call   21 never executed
        1:   79:}
------------------
        -:   80:
        4:   81:TEST(convertArrayToMessageTestSuite, messageTypeTest) {
        -:   82:    // input buffer
        1:   83:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   84:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   85:
        -:   86:    // actual message
        -:   87:    Message actual_msg;
        1:   88:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:   89:
       1*:   90:    EXPECT_TRUE(result);
       1*:   91:    EXPECT_EQ(0x01, actual_msg.msg_type);
        1:   92:}
------------------
_ZN51convertArrayToMessageTestSuite_messageTypeTest_TestC1Ev:
function _ZN51convertArrayToMessageTestSuite_messageTypeTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   81:TEST(convertArrayToMessageTestSuite, messageTypeTest) {
        1:   81-block  0
call    0 returned 1
------------------
_ZN51convertArrayToMessageTestSuite_messageTypeTest_TestD0Ev:
function _ZN51convertArrayToMessageTestSuite_messageTypeTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   81:TEST(convertArrayToMessageTestSuite, messageTypeTest) {
        1:   81-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN51convertArrayToMessageTestSuite_messageTypeTest_TestD1Ev:
function _ZN51convertArrayToMessageTestSuite_messageTypeTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   81:TEST(convertArrayToMessageTestSuite, messageTypeTest) {
        1:   81-block  0
call    0 returned 1
------------------
_ZN51convertArrayToMessageTestSuite_messageTypeTest_Test8TestBodyEv:
function _ZN51convertArrayToMessageTestSuite_messageTypeTest_Test8TestBodyEv called 1 returned 100% blocks executed 22%
        1:   81:TEST(convertArrayToMessageTestSuite, messageTypeTest) {
        -:   82:    // input buffer
        1:   83:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   84:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   85:
        -:   86:    // actual message
        -:   87:    Message actual_msg;
        1:   88:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:   88-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   89:
       1*:   90:    EXPECT_TRUE(result);
        1:   90-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   90-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:   90-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:   90-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:   90-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   90-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:   90-block  6
call   20 returned 1
    $$$$$:   90-block  7
call   21 never executed
    $$$$$:   90-block  8
call   22 never executed
    $$$$$:   90-block  9
    $$$$$:   90-block 10
    $$$$$:   90-block 11
call   23 never executed
    $$$$$:   90-block 12
    $$$$$:   90-block 13
call   24 never executed
       1*:   91:    EXPECT_EQ(0x01, actual_msg.msg_type);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   91-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   91-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   91-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:   91-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   91-block  4
call   16 never executed
call   17 never executed
        1:   91-block  5
call   18 returned 1
    $$$$$:   91-block  6
    $$$$$:   91-block  7
call   19 never executed
    $$$$$:   91-block  8
    $$$$$:   91-block  9
call   20 never executed
    $$$$$:   91-block 10
    $$$$$:   91-block 11
call   21 never executed
        1:   92:}
------------------
        -:   93:
        4:   94:TEST(convertArrayToMessageTestSuite, messageLengthTest) {
        -:   95:    // input buffer
        1:   96:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   97:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   98:
        -:   99:    // actual message
        -:  100:    Message actual_msg;
        1:  101:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:  102:
       1*:  103:    EXPECT_TRUE(result);
       1*:  104:    EXPECT_EQ(0x04, actual_msg.length);
        1:  105:}
------------------
_ZN53convertArrayToMessageTestSuite_messageLengthTest_TestC1Ev:
function _ZN53convertArrayToMessageTestSuite_messageLengthTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   94:TEST(convertArrayToMessageTestSuite, messageLengthTest) {
        1:   94-block  0
call    0 returned 1
------------------
_ZN53convertArrayToMessageTestSuite_messageLengthTest_TestD0Ev:
function _ZN53convertArrayToMessageTestSuite_messageLengthTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   94:TEST(convertArrayToMessageTestSuite, messageLengthTest) {
        1:   94-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN53convertArrayToMessageTestSuite_messageLengthTest_TestD1Ev:
function _ZN53convertArrayToMessageTestSuite_messageLengthTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   94:TEST(convertArrayToMessageTestSuite, messageLengthTest) {
        1:   94-block  0
call    0 returned 1
------------------
_ZN53convertArrayToMessageTestSuite_messageLengthTest_Test8TestBodyEv:
function _ZN53convertArrayToMessageTestSuite_messageLengthTest_Test8TestBodyEv called 1 returned 100% blocks executed 22%
        1:   94:TEST(convertArrayToMessageTestSuite, messageLengthTest) {
        -:   95:    // input buffer
        1:   96:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:   97:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:   98:
        -:   99:    // actual message
        -:  100:    Message actual_msg;
        1:  101:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:  101-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  102:
       1*:  103:    EXPECT_TRUE(result);
        1:  103-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  103-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  103-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  103-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  103-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  103-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  103-block  6
call   20 returned 1
    $$$$$:  103-block  7
call   21 never executed
    $$$$$:  103-block  8
call   22 never executed
    $$$$$:  103-block  9
    $$$$$:  103-block 10
    $$$$$:  103-block 11
call   23 never executed
    $$$$$:  103-block 12
    $$$$$:  103-block 13
call   24 never executed
       1*:  104:    EXPECT_EQ(0x04, actual_msg.length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  104-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  104-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  104-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  104-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  104-block  4
call   16 never executed
call   17 never executed
        1:  104-block  5
call   18 returned 1
    $$$$$:  104-block  6
    $$$$$:  104-block  7
call   19 never executed
    $$$$$:  104-block  8
    $$$$$:  104-block  9
call   20 never executed
    $$$$$:  104-block 10
    $$$$$:  104-block 11
call   21 never executed
        1:  105:}
------------------
        -:  106:
        4:  107:TEST(convertArrayToMessageTestSuite, messageLengthLongerThanMaxPayloadSizeTest) {
        -:  108:    // input buffer
        1:  109:    uint8_t input_buffer[MAX_PAYLOAD_SIZE + 10] = {0x7E, 0x01, MAX_PAYLOAD_SIZE + 1};
        1:  110:    uint16_t input_length = MAX_PAYLOAD_SIZE + 10;
        -:  111:
        -:  112:    // actual message
        -:  113:    Message actual_msg;
        -:  114:
        1:  115:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
       1*:  116:    EXPECT_TRUE(result);
       1*:  117:    EXPECT_EQ(actual_msg.length, 249);
        1:  118:}
------------------
_ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_TestC1Ev:
function _ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  107:TEST(convertArrayToMessageTestSuite, messageLengthLongerThanMaxPayloadSizeTest) {
        1:  107-block  0
call    0 returned 1
------------------
_ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_TestD0Ev:
function _ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  107:TEST(convertArrayToMessageTestSuite, messageLengthLongerThanMaxPayloadSizeTest) {
        1:  107-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_TestD1Ev:
function _ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  107:TEST(convertArrayToMessageTestSuite, messageLengthLongerThanMaxPayloadSizeTest) {
        1:  107-block  0
call    0 returned 1
------------------
_ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_Test8TestBodyEv:
function _ZN77convertArrayToMessageTestSuite_messageLengthLongerThanMaxPayloadSizeTest_Test8TestBodyEv called 1 returned 100% blocks executed 22%
        1:  107:TEST(convertArrayToMessageTestSuite, messageLengthLongerThanMaxPayloadSizeTest) {
        -:  108:    // input buffer
        1:  109:    uint8_t input_buffer[MAX_PAYLOAD_SIZE + 10] = {0x7E, 0x01, MAX_PAYLOAD_SIZE + 1};
        1:  110:    uint16_t input_length = MAX_PAYLOAD_SIZE + 10;
        -:  111:
        -:  112:    // actual message
        -:  113:    Message actual_msg;
        -:  114:
        1:  115:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:  115-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  116:    EXPECT_TRUE(result);
        1:  116-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  116-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  116-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  116-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  116-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  116-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  116-block  6
call   20 returned 1
    $$$$$:  116-block  7
call   21 never executed
    $$$$$:  116-block  8
call   22 never executed
    $$$$$:  116-block  9
    $$$$$:  116-block 10
    $$$$$:  116-block 11
call   23 never executed
    $$$$$:  116-block 12
    $$$$$:  116-block 13
call   24 never executed
       1*:  117:    EXPECT_EQ(actual_msg.length, 249);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  117-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  117-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  117-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  117-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  117-block  4
call   16 never executed
call   17 never executed
        1:  117-block  5
call   18 returned 1
    $$$$$:  117-block  6
    $$$$$:  117-block  7
call   19 never executed
    $$$$$:  117-block  8
    $$$$$:  117-block  9
call   20 never executed
    $$$$$:  117-block 10
    $$$$$:  117-block 11
call   21 never executed
        1:  118:}
------------------
        -:  119:
        4:  120:TEST(convertArrayToMessageTestSuite, messageLengthSmallerThanZeroTest) {
        -:  121:    // input buffer
        1:  122:    uint8_t input_buffer[] = {0x7E, 0x01, (uint8_t)-1, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  123:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  124:
        -:  125:    // actual message
        -:  126:    Message actual_msg;
        1:  127:    convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:  128:
       1*:  129:    EXPECT_EQ(actual_msg.length, 249);
        1:  130:}
------------------
_ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_TestC1Ev:
function _ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  120:TEST(convertArrayToMessageTestSuite, messageLengthSmallerThanZeroTest) {
        1:  120-block  0
call    0 returned 1
------------------
_ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_TestD0Ev:
function _ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  120:TEST(convertArrayToMessageTestSuite, messageLengthSmallerThanZeroTest) {
        1:  120-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_TestD1Ev:
function _ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  120:TEST(convertArrayToMessageTestSuite, messageLengthSmallerThanZeroTest) {
        1:  120-block  0
call    0 returned 1
------------------
_ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_Test8TestBodyEv:
function _ZN68convertArrayToMessageTestSuite_messageLengthSmallerThanZeroTest_Test8TestBodyEv called 1 returned 100% blocks executed 29%
        1:  120:TEST(convertArrayToMessageTestSuite, messageLengthSmallerThanZeroTest) {
        -:  121:    // input buffer
        1:  122:    uint8_t input_buffer[] = {0x7E, 0x01, (uint8_t)-1, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  123:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  124:
        -:  125:    // actual message
        -:  126:    Message actual_msg;
        1:  127:    convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:  127-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  128:
       1*:  129:    EXPECT_EQ(actual_msg.length, 249);
        1:  129-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  129-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  129-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  129-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  129-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  129-block  5
call   16 never executed
call   17 never executed
        1:  129-block  6
call   18 returned 1
    $$$$$:  129-block  7
    $$$$$:  129-block  8
call   19 never executed
    $$$$$:  129-block  9
    $$$$$:  129-block 10
call   20 never executed
    $$$$$:  129-block 11
    $$$$$:  129-block 12
call   21 never executed
        1:  130:}
------------------
        -:  131:
        4:  132:TEST(convertArrayToMessageTestSuite, emptyPayloadTest) {
        -:  133:    // input buffer
        1:  134:    uint8_t input_buffer[] = {0x7E, 0x01, 0x00, 0x01, 0x7F};
        1:  135:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  136:
        -:  137:    // expected message
        -:  138:    Message expected_msg;
        1:  139:    expected_msg.start_byte = 0x7E;
        1:  140:    expected_msg.msg_type = 0x01;
        1:  141:    expected_msg.length = 0x00;
        1:  142:    expected_msg.checksum = 0x01;
        1:  143:    expected_msg.end_byte = 0x7F;
        -:  144:
        -:  145:    // actual message
        -:  146:    Message actual_msg;
        1:  147:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:  148:
       1*:  149:    EXPECT_TRUE(result);
       1*:  150:    EXPECT_EQ(expected_msg.start_byte, actual_msg.start_byte);
       1*:  151:    EXPECT_EQ(expected_msg.msg_type, actual_msg.msg_type);
       1*:  152:    EXPECT_EQ(expected_msg.length, actual_msg.length);
       1*:  153:    EXPECT_EQ(expected_msg.checksum, actual_msg.checksum);
       1*:  154:    EXPECT_EQ(expected_msg.end_byte, actual_msg.end_byte);
        1:  155:}
------------------
_ZN52convertArrayToMessageTestSuite_emptyPayloadTest_TestC1Ev:
function _ZN52convertArrayToMessageTestSuite_emptyPayloadTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  132:TEST(convertArrayToMessageTestSuite, emptyPayloadTest) {
        1:  132-block  0
call    0 returned 1
------------------
_ZN52convertArrayToMessageTestSuite_emptyPayloadTest_TestD0Ev:
function _ZN52convertArrayToMessageTestSuite_emptyPayloadTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  132:TEST(convertArrayToMessageTestSuite, emptyPayloadTest) {
        1:  132-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52convertArrayToMessageTestSuite_emptyPayloadTest_TestD1Ev:
function _ZN52convertArrayToMessageTestSuite_emptyPayloadTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  132:TEST(convertArrayToMessageTestSuite, emptyPayloadTest) {
        1:  132-block  0
call    0 returned 1
------------------
_ZN52convertArrayToMessageTestSuite_emptyPayloadTest_Test8TestBodyEv:
function _ZN52convertArrayToMessageTestSuite_emptyPayloadTest_Test8TestBodyEv called 1 returned 100% blocks executed 21%
        1:  132:TEST(convertArrayToMessageTestSuite, emptyPayloadTest) {
        -:  133:    // input buffer
        1:  134:    uint8_t input_buffer[] = {0x7E, 0x01, 0x00, 0x01, 0x7F};
        1:  135:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  136:
        -:  137:    // expected message
        -:  138:    Message expected_msg;
        1:  139:    expected_msg.start_byte = 0x7E;
        1:  140:    expected_msg.msg_type = 0x01;
        1:  141:    expected_msg.length = 0x00;
        1:  142:    expected_msg.checksum = 0x01;
        1:  143:    expected_msg.end_byte = 0x7F;
        -:  144:
        -:  145:    // actual message
        -:  146:    Message actual_msg;
        1:  147:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:  147-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  148:
       1*:  149:    EXPECT_TRUE(result);
        1:  149-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  149-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  149-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  149-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  149-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  149-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  149-block  6
call   20 returned 1
    $$$$$:  149-block  7
call   21 never executed
    $$$$$:  149-block  8
call   22 never executed
    $$$$$:  149-block  9
    $$$$$:  149-block 10
    $$$$$:  149-block 11
call   23 never executed
    $$$$$:  149-block 12
    $$$$$:  149-block 13
call   24 never executed
       1*:  150:    EXPECT_EQ(expected_msg.start_byte, actual_msg.start_byte);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  150-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  150-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  150-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  150-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  150-block  4
call   16 never executed
call   17 never executed
        1:  150-block  5
call   18 returned 1
    $$$$$:  150-block  6
call   19 never executed
    $$$$$:  150-block  7
    $$$$$:  150-block  8
call   20 never executed
    $$$$$:  150-block  9
    $$$$$:  150-block 10
call   21 never executed
       1*:  151:    EXPECT_EQ(expected_msg.msg_type, actual_msg.msg_type);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  151-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  151-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  151-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  151-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  151-block  4
call   16 never executed
call   17 never executed
        1:  151-block  5
call   18 returned 1
    $$$$$:  151-block  6
call   19 never executed
    $$$$$:  151-block  7
    $$$$$:  151-block  8
call   20 never executed
    $$$$$:  151-block  9
    $$$$$:  151-block 10
call   21 never executed
       1*:  152:    EXPECT_EQ(expected_msg.length, actual_msg.length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  152-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  152-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  152-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  152-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  152-block  4
call   16 never executed
call   17 never executed
        1:  152-block  5
call   18 returned 1
    $$$$$:  152-block  6
call   19 never executed
    $$$$$:  152-block  7
    $$$$$:  152-block  8
call   20 never executed
    $$$$$:  152-block  9
    $$$$$:  152-block 10
call   21 never executed
       1*:  153:    EXPECT_EQ(expected_msg.checksum, actual_msg.checksum);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  153-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  153-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  153-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  153-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  153-block  4
call   16 never executed
call   17 never executed
        1:  153-block  5
call   18 returned 1
    $$$$$:  153-block  6
call   19 never executed
    $$$$$:  153-block  7
    $$$$$:  153-block  8
call   20 never executed
    $$$$$:  153-block  9
    $$$$$:  153-block 10
call   21 never executed
       1*:  154:    EXPECT_EQ(expected_msg.end_byte, actual_msg.end_byte);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  154-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  154-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  154-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  154-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  154-block  4
call   16 never executed
call   17 never executed
        1:  154-block  5
call   18 returned 1
    $$$$$:  154-block  6
call   19 never executed
    $$$$$:  154-block  7
    $$$$$:  154-block  8
call   20 never executed
    $$$$$:  154-block  9
    $$$$$:  154-block 10
call   21 never executed
        1:  155:}
------------------
        -:  156:
        4:  157:TEST(convertArrayToMessageTestSuite, checksumTest) {
        -:  158:    // input buffer
        1:  159:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  160:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  161:
        -:  162:    // actual message
        -:  163:    Message actual_msg;
        1:  164:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:  165:
       1*:  166:    EXPECT_TRUE(result);
       1*:  167:    EXPECT_EQ(0x13, actual_msg.checksum);
        1:  168:}
------------------
_ZN48convertArrayToMessageTestSuite_checksumTest_TestC1Ev:
function _ZN48convertArrayToMessageTestSuite_checksumTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  157:TEST(convertArrayToMessageTestSuite, checksumTest) {
        1:  157-block  0
call    0 returned 1
------------------
_ZN48convertArrayToMessageTestSuite_checksumTest_TestD0Ev:
function _ZN48convertArrayToMessageTestSuite_checksumTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  157:TEST(convertArrayToMessageTestSuite, checksumTest) {
        1:  157-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48convertArrayToMessageTestSuite_checksumTest_TestD1Ev:
function _ZN48convertArrayToMessageTestSuite_checksumTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  157:TEST(convertArrayToMessageTestSuite, checksumTest) {
        1:  157-block  0
call    0 returned 1
------------------
_ZN48convertArrayToMessageTestSuite_checksumTest_Test8TestBodyEv:
function _ZN48convertArrayToMessageTestSuite_checksumTest_Test8TestBodyEv called 1 returned 100% blocks executed 22%
        1:  157:TEST(convertArrayToMessageTestSuite, checksumTest) {
        -:  158:    // input buffer
        1:  159:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  160:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  161:
        -:  162:    // actual message
        -:  163:    Message actual_msg;
        1:  164:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:  164-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  165:
       1*:  166:    EXPECT_TRUE(result);
        1:  166-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  166-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  166-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  166-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  166-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  166-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  166-block  6
call   20 returned 1
    $$$$$:  166-block  7
call   21 never executed
    $$$$$:  166-block  8
call   22 never executed
    $$$$$:  166-block  9
    $$$$$:  166-block 10
    $$$$$:  166-block 11
call   23 never executed
    $$$$$:  166-block 12
    $$$$$:  166-block 13
call   24 never executed
       1*:  167:    EXPECT_EQ(0x13, actual_msg.checksum);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  167-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  167-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  167-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  167-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  167-block  4
call   16 never executed
call   17 never executed
        1:  167-block  5
call   18 returned 1
    $$$$$:  167-block  6
    $$$$$:  167-block  7
call   19 never executed
    $$$$$:  167-block  8
    $$$$$:  167-block  9
call   20 never executed
    $$$$$:  167-block 10
    $$$$$:  167-block 11
call   21 never executed
        1:  168:}
------------------
        -:  169:
        4:  170:TEST(convertArrayToMessageTestSuite, endByteTest) {
        -:  171:    // input buffer
        1:  172:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  173:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  174:
        -:  175:    // actual message
        -:  176:    Message actual_msg;
        1:  177:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:  178:
       1*:  179:    EXPECT_TRUE(result);
       1*:  180:    EXPECT_EQ(0x7F, actual_msg.end_byte);
        1:  181:}
------------------
_ZN47convertArrayToMessageTestSuite_endByteTest_TestC1Ev:
function _ZN47convertArrayToMessageTestSuite_endByteTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  170:TEST(convertArrayToMessageTestSuite, endByteTest) {
        1:  170-block  0
call    0 returned 1
------------------
_ZN47convertArrayToMessageTestSuite_endByteTest_TestD0Ev:
function _ZN47convertArrayToMessageTestSuite_endByteTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  170:TEST(convertArrayToMessageTestSuite, endByteTest) {
        1:  170-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47convertArrayToMessageTestSuite_endByteTest_TestD1Ev:
function _ZN47convertArrayToMessageTestSuite_endByteTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  170:TEST(convertArrayToMessageTestSuite, endByteTest) {
        1:  170-block  0
call    0 returned 1
------------------
_ZN47convertArrayToMessageTestSuite_endByteTest_Test8TestBodyEv:
function _ZN47convertArrayToMessageTestSuite_endByteTest_Test8TestBodyEv called 1 returned 100% blocks executed 22%
        1:  170:TEST(convertArrayToMessageTestSuite, endByteTest) {
        -:  171:    // input buffer
        1:  172:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  173:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  174:
        -:  175:    // actual message
        -:  176:    Message actual_msg;
        1:  177:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:  177-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  178:
       1*:  179:    EXPECT_TRUE(result);
        1:  179-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  179-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  179-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  179-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  179-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  179-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  179-block  6
call   20 returned 1
    $$$$$:  179-block  7
call   21 never executed
    $$$$$:  179-block  8
call   22 never executed
    $$$$$:  179-block  9
    $$$$$:  179-block 10
    $$$$$:  179-block 11
call   23 never executed
    $$$$$:  179-block 12
    $$$$$:  179-block 13
call   24 never executed
       1*:  180:    EXPECT_EQ(0x7F, actual_msg.end_byte);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  180-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  180-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  180-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  180-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  180-block  4
call   16 never executed
call   17 never executed
        1:  180-block  5
call   18 returned 1
    $$$$$:  180-block  6
    $$$$$:  180-block  7
call   19 never executed
    $$$$$:  180-block  8
    $$$$$:  180-block  9
call   20 never executed
    $$$$$:  180-block 10
    $$$$$:  180-block 11
call   21 never executed
        1:  181:}
------------------
        -:  182:
        4:  183:TEST(convertArrayToMessageTestSuite, checksumVerificationTest) {
        -:  184:    // input buffer
        1:  185:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  186:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  187:
        -:  188:    // actual message
        -:  189:    Message actual_msg;
        1:  190:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        -:  191:
        1:  192:    uint8_t calculated_checksum = calculate_checksum_helper(actual_msg.msg_type, actual_msg.length, actual_msg.payload);
        -:  193:
       1*:  194:    EXPECT_TRUE(result);
       1*:  195:    EXPECT_EQ(calculated_checksum, actual_msg.checksum);
        1:  196:}
------------------
_ZN60convertArrayToMessageTestSuite_checksumVerificationTest_TestC1Ev:
function _ZN60convertArrayToMessageTestSuite_checksumVerificationTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  183:TEST(convertArrayToMessageTestSuite, checksumVerificationTest) {
        1:  183-block  0
call    0 returned 1
------------------
_ZN60convertArrayToMessageTestSuite_checksumVerificationTest_TestD0Ev:
function _ZN60convertArrayToMessageTestSuite_checksumVerificationTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  183:TEST(convertArrayToMessageTestSuite, checksumVerificationTest) {
        1:  183-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN60convertArrayToMessageTestSuite_checksumVerificationTest_TestD1Ev:
function _ZN60convertArrayToMessageTestSuite_checksumVerificationTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  183:TEST(convertArrayToMessageTestSuite, checksumVerificationTest) {
        1:  183-block  0
call    0 returned 1
------------------
_ZN60convertArrayToMessageTestSuite_checksumVerificationTest_Test8TestBodyEv:
function _ZN60convertArrayToMessageTestSuite_checksumVerificationTest_Test8TestBodyEv called 1 returned 100% blocks executed 24%
        1:  183:TEST(convertArrayToMessageTestSuite, checksumVerificationTest) {
        -:  184:    // input buffer
        1:  185:    uint8_t input_buffer[] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  186:    uint16_t input_length = sizeof(input_buffer) / sizeof(input_buffer[0]);
        -:  187:
        -:  188:    // actual message
        -:  189:    Message actual_msg;
        1:  190:    bool result = convert_array_to_message(input_buffer, input_length, &actual_msg);
        1:  190-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  191:
        1:  192:    uint8_t calculated_checksum = calculate_checksum_helper(actual_msg.msg_type, actual_msg.length, actual_msg.payload);
        1:  192-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  193:
       1*:  194:    EXPECT_TRUE(result);
        1:  194-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  194-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  194-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  194-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  194-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  194-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  194-block  6
call   20 returned 1
    $$$$$:  194-block  7
call   21 never executed
    $$$$$:  194-block  8
call   22 never executed
    $$$$$:  194-block  9
    $$$$$:  194-block 10
    $$$$$:  194-block 11
call   23 never executed
    $$$$$:  194-block 12
    $$$$$:  194-block 13
call   24 never executed
       1*:  195:    EXPECT_EQ(calculated_checksum, actual_msg.checksum);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  195-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  195-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  195-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  195-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  195-block  4
call   16 never executed
call   17 never executed
        1:  195-block  5
call   18 returned 1
    $$$$$:  195-block  6
call   19 never executed
    $$$$$:  195-block  7
    $$$$$:  195-block  8
call   20 never executed
    $$$$$:  195-block  9
    $$$$$:  195-block 10
call   21 never executed
        1:  196:}
------------------
        -:  197:
        -:  198:/*
        -:  199: * convert_message_to_array_tests.cpp file
        -:  200: *
        -:  201: * Testing file for the `convert_message_to_array` method. Multiple tests are executed here to demonstrate that the method behaves as expected.
        -:  202: * Created by Henri Vanhuynegem on 07/06/2024.
        -:  203: * Last edited: 10/06/2024.
        -:  204: *
        -:  205: * Tests:
        -:  206: * - Convert normal message to array test: Verify a normal message is correctly converted to an array.
        -:  207: * - Start byte test: Ensure the start byte is correctly placed in the output array.
        -:  208: * - Message type test: Verify the message type is correctly placed in the output array.
        -:  209: * - Message length test: Ensure the message length is correctly placed in the output array.
        -:  210: * - Empty payload test: Handle conversion when the payload is empty.
        -:  211: * - Payload longer than UART buffer test: Handle conversion when the payload length exceeds the UART buffer size.
        -:  212: * - Checksum test: Verify the checksum is correctly calculated and placed in the output array.
        -:  213: * - End byte test: Ensure the end byte is correctly placed in the output array.
        -:  214: * - Buffer check test: Verify the entire buffer is correctly populated with expected values.
        -:  215: * - Length check test: Ensure the output length is correctly calculated and returned.
        -:  216: */
        -:  217:
        4:  218:TEST(convertMessageToArrayTestSuite, convertNormalMessageToArrayTest){
        -:  219:    // create message structure
        -:  220:    Message msg;
        1:  221:    msg.start_byte = MSG_START_BYTE;
        1:  222:    msg.msg_type = MSG_TYPE_INIT;
        1:  223:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  224:    msg.length = strlen((char *)input_payload);
        1:  225:    memcpy(msg.payload, input_payload, msg.length);
        1:  226:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  227:    msg.end_byte = MSG_END_BYTE;
        -:  228:
        -:  229:    // output buffers
        -:  230:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  231:    uint8_t output_length;
        -:  232:
        -:  233:    // convert message to array
        1:  234:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  235:
        -:  236:    // expected result
        1:  237:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  238:    uint8_t expected_length = 9;
        -:  239:
       1*:  240:    EXPECT_EQ(output_length, expected_length);
       10:  241:    for(int i = 0; i < expected_length; i++){
       9*:  242:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  243:    }
        1:  244:}
------------------
_ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_TestC1Ev:
function _ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  218:TEST(convertMessageToArrayTestSuite, convertNormalMessageToArrayTest){
        1:  218-block  0
call    0 returned 1
------------------
_ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_TestD0Ev:
function _ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  218:TEST(convertMessageToArrayTestSuite, convertNormalMessageToArrayTest){
        1:  218-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_TestD1Ev:
function _ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  218:TEST(convertMessageToArrayTestSuite, convertNormalMessageToArrayTest){
        1:  218-block  0
call    0 returned 1
------------------
_ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_Test8TestBodyEv:
function _ZN67convertMessageToArrayTestSuite_convertNormalMessageToArrayTest_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:  218:TEST(convertMessageToArrayTestSuite, convertNormalMessageToArrayTest){
        -:  219:    // create message structure
        -:  220:    Message msg;
        1:  221:    msg.start_byte = MSG_START_BYTE;
        1:  222:    msg.msg_type = MSG_TYPE_INIT;
        1:  223:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  224:    msg.length = strlen((char *)input_payload);
        1:  225:    memcpy(msg.payload, input_payload, msg.length);
        1:  226:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  226-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  227:    msg.end_byte = MSG_END_BYTE;
        -:  228:
        -:  229:    // output buffers
        -:  230:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  231:    uint8_t output_length;
        -:  232:
        -:  233:    // convert message to array
        1:  234:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  234-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  235:
        -:  236:    // expected result
        1:  237:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
        1:  238:    uint8_t expected_length = 9;
        -:  239:
       1*:  240:    EXPECT_EQ(output_length, expected_length);
        1:  240-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  240-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  240-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  240-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  240-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  240-block  5
call   16 never executed
call   17 never executed
        1:  240-block  6
call   18 returned 1
    $$$$$:  240-block  7
call   19 never executed
    $$$$$:  240-block  8
    $$$$$:  240-block  9
call   20 never executed
    $$$$$:  240-block 10
    $$$$$:  240-block 11
call   21 never executed
       10:  241:    for(int i = 0; i < expected_length; i++){
       10:  241-block  0
branch  0 taken 9
branch  1 taken 1 (fallthrough)
       9*:  242:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        9:  242-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  242-block  1
call    3 returned 9
branch  4 taken 0 (fallthrough)
branch  5 taken 9
    %%%%%:  242-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  242-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  242-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  242-block  5
call   16 never executed
call   17 never executed
        9:  242-block  6
call   18 returned 9
    $$$$$:  242-block  7
call   19 never executed
    $$$$$:  242-block  8
    $$$$$:  242-block  9
call   20 never executed
    $$$$$:  242-block 10
    $$$$$:  242-block 11
call   21 never executed
        -:  243:    }
        1:  244:}
        1:  244-block  0
------------------
        -:  245:
        4:  246:TEST(convertMessageToArrayTestSuite, startByteTest){
        -:  247:    // create message structure
        -:  248:    Message msg;
        1:  249:    msg.start_byte = MSG_START_BYTE;
        1:  250:    msg.msg_type = MSG_TYPE_INIT;
        1:  251:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  252:    msg.length = strlen((char *)input_payload);
        1:  253:    memcpy(msg.payload, input_payload, msg.length);
        1:  254:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  255:    msg.end_byte = MSG_END_BYTE;
        -:  256:
        -:  257:    // output buffers
        -:  258:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  259:    uint8_t output_length;
        -:  260:
        -:  261:    // convert message to array
        1:  262:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  263:
        -:  264:    // expected start byte
       1*:  265:    EXPECT_EQ(output_buffer[0], MSG_START_BYTE);
        1:  266:}
------------------
_ZN49convertMessageToArrayTestSuite_startByteTest_TestC1Ev:
function _ZN49convertMessageToArrayTestSuite_startByteTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  246:TEST(convertMessageToArrayTestSuite, startByteTest){
        1:  246-block  0
call    0 returned 1
------------------
_ZN49convertMessageToArrayTestSuite_startByteTest_TestD0Ev:
function _ZN49convertMessageToArrayTestSuite_startByteTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  246:TEST(convertMessageToArrayTestSuite, startByteTest){
        1:  246-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49convertMessageToArrayTestSuite_startByteTest_TestD1Ev:
function _ZN49convertMessageToArrayTestSuite_startByteTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  246:TEST(convertMessageToArrayTestSuite, startByteTest){
        1:  246-block  0
call    0 returned 1
------------------
_ZN49convertMessageToArrayTestSuite_startByteTest_Test8TestBodyEv:
function _ZN49convertMessageToArrayTestSuite_startByteTest_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:  246:TEST(convertMessageToArrayTestSuite, startByteTest){
        -:  247:    // create message structure
        -:  248:    Message msg;
        1:  249:    msg.start_byte = MSG_START_BYTE;
        1:  250:    msg.msg_type = MSG_TYPE_INIT;
        1:  251:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  252:    msg.length = strlen((char *)input_payload);
        1:  253:    memcpy(msg.payload, input_payload, msg.length);
        1:  254:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  254-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  255:    msg.end_byte = MSG_END_BYTE;
        -:  256:
        -:  257:    // output buffers
        -:  258:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  259:    uint8_t output_length;
        -:  260:
        -:  261:    // convert message to array
        1:  262:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  262-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  263:
        -:  264:    // expected start byte
       1*:  265:    EXPECT_EQ(output_buffer[0], MSG_START_BYTE);
        1:  265-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  265-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  265-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  265-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  265-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  265-block  5
call   16 never executed
call   17 never executed
        1:  265-block  6
call   18 returned 1
    $$$$$:  265-block  7
    $$$$$:  265-block  8
call   19 never executed
    $$$$$:  265-block  9
    $$$$$:  265-block 10
call   20 never executed
    $$$$$:  265-block 11
    $$$$$:  265-block 12
call   21 never executed
        1:  266:}
------------------
        -:  267:
        4:  268:TEST(convertMessageToArrayTestSuite, messageTypeTest){
        -:  269:    // create message structure
        -:  270:    Message msg;
        1:  271:    msg.start_byte = MSG_START_BYTE;
        1:  272:    msg.msg_type = MSG_TYPE_INIT;
        1:  273:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  274:    msg.length = strlen((char *)input_payload);
        1:  275:    memcpy(msg.payload, input_payload, msg.length);
        1:  276:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  277:    msg.end_byte = MSG_END_BYTE;
        -:  278:
        -:  279:    // output buffers
        -:  280:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  281:    uint8_t output_length;
        -:  282:
        -:  283:    // convert message to array
        1:  284:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  285:
        -:  286:    // expected message type
       1*:  287:    EXPECT_EQ(output_buffer[1], MSG_TYPE_INIT);
        1:  288:}
------------------
_ZN51convertMessageToArrayTestSuite_messageTypeTest_TestC1Ev:
function _ZN51convertMessageToArrayTestSuite_messageTypeTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  268:TEST(convertMessageToArrayTestSuite, messageTypeTest){
        1:  268-block  0
call    0 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_messageTypeTest_TestD0Ev:
function _ZN51convertMessageToArrayTestSuite_messageTypeTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  268:TEST(convertMessageToArrayTestSuite, messageTypeTest){
        1:  268-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_messageTypeTest_TestD1Ev:
function _ZN51convertMessageToArrayTestSuite_messageTypeTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  268:TEST(convertMessageToArrayTestSuite, messageTypeTest){
        1:  268-block  0
call    0 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_messageTypeTest_Test8TestBodyEv:
function _ZN51convertMessageToArrayTestSuite_messageTypeTest_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:  268:TEST(convertMessageToArrayTestSuite, messageTypeTest){
        -:  269:    // create message structure
        -:  270:    Message msg;
        1:  271:    msg.start_byte = MSG_START_BYTE;
        1:  272:    msg.msg_type = MSG_TYPE_INIT;
        1:  273:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  274:    msg.length = strlen((char *)input_payload);
        1:  275:    memcpy(msg.payload, input_payload, msg.length);
        1:  276:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  276-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  277:    msg.end_byte = MSG_END_BYTE;
        -:  278:
        -:  279:    // output buffers
        -:  280:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  281:    uint8_t output_length;
        -:  282:
        -:  283:    // convert message to array
        1:  284:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  284-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  285:
        -:  286:    // expected message type
       1*:  287:    EXPECT_EQ(output_buffer[1], MSG_TYPE_INIT);
        1:  287-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  287-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  287-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  287-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  287-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  287-block  5
call   16 never executed
call   17 never executed
        1:  287-block  6
call   18 returned 1
    $$$$$:  287-block  7
    $$$$$:  287-block  8
call   19 never executed
    $$$$$:  287-block  9
    $$$$$:  287-block 10
call   20 never executed
    $$$$$:  287-block 11
    $$$$$:  287-block 12
call   21 never executed
        1:  288:}
------------------
        -:  289:
        4:  290:TEST(convertMessageToArrayTestSuite, messageLengthTest){
        -:  291:    // create message structure
        -:  292:    Message msg;
        1:  293:    msg.start_byte = MSG_START_BYTE;
        1:  294:    msg.msg_type = MSG_TYPE_INIT;
        1:  295:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  296:    msg.length = strlen((char *)input_payload);
        1:  297:    memcpy(msg.payload, input_payload, msg.length);
        1:  298:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  299:    msg.end_byte = MSG_END_BYTE;
        -:  300:
        -:  301:    // output buffers
        -:  302:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  303:    uint8_t output_length;
        -:  304:
        -:  305:    // convert message to array
        1:  306:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  307:
        -:  308:    // expected length
       1*:  309:    EXPECT_EQ(output_buffer[2], msg.length);
        1:  310:}
------------------
_ZN53convertMessageToArrayTestSuite_messageLengthTest_TestC1Ev:
function _ZN53convertMessageToArrayTestSuite_messageLengthTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  290:TEST(convertMessageToArrayTestSuite, messageLengthTest){
        1:  290-block  0
call    0 returned 1
------------------
_ZN53convertMessageToArrayTestSuite_messageLengthTest_TestD0Ev:
function _ZN53convertMessageToArrayTestSuite_messageLengthTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  290:TEST(convertMessageToArrayTestSuite, messageLengthTest){
        1:  290-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN53convertMessageToArrayTestSuite_messageLengthTest_TestD1Ev:
function _ZN53convertMessageToArrayTestSuite_messageLengthTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  290:TEST(convertMessageToArrayTestSuite, messageLengthTest){
        1:  290-block  0
call    0 returned 1
------------------
_ZN53convertMessageToArrayTestSuite_messageLengthTest_Test8TestBodyEv:
function _ZN53convertMessageToArrayTestSuite_messageLengthTest_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  290:TEST(convertMessageToArrayTestSuite, messageLengthTest){
        -:  291:    // create message structure
        -:  292:    Message msg;
        1:  293:    msg.start_byte = MSG_START_BYTE;
        1:  294:    msg.msg_type = MSG_TYPE_INIT;
        1:  295:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  296:    msg.length = strlen((char *)input_payload);
        1:  297:    memcpy(msg.payload, input_payload, msg.length);
        1:  298:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  298-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  299:    msg.end_byte = MSG_END_BYTE;
        -:  300:
        -:  301:    // output buffers
        -:  302:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  303:    uint8_t output_length;
        -:  304:
        -:  305:    // convert message to array
        1:  306:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  306-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  307:
        -:  308:    // expected length
       1*:  309:    EXPECT_EQ(output_buffer[2], msg.length);
        1:  309-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  309-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  309-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  309-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  309-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  309-block  5
call   16 never executed
call   17 never executed
        1:  309-block  6
call   18 returned 1
    $$$$$:  309-block  7
call   19 never executed
    $$$$$:  309-block  8
    $$$$$:  309-block  9
call   20 never executed
    $$$$$:  309-block 10
    $$$$$:  309-block 11
call   21 never executed
        1:  310:}
------------------
        -:  311:
        4:  312:TEST(convertMessageToArrayTestSuite, emptyPayloadTest){
        -:  313:    // create message structure
        -:  314:    Message msg;
        1:  315:    msg.start_byte = MSG_START_BYTE;
        1:  316:    msg.msg_type = MSG_TYPE_INIT;
        1:  317:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "";
        1:  318:    msg.length = 0;
        1:  319:    memcpy(msg.payload, input_payload, msg.length);
        1:  320:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  321:    msg.end_byte = MSG_END_BYTE;
        -:  322:
        -:  323:    // output buffers
        -:  324:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  325:    uint8_t output_length;
        -:  326:
        -:  327:    // convert message to array
        1:  328:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  329:
        -:  330:    // expected result
        1:  331:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x7E, 0x01, 0x00, 0x01, 0x7F}; // Checksum would be only msg_type + length
        1:  332:    uint8_t expected_length = 5;
        -:  333:
       1*:  334:    EXPECT_EQ(output_length, expected_length);
        6:  335:    for(int i = 0; i < expected_length; i++){
       5*:  336:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  337:    }
        1:  338:}
------------------
_ZN52convertMessageToArrayTestSuite_emptyPayloadTest_TestC1Ev:
function _ZN52convertMessageToArrayTestSuite_emptyPayloadTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  312:TEST(convertMessageToArrayTestSuite, emptyPayloadTest){
        1:  312-block  0
call    0 returned 1
------------------
_ZN52convertMessageToArrayTestSuite_emptyPayloadTest_TestD0Ev:
function _ZN52convertMessageToArrayTestSuite_emptyPayloadTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  312:TEST(convertMessageToArrayTestSuite, emptyPayloadTest){
        1:  312-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52convertMessageToArrayTestSuite_emptyPayloadTest_TestD1Ev:
function _ZN52convertMessageToArrayTestSuite_emptyPayloadTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  312:TEST(convertMessageToArrayTestSuite, emptyPayloadTest){
        1:  312-block  0
call    0 returned 1
------------------
_ZN52convertMessageToArrayTestSuite_emptyPayloadTest_Test8TestBodyEv:
function _ZN52convertMessageToArrayTestSuite_emptyPayloadTest_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:  312:TEST(convertMessageToArrayTestSuite, emptyPayloadTest){
        -:  313:    // create message structure
        -:  314:    Message msg;
        1:  315:    msg.start_byte = MSG_START_BYTE;
        1:  316:    msg.msg_type = MSG_TYPE_INIT;
        1:  317:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "";
        1:  318:    msg.length = 0;
        1:  319:    memcpy(msg.payload, input_payload, msg.length);
        1:  320:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  320-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  321:    msg.end_byte = MSG_END_BYTE;
        -:  322:
        -:  323:    // output buffers
        -:  324:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  325:    uint8_t output_length;
        -:  326:
        -:  327:    // convert message to array
        1:  328:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  328-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  329:
        -:  330:    // expected result
        1:  331:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x7E, 0x01, 0x00, 0x01, 0x7F}; // Checksum would be only msg_type + length
        1:  332:    uint8_t expected_length = 5;
        -:  333:
       1*:  334:    EXPECT_EQ(output_length, expected_length);
        1:  334-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  334-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  334-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  334-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  334-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  334-block  5
call   16 never executed
call   17 never executed
        1:  334-block  6
call   18 returned 1
    $$$$$:  334-block  7
call   19 never executed
    $$$$$:  334-block  8
    $$$$$:  334-block  9
call   20 never executed
    $$$$$:  334-block 10
    $$$$$:  334-block 11
call   21 never executed
        6:  335:    for(int i = 0; i < expected_length; i++){
        6:  335-block  0
branch  0 taken 5
branch  1 taken 1 (fallthrough)
       5*:  336:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        5:  336-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  336-block  1
call    3 returned 5
branch  4 taken 0 (fallthrough)
branch  5 taken 5
    %%%%%:  336-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  336-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  336-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  336-block  5
call   16 never executed
call   17 never executed
        5:  336-block  6
call   18 returned 5
    $$$$$:  336-block  7
call   19 never executed
    $$$$$:  336-block  8
    $$$$$:  336-block  9
call   20 never executed
    $$$$$:  336-block 10
    $$$$$:  336-block 11
call   21 never executed
        -:  337:    }
        1:  338:}
        1:  338-block  0
------------------
        -:  339:
        4:  340:TEST(convertMessageToArrayTestSuite, payloadLongerThanUARTBufferTest){
        -:  341:    // create message structure
        -:  342:    Message msg;
        1:  343:    msg.start_byte = MSG_START_BYTE;
        1:  344:    msg.msg_type = MSG_TYPE_INIT;
        -:  345:    uint8_t input_payload[MAX_PAYLOAD_SIZE]; // longer than UART_BUFFER_SIZE
        1:  346:    memset(input_payload, 'A', MAX_PAYLOAD_SIZE);
        1:  347:    msg.length = UART_BUFFER_SIZE-1;
        1:  348:    memcpy(msg.payload, input_payload, MAX_PAYLOAD_SIZE);
        1:  349:    msg.checksum = calculate_checksum_helper(msg.msg_type, MAX_PAYLOAD_SIZE, msg.payload);
        1:  350:    msg.end_byte = MSG_END_BYTE;
        -:  351:
        -:  352:    // output buffers
        -:  353:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  354:    uint8_t output_length;
        -:  355:
        -:  356:    // convert message to array
        1:  357:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  358:
        -:  359:    // expected result
        1:  360:    uint8_t expected_length = UART_BUFFER_SIZE-2;
        -:  361:    uint8_t expected_buffer[UART_BUFFER_SIZE]; // longer than UART_BUFFER_SIZE
        1:  362:    memset(expected_buffer, 'A', expected_length);
        1:  363:    expected_buffer[0] = MSG_START_BYTE;
        1:  364:    expected_buffer[1] = MSG_TYPE_INIT;
        1:  365:    expected_buffer[2] = MAX_PAYLOAD_SIZE;
        1:  366:    expected_buffer[UART_BUFFER_SIZE-4] = 0xb9;
        1:  367:    expected_buffer[UART_BUFFER_SIZE-3] = MSG_END_BYTE;
        -:  368:
       1*:  369:    EXPECT_EQ(expected_length, output_length);
      255:  370:    for(int i = 0; i < expected_length; i++){
     254*:  371:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  372:    }
        1:  373:}
------------------
_ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_TestC1Ev:
function _ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  340:TEST(convertMessageToArrayTestSuite, payloadLongerThanUARTBufferTest){
        1:  340-block  0
call    0 returned 1
------------------
_ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_TestD0Ev:
function _ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  340:TEST(convertMessageToArrayTestSuite, payloadLongerThanUARTBufferTest){
        1:  340-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_TestD1Ev:
function _ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  340:TEST(convertMessageToArrayTestSuite, payloadLongerThanUARTBufferTest){
        1:  340-block  0
call    0 returned 1
------------------
_ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_Test8TestBodyEv:
function _ZN67convertMessageToArrayTestSuite_payloadLongerThanUARTBufferTest_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:  340:TEST(convertMessageToArrayTestSuite, payloadLongerThanUARTBufferTest){
        -:  341:    // create message structure
        -:  342:    Message msg;
        1:  343:    msg.start_byte = MSG_START_BYTE;
        1:  344:    msg.msg_type = MSG_TYPE_INIT;
        -:  345:    uint8_t input_payload[MAX_PAYLOAD_SIZE]; // longer than UART_BUFFER_SIZE
        1:  346:    memset(input_payload, 'A', MAX_PAYLOAD_SIZE);
        1:  347:    msg.length = UART_BUFFER_SIZE-1;
        1:  348:    memcpy(msg.payload, input_payload, MAX_PAYLOAD_SIZE);
        1:  349:    msg.checksum = calculate_checksum_helper(msg.msg_type, MAX_PAYLOAD_SIZE, msg.payload);
        1:  349-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  350:    msg.end_byte = MSG_END_BYTE;
        -:  351:
        -:  352:    // output buffers
        -:  353:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  354:    uint8_t output_length;
        -:  355:
        -:  356:    // convert message to array
        1:  357:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  357-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  358:
        -:  359:    // expected result
        1:  360:    uint8_t expected_length = UART_BUFFER_SIZE-2;
        -:  361:    uint8_t expected_buffer[UART_BUFFER_SIZE]; // longer than UART_BUFFER_SIZE
        1:  362:    memset(expected_buffer, 'A', expected_length);
        1:  363:    expected_buffer[0] = MSG_START_BYTE;
        1:  364:    expected_buffer[1] = MSG_TYPE_INIT;
        1:  365:    expected_buffer[2] = MAX_PAYLOAD_SIZE;
        1:  366:    expected_buffer[UART_BUFFER_SIZE-4] = 0xb9;
        1:  367:    expected_buffer[UART_BUFFER_SIZE-3] = MSG_END_BYTE;
        -:  368:
       1*:  369:    EXPECT_EQ(expected_length, output_length);
        1:  369-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  369-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  369-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  369-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  369-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  369-block  5
call   16 never executed
call   17 never executed
        1:  369-block  6
call   18 returned 1
    $$$$$:  369-block  7
call   19 never executed
    $$$$$:  369-block  8
    $$$$$:  369-block  9
call   20 never executed
    $$$$$:  369-block 10
    $$$$$:  369-block 11
call   21 never executed
      255:  370:    for(int i = 0; i < expected_length; i++){
      255:  370-block  0
branch  0 taken 254
branch  1 taken 1 (fallthrough)
     254*:  371:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
      254:  371-block  0
call    0 returned 254
branch  1 taken 254 (fallthrough)
branch  2 taken 0 (throw)
      254:  371-block  1
call    3 returned 254
branch  4 taken 0 (fallthrough)
branch  5 taken 254
    %%%%%:  371-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  371-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  371-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  371-block  5
call   16 never executed
call   17 never executed
      254:  371-block  6
call   18 returned 254
    $$$$$:  371-block  7
call   19 never executed
    $$$$$:  371-block  8
    $$$$$:  371-block  9
call   20 never executed
    $$$$$:  371-block 10
    $$$$$:  371-block 11
call   21 never executed
        -:  372:    }
        1:  373:}
        1:  373-block  0
------------------
        -:  374:
        4:  375:TEST(convertMessageToArrayTestSuite, checksumTest){
        -:  376:    // create message structure
        -:  377:    Message msg;
        1:  378:    msg.start_byte = MSG_START_BYTE;
        1:  379:    msg.msg_type = MSG_TYPE_INIT;
        1:  380:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  381:    msg.length = strlen((char *)input_payload);
        1:  382:    memcpy(msg.payload, input_payload, msg.length);
        1:  383:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  384:    msg.end_byte = MSG_END_BYTE;
        -:  385:
        -:  386:    // output buffers
        -:  387:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  388:    uint8_t output_length;
        -:  389:
        -:  390:    // convert message to array
        1:  391:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  392:
        -:  393:    // expected checksum
        1:  394:    uint8_t expected_checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
       1*:  395:    EXPECT_EQ(output_buffer[7], expected_checksum);
        1:  396:}
------------------
_ZN48convertMessageToArrayTestSuite_checksumTest_TestC1Ev:
function _ZN48convertMessageToArrayTestSuite_checksumTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  375:TEST(convertMessageToArrayTestSuite, checksumTest){
        1:  375-block  0
call    0 returned 1
------------------
_ZN48convertMessageToArrayTestSuite_checksumTest_TestD0Ev:
function _ZN48convertMessageToArrayTestSuite_checksumTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  375:TEST(convertMessageToArrayTestSuite, checksumTest){
        1:  375-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48convertMessageToArrayTestSuite_checksumTest_TestD1Ev:
function _ZN48convertMessageToArrayTestSuite_checksumTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  375:TEST(convertMessageToArrayTestSuite, checksumTest){
        1:  375-block  0
call    0 returned 1
------------------
_ZN48convertMessageToArrayTestSuite_checksumTest_Test8TestBodyEv:
function _ZN48convertMessageToArrayTestSuite_checksumTest_Test8TestBodyEv called 1 returned 100% blocks executed 36%
        1:  375:TEST(convertMessageToArrayTestSuite, checksumTest){
        -:  376:    // create message structure
        -:  377:    Message msg;
        1:  378:    msg.start_byte = MSG_START_BYTE;
        1:  379:    msg.msg_type = MSG_TYPE_INIT;
        1:  380:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  381:    msg.length = strlen((char *)input_payload);
        1:  382:    memcpy(msg.payload, input_payload, msg.length);
        1:  383:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  383-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  384:    msg.end_byte = MSG_END_BYTE;
        -:  385:
        -:  386:    // output buffers
        -:  387:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  388:    uint8_t output_length;
        -:  389:
        -:  390:    // convert message to array
        1:  391:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  391-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  392:
        -:  393:    // expected checksum
        1:  394:    uint8_t expected_checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  394-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  395:    EXPECT_EQ(output_buffer[7], expected_checksum);
        1:  395-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  395-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  395-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  395-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  395-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  395-block  5
call   16 never executed
call   17 never executed
        1:  395-block  6
call   18 returned 1
    $$$$$:  395-block  7
call   19 never executed
    $$$$$:  395-block  8
    $$$$$:  395-block  9
call   20 never executed
    $$$$$:  395-block 10
    $$$$$:  395-block 11
call   21 never executed
        1:  396:}
------------------
        -:  397:
        4:  398:TEST(convertMessageToArrayTestSuite, endByteTest){
        -:  399:    // create message structure
        -:  400:    Message msg;
        1:  401:    msg.start_byte = MSG_START_BYTE;
        1:  402:    msg.msg_type = MSG_TYPE_INIT;
        1:  403:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  404:    msg.length = strlen((char *)input_payload);
        1:  405:    memcpy(msg.payload, input_payload, msg.length);
        1:  406:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  407:    msg.end_byte = MSG_END_BYTE;
        -:  408:
        -:  409:    // output buffers
        -:  410:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  411:    uint8_t output_length;
        -:  412:
        -:  413:    // convert message to array
        1:  414:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  415:
        -:  416:    // expected end byte
       1*:  417:    EXPECT_EQ(output_buffer[8], MSG_END_BYTE);
        1:  418:}
------------------
_ZN47convertMessageToArrayTestSuite_endByteTest_TestC1Ev:
function _ZN47convertMessageToArrayTestSuite_endByteTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  398:TEST(convertMessageToArrayTestSuite, endByteTest){
        1:  398-block  0
call    0 returned 1
------------------
_ZN47convertMessageToArrayTestSuite_endByteTest_TestD0Ev:
function _ZN47convertMessageToArrayTestSuite_endByteTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  398:TEST(convertMessageToArrayTestSuite, endByteTest){
        1:  398-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47convertMessageToArrayTestSuite_endByteTest_TestD1Ev:
function _ZN47convertMessageToArrayTestSuite_endByteTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  398:TEST(convertMessageToArrayTestSuite, endByteTest){
        1:  398-block  0
call    0 returned 1
------------------
_ZN47convertMessageToArrayTestSuite_endByteTest_Test8TestBodyEv:
function _ZN47convertMessageToArrayTestSuite_endByteTest_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:  398:TEST(convertMessageToArrayTestSuite, endByteTest){
        -:  399:    // create message structure
        -:  400:    Message msg;
        1:  401:    msg.start_byte = MSG_START_BYTE;
        1:  402:    msg.msg_type = MSG_TYPE_INIT;
        1:  403:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  404:    msg.length = strlen((char *)input_payload);
        1:  405:    memcpy(msg.payload, input_payload, msg.length);
        1:  406:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  406-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  407:    msg.end_byte = MSG_END_BYTE;
        -:  408:
        -:  409:    // output buffers
        -:  410:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  411:    uint8_t output_length;
        -:  412:
        -:  413:    // convert message to array
        1:  414:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  414-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  415:
        -:  416:    // expected end byte
       1*:  417:    EXPECT_EQ(output_buffer[8], MSG_END_BYTE);
        1:  417-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  417-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  417-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  417-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  417-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  417-block  5
call   16 never executed
call   17 never executed
        1:  417-block  6
call   18 returned 1
    $$$$$:  417-block  7
    $$$$$:  417-block  8
call   19 never executed
    $$$$$:  417-block  9
    $$$$$:  417-block 10
call   20 never executed
    $$$$$:  417-block 11
    $$$$$:  417-block 12
call   21 never executed
        1:  418:}
------------------
        -:  419:
        4:  420:TEST(convertMessageToArrayTestSuite, bufferCheckTest){
        -:  421:    // create message structure
        -:  422:    Message msg;
        1:  423:    msg.start_byte = MSG_START_BYTE;
        1:  424:    msg.msg_type = MSG_TYPE_INIT;
        1:  425:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  426:    msg.length = strlen((char *)input_payload);
        1:  427:    memcpy(msg.payload, input_payload, msg.length);
        1:  428:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  429:    msg.end_byte = MSG_END_BYTE;
        -:  430:
        -:  431:    // output buffers
        -:  432:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  433:    uint8_t output_length;
        -:  434:
        -:  435:    // convert message to array
        1:  436:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  437:
        -:  438:    // expected buffer
        1:  439:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
       10:  440:    for(int i = 0; i < output_length; i++){
       9*:  441:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  442:    }
        1:  443:}
------------------
_ZN51convertMessageToArrayTestSuite_bufferCheckTest_TestC1Ev:
function _ZN51convertMessageToArrayTestSuite_bufferCheckTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  420:TEST(convertMessageToArrayTestSuite, bufferCheckTest){
        1:  420-block  0
call    0 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_bufferCheckTest_TestD0Ev:
function _ZN51convertMessageToArrayTestSuite_bufferCheckTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  420:TEST(convertMessageToArrayTestSuite, bufferCheckTest){
        1:  420-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_bufferCheckTest_TestD1Ev:
function _ZN51convertMessageToArrayTestSuite_bufferCheckTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  420:TEST(convertMessageToArrayTestSuite, bufferCheckTest){
        1:  420-block  0
call    0 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_bufferCheckTest_Test8TestBodyEv:
function _ZN51convertMessageToArrayTestSuite_bufferCheckTest_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  420:TEST(convertMessageToArrayTestSuite, bufferCheckTest){
        -:  421:    // create message structure
        -:  422:    Message msg;
        1:  423:    msg.start_byte = MSG_START_BYTE;
        1:  424:    msg.msg_type = MSG_TYPE_INIT;
        1:  425:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  426:    msg.length = strlen((char *)input_payload);
        1:  427:    memcpy(msg.payload, input_payload, msg.length);
        1:  428:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  428-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  429:    msg.end_byte = MSG_END_BYTE;
        -:  430:
        -:  431:    // output buffers
        -:  432:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  433:    uint8_t output_length;
        -:  434:
        -:  435:    // convert message to array
        1:  436:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  436-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  437:
        -:  438:    // expected buffer
        1:  439:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x7E, 0x01, 0x04, 0x74, 0x65, 0x73, 0x74, 0x13, 0x7F};
       10:  440:    for(int i = 0; i < output_length; i++){
        1:  440-block  0
       10:  440-block  1
branch  0 taken 9
branch  1 taken 1 (fallthrough)
       9*:  441:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        9:  441-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  441-block  1
call    3 returned 9
branch  4 taken 0 (fallthrough)
branch  5 taken 9
    %%%%%:  441-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  441-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  441-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  441-block  5
call   16 never executed
call   17 never executed
        9:  441-block  6
call   18 returned 9
    $$$$$:  441-block  7
call   19 never executed
    $$$$$:  441-block  8
    $$$$$:  441-block  9
call   20 never executed
    $$$$$:  441-block 10
    $$$$$:  441-block 11
call   21 never executed
        -:  442:    }
        1:  443:}
        1:  443-block  0
------------------
        -:  444:
        4:  445:TEST(convertMessageToArrayTestSuite, lengthCheckTest){
        -:  446:    // create message structure
        -:  447:    Message msg;
        1:  448:    msg.start_byte = MSG_START_BYTE;
        1:  449:    msg.msg_type = MSG_TYPE_INIT;
        1:  450:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  451:    msg.length = strlen((char *)input_payload);
        1:  452:    memcpy(msg.payload, input_payload, msg.length);
        1:  453:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  454:    msg.end_byte = MSG_END_BYTE;
        -:  455:
        -:  456:    // output buffers
        -:  457:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  458:    uint8_t output_length;
        -:  459:
        -:  460:    // convert message to array
        1:  461:    convert_message_to_array(&msg, output_buffer, &output_length);
        -:  462:
        -:  463:    // expected length
        1:  464:    uint8_t expected_length = 9;
       1*:  465:    EXPECT_EQ(output_length, expected_length);
        1:  466:}
------------------
_ZN51convertMessageToArrayTestSuite_lengthCheckTest_TestC1Ev:
function _ZN51convertMessageToArrayTestSuite_lengthCheckTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  445:TEST(convertMessageToArrayTestSuite, lengthCheckTest){
        1:  445-block  0
call    0 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_lengthCheckTest_TestD0Ev:
function _ZN51convertMessageToArrayTestSuite_lengthCheckTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  445:TEST(convertMessageToArrayTestSuite, lengthCheckTest){
        1:  445-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_lengthCheckTest_TestD1Ev:
function _ZN51convertMessageToArrayTestSuite_lengthCheckTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  445:TEST(convertMessageToArrayTestSuite, lengthCheckTest){
        1:  445-block  0
call    0 returned 1
------------------
_ZN51convertMessageToArrayTestSuite_lengthCheckTest_Test8TestBodyEv:
function _ZN51convertMessageToArrayTestSuite_lengthCheckTest_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  445:TEST(convertMessageToArrayTestSuite, lengthCheckTest){
        -:  446:    // create message structure
        -:  447:    Message msg;
        1:  448:    msg.start_byte = MSG_START_BYTE;
        1:  449:    msg.msg_type = MSG_TYPE_INIT;
        1:  450:    uint8_t input_payload[MAX_PAYLOAD_SIZE] = "test";
        1:  451:    msg.length = strlen((char *)input_payload);
        1:  452:    memcpy(msg.payload, input_payload, msg.length);
        1:  453:    msg.checksum = calculate_checksum_helper(msg.msg_type, msg.length, msg.payload);
        1:  453-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  454:    msg.end_byte = MSG_END_BYTE;
        -:  455:
        -:  456:    // output buffers
        -:  457:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  458:    uint8_t output_length;
        -:  459:
        -:  460:    // convert message to array
        1:  461:    convert_message_to_array(&msg, output_buffer, &output_length);
        1:  461-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  462:
        -:  463:    // expected length
        1:  464:    uint8_t expected_length = 9;
       1*:  465:    EXPECT_EQ(output_length, expected_length);
        1:  465-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  465-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  465-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  465-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  465-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  465-block  5
call   16 never executed
call   17 never executed
        1:  465-block  6
call   18 returned 1
    $$$$$:  465-block  7
call   19 never executed
    $$$$$:  465-block  8
    $$$$$:  465-block  9
call   20 never executed
    $$$$$:  465-block 10
    $$$$$:  465-block 11
call   21 never executed
        1:  466:}
------------------
        -:  467:/*
        -:  468: * slip_decoding_tests.cpp file
        -:  469: *
        -:  470: * Testing file for SLIP decoding method. Multiple tests are executed here to demonstrate that the method behaves as expected. Below is a list of all tested functionalities and situations.
        -:  471: * Created by Henri Vanhuynegem on 06/06/2024.
        -:  472: * Last edited: 07/06/2024.
        -:  473: *
        -:  474: * Tests:
        -:  475: * - Normal data test: Ensure regular data bytes are passed through unchanged after decoding.
        -:  476: * - Start byte removed test: Verify the payload has the start byte removed.
        -:  477: * - End byte removed test: Verify the payload has the end byte removed.
        -:  478: * - Empty buffer test: Handle decoding when the input buffer is empty.
        -:  479: * - Empty payload test: Handle decoding when the payload is empty.
        -:  480: * - Input length larger than UART buffer test: Handle decoding when the input length exceeds the UART buffer size.
        -:  481: * - ESC + ESC_END replacement test: Replace ESC + ESC_END bytes in the input buffer with END.
        -:  482: * - ESC + ESC_ESC replacement test: Replace ESC + ESC_ESC bytes in the input buffer with ESC.
        -:  483: * - Sequential END bytes test: Handle sequential END bytes correctly.
        -:  484: * - Sequential ESC bytes test: Handle sequential ESC bytes correctly.
        -:  485: * - Mixed ESC + ESC_END and ESC + ESC_ESC bytes test: Handle a mixture of ESC + ESC_END and ESC + ESC_ESC bytes correctly.
        -:  486: * - Maximum buffer size test: Verify decoding with the maximum allowable input buffer size.
        -:  487: * - Check all four different characters for decoding: Verify decoding for all special character sequences.
        -:  488: * - Length zero test: Correctly return false if the input length is smaller than 2 or if the start or end byte is not equal to END.
        -:  489: */
        -:  490:
        -:  491:
        4:  492:TEST(slip_decoding_testsSuite, NormalDataTest){
        -:  493:    // input buffer with data
        1:  494:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0x48, 0x69, 0xC0};
        1:  495:    uint16_t input_length = 4;
        -:  496:    // output buffer after decoding
        -:  497:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  498:    uint16_t output_length;
        -:  499:    bool result;
        -:  500:
        -:  501:    // expected buffer
        1:  502:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x48, 0x69};
        1:  503:    uint16_t expected_length = 2;
        1:  504:    bool expected_result = true;
        -:  505:
        -:  506:    // decoding
        1:  507:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  508:
        -:  509:    // Assertions
       1*:  510:    EXPECT_EQ(result, expected_result);
       1*:  511:    EXPECT_EQ(output_length, expected_length);
        3:  512:    for(int i = 0; i < expected_length; i++){
       2*:  513:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  514:    }
        1:  515:}
------------------
_ZN44slip_decoding_testsSuite_NormalDataTest_TestC1Ev:
function _ZN44slip_decoding_testsSuite_NormalDataTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  492:TEST(slip_decoding_testsSuite, NormalDataTest){
        1:  492-block  0
call    0 returned 1
------------------
_ZN44slip_decoding_testsSuite_NormalDataTest_TestD0Ev:
function _ZN44slip_decoding_testsSuite_NormalDataTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  492:TEST(slip_decoding_testsSuite, NormalDataTest){
        1:  492-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44slip_decoding_testsSuite_NormalDataTest_TestD1Ev:
function _ZN44slip_decoding_testsSuite_NormalDataTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  492:TEST(slip_decoding_testsSuite, NormalDataTest){
        1:  492-block  0
call    0 returned 1
------------------
_ZN44slip_decoding_testsSuite_NormalDataTest_Test8TestBodyEv:
function _ZN44slip_decoding_testsSuite_NormalDataTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  492:TEST(slip_decoding_testsSuite, NormalDataTest){
        -:  493:    // input buffer with data
        1:  494:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0x48, 0x69, 0xC0};
        1:  495:    uint16_t input_length = 4;
        -:  496:    // output buffer after decoding
        -:  497:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  498:    uint16_t output_length;
        -:  499:    bool result;
        -:  500:
        -:  501:    // expected buffer
        1:  502:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x48, 0x69};
        1:  503:    uint16_t expected_length = 2;
        1:  504:    bool expected_result = true;
        -:  505:
        -:  506:    // decoding
        1:  507:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  507-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  508:
        -:  509:    // Assertions
       1*:  510:    EXPECT_EQ(result, expected_result);
        1:  510-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  510-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  510-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  510-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  510-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  510-block  5
call   16 never executed
call   17 never executed
        1:  510-block  6
call   18 returned 1
    $$$$$:  510-block  7
call   19 never executed
    $$$$$:  510-block  8
    $$$$$:  510-block  9
call   20 never executed
    $$$$$:  510-block 10
    $$$$$:  510-block 11
call   21 never executed
       1*:  511:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  511-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  511-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  511-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  511-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  511-block  4
call   16 never executed
call   17 never executed
        1:  511-block  5
call   18 returned 1
    $$$$$:  511-block  6
call   19 never executed
    $$$$$:  511-block  7
    $$$$$:  511-block  8
call   20 never executed
    $$$$$:  511-block  9
    $$$$$:  511-block 10
call   21 never executed
        3:  512:    for(int i = 0; i < expected_length; i++){
        3:  512-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
       2*:  513:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        2:  513-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  513-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  513-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  513-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  513-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  513-block  5
call   16 never executed
call   17 never executed
        2:  513-block  6
call   18 returned 2
    $$$$$:  513-block  7
call   19 never executed
    $$$$$:  513-block  8
    $$$$$:  513-block  9
call   20 never executed
    $$$$$:  513-block 10
    $$$$$:  513-block 11
call   21 never executed
        -:  514:    }
        1:  515:}
        1:  515-block  0
------------------
        -:  516:
        4:  517:TEST(slip_decoding_testsSuite, StartByteRemovedTest){
        -:  518:    // input buffer with data
        1:  519:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0x01, 0x02, 0xC0};
        1:  520:    uint16_t input_length = 4;
        -:  521:    // output buffer after decoding
        -:  522:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  523:    uint16_t output_length;
        -:  524:    bool result;
        -:  525:
        -:  526:    // expected buffer
        1:  527:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x01, 0x02};
        1:  528:    uint16_t expected_length = 2;
        1:  529:    bool expected_result = true;
        -:  530:
        -:  531:    // decoding
        1:  532:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  533:
        -:  534:    // Assertions
       1*:  535:    EXPECT_EQ(result, expected_result);
       1*:  536:    EXPECT_EQ(output_length, expected_length);
        3:  537:    for(int i = 0; i < expected_length; i++){
       2*:  538:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  539:    }
        1:  540:}
------------------
_ZN50slip_decoding_testsSuite_StartByteRemovedTest_TestC1Ev:
function _ZN50slip_decoding_testsSuite_StartByteRemovedTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  517:TEST(slip_decoding_testsSuite, StartByteRemovedTest){
        1:  517-block  0
call    0 returned 1
------------------
_ZN50slip_decoding_testsSuite_StartByteRemovedTest_TestD0Ev:
function _ZN50slip_decoding_testsSuite_StartByteRemovedTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  517:TEST(slip_decoding_testsSuite, StartByteRemovedTest){
        1:  517-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN50slip_decoding_testsSuite_StartByteRemovedTest_TestD1Ev:
function _ZN50slip_decoding_testsSuite_StartByteRemovedTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  517:TEST(slip_decoding_testsSuite, StartByteRemovedTest){
        1:  517-block  0
call    0 returned 1
------------------
_ZN50slip_decoding_testsSuite_StartByteRemovedTest_Test8TestBodyEv:
function _ZN50slip_decoding_testsSuite_StartByteRemovedTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  517:TEST(slip_decoding_testsSuite, StartByteRemovedTest){
        -:  518:    // input buffer with data
        1:  519:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0x01, 0x02, 0xC0};
        1:  520:    uint16_t input_length = 4;
        -:  521:    // output buffer after decoding
        -:  522:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  523:    uint16_t output_length;
        -:  524:    bool result;
        -:  525:
        -:  526:    // expected buffer
        1:  527:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x01, 0x02};
        1:  528:    uint16_t expected_length = 2;
        1:  529:    bool expected_result = true;
        -:  530:
        -:  531:    // decoding
        1:  532:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  532-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  533:
        -:  534:    // Assertions
       1*:  535:    EXPECT_EQ(result, expected_result);
        1:  535-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  535-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  535-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  535-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  535-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  535-block  5
call   16 never executed
call   17 never executed
        1:  535-block  6
call   18 returned 1
    $$$$$:  535-block  7
call   19 never executed
    $$$$$:  535-block  8
    $$$$$:  535-block  9
call   20 never executed
    $$$$$:  535-block 10
    $$$$$:  535-block 11
call   21 never executed
       1*:  536:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  536-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  536-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  536-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  536-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  536-block  4
call   16 never executed
call   17 never executed
        1:  536-block  5
call   18 returned 1
    $$$$$:  536-block  6
call   19 never executed
    $$$$$:  536-block  7
    $$$$$:  536-block  8
call   20 never executed
    $$$$$:  536-block  9
    $$$$$:  536-block 10
call   21 never executed
        3:  537:    for(int i = 0; i < expected_length; i++){
        3:  537-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
       2*:  538:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        2:  538-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  538-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  538-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  538-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  538-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  538-block  5
call   16 never executed
call   17 never executed
        2:  538-block  6
call   18 returned 2
    $$$$$:  538-block  7
call   19 never executed
    $$$$$:  538-block  8
    $$$$$:  538-block  9
call   20 never executed
    $$$$$:  538-block 10
    $$$$$:  538-block 11
call   21 never executed
        -:  539:    }
        1:  540:}
        1:  540-block  0
------------------
        -:  541:
        4:  542:TEST(slip_decoding_testsSuite, EndByteRemovedTest){
        -:  543:    // input buffer with data
        1:  544:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0x01, 0x02, 0xC0};
        1:  545:    uint16_t input_length = 4;
        -:  546:    // output buffer after decoding
        -:  547:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  548:    uint16_t output_length;
        -:  549:    bool result;
        -:  550:
        -:  551:    // expected buffer
        1:  552:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x01, 0x02};
        1:  553:    uint16_t expected_length = 2;
        1:  554:    bool expected_result = true;
        -:  555:
        -:  556:    // decoding
        1:  557:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  558:
        -:  559:    // Assertions
       1*:  560:    EXPECT_EQ(result, expected_result);
       1*:  561:    EXPECT_EQ(output_length, expected_length);
        3:  562:    for(int i = 0; i < expected_length; i++){
       2*:  563:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  564:    }
        1:  565:}
------------------
_ZN48slip_decoding_testsSuite_EndByteRemovedTest_TestC1Ev:
function _ZN48slip_decoding_testsSuite_EndByteRemovedTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  542:TEST(slip_decoding_testsSuite, EndByteRemovedTest){
        1:  542-block  0
call    0 returned 1
------------------
_ZN48slip_decoding_testsSuite_EndByteRemovedTest_TestD0Ev:
function _ZN48slip_decoding_testsSuite_EndByteRemovedTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  542:TEST(slip_decoding_testsSuite, EndByteRemovedTest){
        1:  542-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48slip_decoding_testsSuite_EndByteRemovedTest_TestD1Ev:
function _ZN48slip_decoding_testsSuite_EndByteRemovedTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  542:TEST(slip_decoding_testsSuite, EndByteRemovedTest){
        1:  542-block  0
call    0 returned 1
------------------
_ZN48slip_decoding_testsSuite_EndByteRemovedTest_Test8TestBodyEv:
function _ZN48slip_decoding_testsSuite_EndByteRemovedTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  542:TEST(slip_decoding_testsSuite, EndByteRemovedTest){
        -:  543:    // input buffer with data
        1:  544:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0x01, 0x02, 0xC0};
        1:  545:    uint16_t input_length = 4;
        -:  546:    // output buffer after decoding
        -:  547:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  548:    uint16_t output_length;
        -:  549:    bool result;
        -:  550:
        -:  551:    // expected buffer
        1:  552:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0x01, 0x02};
        1:  553:    uint16_t expected_length = 2;
        1:  554:    bool expected_result = true;
        -:  555:
        -:  556:    // decoding
        1:  557:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  557-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  558:
        -:  559:    // Assertions
       1*:  560:    EXPECT_EQ(result, expected_result);
        1:  560-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  560-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  560-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  560-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  560-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  560-block  5
call   16 never executed
call   17 never executed
        1:  560-block  6
call   18 returned 1
    $$$$$:  560-block  7
call   19 never executed
    $$$$$:  560-block  8
    $$$$$:  560-block  9
call   20 never executed
    $$$$$:  560-block 10
    $$$$$:  560-block 11
call   21 never executed
       1*:  561:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  561-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  561-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  561-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  561-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  561-block  4
call   16 never executed
call   17 never executed
        1:  561-block  5
call   18 returned 1
    $$$$$:  561-block  6
call   19 never executed
    $$$$$:  561-block  7
    $$$$$:  561-block  8
call   20 never executed
    $$$$$:  561-block  9
    $$$$$:  561-block 10
call   21 never executed
        3:  562:    for(int i = 0; i < expected_length; i++){
        3:  562-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
       2*:  563:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        2:  563-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  563-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  563-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  563-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  563-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  563-block  5
call   16 never executed
call   17 never executed
        2:  563-block  6
call   18 returned 2
    $$$$$:  563-block  7
call   19 never executed
    $$$$$:  563-block  8
    $$$$$:  563-block  9
call   20 never executed
    $$$$$:  563-block 10
    $$$$$:  563-block 11
call   21 never executed
        -:  564:    }
        1:  565:}
        1:  565-block  0
------------------
        -:  566:
        4:  567:TEST(slip_decoding_testsSuite, EmptyPayloadTest){
        -:  568:    // input buffer with no data between END bytes
        1:  569:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xC0};
        1:  570:    uint16_t input_length = 2;
        -:  571:    // output buffer after decoding
        -:  572:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  573:    uint16_t output_length;
        -:  574:    bool result;
        -:  575:
        -:  576:    // expected buffer
        1:  577:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {};
        1:  578:    uint16_t expected_length = 0;
        1:  579:    bool expected_result = true;
        -:  580:
        -:  581:    // decoding
        1:  582:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  583:
        -:  584:    // Assertions
       1*:  585:    EXPECT_EQ(result, expected_result);
       1*:  586:    EXPECT_EQ(output_length, expected_length);
        1:  587:}
------------------
_ZN46slip_decoding_testsSuite_EmptyPayloadTest_TestC1Ev:
function _ZN46slip_decoding_testsSuite_EmptyPayloadTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  567:TEST(slip_decoding_testsSuite, EmptyPayloadTest){
        1:  567-block  0
call    0 returned 1
------------------
_ZN46slip_decoding_testsSuite_EmptyPayloadTest_TestD0Ev:
function _ZN46slip_decoding_testsSuite_EmptyPayloadTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  567:TEST(slip_decoding_testsSuite, EmptyPayloadTest){
        1:  567-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN46slip_decoding_testsSuite_EmptyPayloadTest_TestD1Ev:
function _ZN46slip_decoding_testsSuite_EmptyPayloadTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  567:TEST(slip_decoding_testsSuite, EmptyPayloadTest){
        1:  567-block  0
call    0 returned 1
------------------
_ZN46slip_decoding_testsSuite_EmptyPayloadTest_Test8TestBodyEv:
function _ZN46slip_decoding_testsSuite_EmptyPayloadTest_Test8TestBodyEv called 1 returned 100% blocks executed 26%
        1:  567:TEST(slip_decoding_testsSuite, EmptyPayloadTest){
        -:  568:    // input buffer with no data between END bytes
        1:  569:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xC0};
        1:  570:    uint16_t input_length = 2;
        -:  571:    // output buffer after decoding
        -:  572:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  573:    uint16_t output_length;
        -:  574:    bool result;
        -:  575:
        -:  576:    // expected buffer
        1:  577:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {};
        1:  578:    uint16_t expected_length = 0;
        1:  579:    bool expected_result = true;
        -:  580:
        -:  581:    // decoding
        1:  582:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  582-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  583:
        -:  584:    // Assertions
       1*:  585:    EXPECT_EQ(result, expected_result);
        1:  585-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  585-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  585-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  585-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  585-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  585-block  5
call   16 never executed
call   17 never executed
        1:  585-block  6
call   18 returned 1
    $$$$$:  585-block  7
call   19 never executed
    $$$$$:  585-block  8
    $$$$$:  585-block  9
call   20 never executed
    $$$$$:  585-block 10
    $$$$$:  585-block 11
call   21 never executed
       1*:  586:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  586-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  586-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  586-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  586-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  586-block  4
call   16 never executed
call   17 never executed
        1:  586-block  5
call   18 returned 1
    $$$$$:  586-block  6
call   19 never executed
    $$$$$:  586-block  7
    $$$$$:  586-block  8
call   20 never executed
    $$$$$:  586-block  9
    $$$$$:  586-block 10
call   21 never executed
        1:  587:}
------------------
        -:  588:
        4:  589:TEST(slip_decoding_testsSuite, InputLengthLargerThanUARTBufferTest){
        -:  590:    // input buffer filled with data for a length of 356
        -:  591:    uint8_t input_buffer[UART_BUFFER_SIZE + 100];
        1:  592:    memset(input_buffer, 1, sizeof(input_buffer));
        1:  593:    input_buffer[0] = 0xC0;
        1:  594:    input_buffer[355] = 0xC0;
        1:  595:    uint16_t input_length = 356;
        -:  596:    bool result;
        -:  597:
        -:  598:    // output buffer after decoding
        -:  599:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  600:    uint16_t output_length;
        1:  601:    bool expected_result = false;
        -:  602:
        -:  603:    // expected buffer
        -:  604:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1:  605:    memset(expected_buffer, 1, UART_BUFFER_SIZE);
        1:  606:    uint16_t expected_length = UART_BUFFER_SIZE;
        -:  607:
        -:  608:    // decoding
        1:  609:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  610:
        -:  611:    // Assertions
       1*:  612:    EXPECT_EQ(result, expected_result);
        1:  613:}
------------------
_ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_TestC1Ev:
function _ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  589:TEST(slip_decoding_testsSuite, InputLengthLargerThanUARTBufferTest){
        1:  589-block  0
call    0 returned 1
------------------
_ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_TestD0Ev:
function _ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  589:TEST(slip_decoding_testsSuite, InputLengthLargerThanUARTBufferTest){
        1:  589-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_TestD1Ev:
function _ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  589:TEST(slip_decoding_testsSuite, InputLengthLargerThanUARTBufferTest){
        1:  589-block  0
call    0 returned 1
------------------
_ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_Test8TestBodyEv:
function _ZN65slip_decoding_testsSuite_InputLengthLargerThanUARTBufferTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1:  589:TEST(slip_decoding_testsSuite, InputLengthLargerThanUARTBufferTest){
        -:  590:    // input buffer filled with data for a length of 356
        -:  591:    uint8_t input_buffer[UART_BUFFER_SIZE + 100];
        1:  592:    memset(input_buffer, 1, sizeof(input_buffer));
        1:  593:    input_buffer[0] = 0xC0;
        1:  594:    input_buffer[355] = 0xC0;
        1:  595:    uint16_t input_length = 356;
        -:  596:    bool result;
        -:  597:
        -:  598:    // output buffer after decoding
        -:  599:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  600:    uint16_t output_length;
        1:  601:    bool expected_result = false;
        -:  602:
        -:  603:    // expected buffer
        -:  604:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1:  605:    memset(expected_buffer, 1, UART_BUFFER_SIZE);
        1:  606:    uint16_t expected_length = UART_BUFFER_SIZE;
        -:  607:
        -:  608:    // decoding
        1:  609:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  609-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  610:
        -:  611:    // Assertions
       1*:  612:    EXPECT_EQ(result, expected_result);
        1:  612-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  612-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  612-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  612-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  612-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  612-block  5
call   16 never executed
call   17 never executed
        1:  612-block  6
call   18 returned 1
    $$$$$:  612-block  7
call   19 never executed
    $$$$$:  612-block  8
    $$$$$:  612-block  9
call   20 never executed
    $$$$$:  612-block 10
    $$$$$:  612-block 11
call   21 never executed
        1:  613:}
------------------
        -:  614:
        4:  615:TEST(slip_decoding_testsSuite, ESC_ENDReplacementTest){
        -:  616:    // input buffer with ESC + ESC_END sequence
        1:  617:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xC0};
        1:  618:    uint16_t input_length = 4;
        -:  619:    // output buffer after decoding
        -:  620:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  621:    uint16_t output_length;
        -:  622:    bool result;
        -:  623:
        -:  624:    // expected buffer
        1:  625:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0};
        1:  626:    uint16_t expected_length = 1;
        1:  627:    bool expected_result = true;
        -:  628:
        -:  629:    // decoding
        1:  630:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  631:
        -:  632:    // Assertions
       1*:  633:    EXPECT_EQ(result, expected_result);
       1*:  634:    EXPECT_EQ(output_length, expected_length);
        2:  635:    for(int i = 0; i < expected_length; i++){
       1*:  636:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  637:    }
        1:  638:}
------------------
_ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_TestC1Ev:
function _ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  615:TEST(slip_decoding_testsSuite, ESC_ENDReplacementTest){
        1:  615-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_TestD0Ev:
function _ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  615:TEST(slip_decoding_testsSuite, ESC_ENDReplacementTest){
        1:  615-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_TestD1Ev:
function _ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  615:TEST(slip_decoding_testsSuite, ESC_ENDReplacementTest){
        1:  615-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_Test8TestBodyEv:
function _ZN52slip_decoding_testsSuite_ESC_ENDReplacementTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  615:TEST(slip_decoding_testsSuite, ESC_ENDReplacementTest){
        -:  616:    // input buffer with ESC + ESC_END sequence
        1:  617:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xC0};
        1:  618:    uint16_t input_length = 4;
        -:  619:    // output buffer after decoding
        -:  620:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  621:    uint16_t output_length;
        -:  622:    bool result;
        -:  623:
        -:  624:    // expected buffer
        1:  625:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0};
        1:  626:    uint16_t expected_length = 1;
        1:  627:    bool expected_result = true;
        -:  628:
        -:  629:    // decoding
        1:  630:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  630-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  631:
        -:  632:    // Assertions
       1*:  633:    EXPECT_EQ(result, expected_result);
        1:  633-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  633-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  633-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  633-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  633-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  633-block  5
call   16 never executed
call   17 never executed
        1:  633-block  6
call   18 returned 1
    $$$$$:  633-block  7
call   19 never executed
    $$$$$:  633-block  8
    $$$$$:  633-block  9
call   20 never executed
    $$$$$:  633-block 10
    $$$$$:  633-block 11
call   21 never executed
       1*:  634:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  634-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  634-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  634-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  634-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  634-block  4
call   16 never executed
call   17 never executed
        1:  634-block  5
call   18 returned 1
    $$$$$:  634-block  6
call   19 never executed
    $$$$$:  634-block  7
    $$$$$:  634-block  8
call   20 never executed
    $$$$$:  634-block  9
    $$$$$:  634-block 10
call   21 never executed
        2:  635:    for(int i = 0; i < expected_length; i++){
        2:  635-block  0
branch  0 taken 1
branch  1 taken 1 (fallthrough)
       1*:  636:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        1:  636-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  636-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  636-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  636-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  636-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  636-block  5
call   16 never executed
call   17 never executed
        1:  636-block  6
call   18 returned 1
    $$$$$:  636-block  7
call   19 never executed
    $$$$$:  636-block  8
    $$$$$:  636-block  9
call   20 never executed
    $$$$$:  636-block 10
    $$$$$:  636-block 11
call   21 never executed
        -:  637:    }
        1:  638:}
        1:  638-block  0
------------------
        -:  639:
        4:  640:TEST(slip_decoding_testsSuite, ESC_ESCReplacementTest){
        -:  641:    // input buffer with ESC + ESC_ESC sequence
        1:  642:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xC0};
        1:  643:    uint16_t input_length = 4;
        -:  644:    // output buffer after decoding
        -:  645:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  646:    uint16_t output_length;
        -:  647:    bool result;
        -:  648:
        -:  649:    // expected buffer
        1:  650:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xDB};
        1:  651:    uint16_t expected_length = 1;
        1:  652:    bool expected_result = true;
        -:  653:
        -:  654:    // decoding
        1:  655:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  656:
        -:  657:    // Assertions
       1*:  658:    EXPECT_EQ(result, expected_result);
       1*:  659:    EXPECT_EQ(output_length, expected_length);
        2:  660:    for(int i = 0; i < expected_length; i++){
       1*:  661:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  662:    }
        1:  663:}
------------------
_ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_TestC1Ev:
function _ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  640:TEST(slip_decoding_testsSuite, ESC_ESCReplacementTest){
        1:  640-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_TestD0Ev:
function _ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  640:TEST(slip_decoding_testsSuite, ESC_ESCReplacementTest){
        1:  640-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_TestD1Ev:
function _ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  640:TEST(slip_decoding_testsSuite, ESC_ESCReplacementTest){
        1:  640-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_Test8TestBodyEv:
function _ZN52slip_decoding_testsSuite_ESC_ESCReplacementTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  640:TEST(slip_decoding_testsSuite, ESC_ESCReplacementTest){
        -:  641:    // input buffer with ESC + ESC_ESC sequence
        1:  642:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xC0};
        1:  643:    uint16_t input_length = 4;
        -:  644:    // output buffer after decoding
        -:  645:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  646:    uint16_t output_length;
        -:  647:    bool result;
        -:  648:
        -:  649:    // expected buffer
        1:  650:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xDB};
        1:  651:    uint16_t expected_length = 1;
        1:  652:    bool expected_result = true;
        -:  653:
        -:  654:    // decoding
        1:  655:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  655-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  656:
        -:  657:    // Assertions
       1*:  658:    EXPECT_EQ(result, expected_result);
        1:  658-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  658-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  658-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  658-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  658-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  658-block  5
call   16 never executed
call   17 never executed
        1:  658-block  6
call   18 returned 1
    $$$$$:  658-block  7
call   19 never executed
    $$$$$:  658-block  8
    $$$$$:  658-block  9
call   20 never executed
    $$$$$:  658-block 10
    $$$$$:  658-block 11
call   21 never executed
       1*:  659:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  659-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  659-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  659-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  659-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  659-block  4
call   16 never executed
call   17 never executed
        1:  659-block  5
call   18 returned 1
    $$$$$:  659-block  6
call   19 never executed
    $$$$$:  659-block  7
    $$$$$:  659-block  8
call   20 never executed
    $$$$$:  659-block  9
    $$$$$:  659-block 10
call   21 never executed
        2:  660:    for(int i = 0; i < expected_length; i++){
        2:  660-block  0
branch  0 taken 1
branch  1 taken 1 (fallthrough)
       1*:  661:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        1:  661-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  661-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  661-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  661-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  661-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  661-block  5
call   16 never executed
call   17 never executed
        1:  661-block  6
call   18 returned 1
    $$$$$:  661-block  7
call   19 never executed
    $$$$$:  661-block  8
    $$$$$:  661-block  9
call   20 never executed
    $$$$$:  661-block 10
    $$$$$:  661-block 11
call   21 never executed
        -:  662:    }
        1:  663:}
        1:  663-block  0
------------------
        -:  664:
        4:  665:TEST(slip_decoding_testsSuite, SequentialENDBytesTest){
        -:  666:    // input buffer with sequential END bytes
        1:  667:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDC, 0xC0};
        1:  668:    uint16_t input_length = 6;
        -:  669:    // output buffer after decoding
        -:  670:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  671:    uint16_t output_length;
        -:  672:    bool result;
        -:  673:
        -:  674:    // expected buffer
        1:  675:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xC0};
        1:  676:    uint16_t expected_length = 2;
        1:  677:    bool expected_result = true;
        -:  678:
        -:  679:    // decoding
        1:  680:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  681:
        -:  682:    // Assertions
       1*:  683:    EXPECT_EQ(result, expected_result);
       1*:  684:    EXPECT_EQ(output_length, expected_length);
        3:  685:    for(int i = 0; i < expected_length; i++){
       2*:  686:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  687:    }
        1:  688:}
------------------
_ZN52slip_decoding_testsSuite_SequentialENDBytesTest_TestC1Ev:
function _ZN52slip_decoding_testsSuite_SequentialENDBytesTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  665:TEST(slip_decoding_testsSuite, SequentialENDBytesTest){
        1:  665-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_SequentialENDBytesTest_TestD0Ev:
function _ZN52slip_decoding_testsSuite_SequentialENDBytesTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  665:TEST(slip_decoding_testsSuite, SequentialENDBytesTest){
        1:  665-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_decoding_testsSuite_SequentialENDBytesTest_TestD1Ev:
function _ZN52slip_decoding_testsSuite_SequentialENDBytesTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  665:TEST(slip_decoding_testsSuite, SequentialENDBytesTest){
        1:  665-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_SequentialENDBytesTest_Test8TestBodyEv:
function _ZN52slip_decoding_testsSuite_SequentialENDBytesTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  665:TEST(slip_decoding_testsSuite, SequentialENDBytesTest){
        -:  666:    // input buffer with sequential END bytes
        1:  667:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDC, 0xC0};
        1:  668:    uint16_t input_length = 6;
        -:  669:    // output buffer after decoding
        -:  670:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  671:    uint16_t output_length;
        -:  672:    bool result;
        -:  673:
        -:  674:    // expected buffer
        1:  675:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xC0};
        1:  676:    uint16_t expected_length = 2;
        1:  677:    bool expected_result = true;
        -:  678:
        -:  679:    // decoding
        1:  680:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  680-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  681:
        -:  682:    // Assertions
       1*:  683:    EXPECT_EQ(result, expected_result);
        1:  683-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  683-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  683-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  683-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  683-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  683-block  5
call   16 never executed
call   17 never executed
        1:  683-block  6
call   18 returned 1
    $$$$$:  683-block  7
call   19 never executed
    $$$$$:  683-block  8
    $$$$$:  683-block  9
call   20 never executed
    $$$$$:  683-block 10
    $$$$$:  683-block 11
call   21 never executed
       1*:  684:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  684-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  684-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  684-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  684-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  684-block  4
call   16 never executed
call   17 never executed
        1:  684-block  5
call   18 returned 1
    $$$$$:  684-block  6
call   19 never executed
    $$$$$:  684-block  7
    $$$$$:  684-block  8
call   20 never executed
    $$$$$:  684-block  9
    $$$$$:  684-block 10
call   21 never executed
        3:  685:    for(int i = 0; i < expected_length; i++){
        3:  685-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
       2*:  686:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        2:  686-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  686-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  686-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  686-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  686-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  686-block  5
call   16 never executed
call   17 never executed
        2:  686-block  6
call   18 returned 2
    $$$$$:  686-block  7
call   19 never executed
    $$$$$:  686-block  8
    $$$$$:  686-block  9
call   20 never executed
    $$$$$:  686-block 10
    $$$$$:  686-block 11
call   21 never executed
        -:  687:    }
        1:  688:}
        1:  688-block  0
------------------
        -:  689:
        4:  690:TEST(slip_decoding_testsSuite, SequentialESCBytesTest){
        -:  691:    // input buffer with sequential ESC bytes
        1:  692:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xDB, 0xDD, 0xC0};
        1:  693:    uint16_t input_length = 6;
        -:  694:    // output buffer after decoding
        -:  695:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  696:    uint16_t output_length;
        -:  697:    bool result;
        -:  698:
        -:  699:    // expected buffer
        1:  700:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xDB, 0xDB};
        1:  701:    uint16_t expected_length = 2;
        1:  702:    bool expected_result = true;
        -:  703:
        -:  704:    // decoding
        1:  705:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  706:
        -:  707:    // Assertions
       1*:  708:    EXPECT_EQ(result, expected_result);
       1*:  709:    EXPECT_EQ(output_length, expected_length);
        3:  710:    for(int i = 0; i < expected_length; i++){
       2*:  711:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  712:    }
        1:  713:}
------------------
_ZN52slip_decoding_testsSuite_SequentialESCBytesTest_TestC1Ev:
function _ZN52slip_decoding_testsSuite_SequentialESCBytesTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  690:TEST(slip_decoding_testsSuite, SequentialESCBytesTest){
        1:  690-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_SequentialESCBytesTest_TestD0Ev:
function _ZN52slip_decoding_testsSuite_SequentialESCBytesTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  690:TEST(slip_decoding_testsSuite, SequentialESCBytesTest){
        1:  690-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_decoding_testsSuite_SequentialESCBytesTest_TestD1Ev:
function _ZN52slip_decoding_testsSuite_SequentialESCBytesTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  690:TEST(slip_decoding_testsSuite, SequentialESCBytesTest){
        1:  690-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_SequentialESCBytesTest_Test8TestBodyEv:
function _ZN52slip_decoding_testsSuite_SequentialESCBytesTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  690:TEST(slip_decoding_testsSuite, SequentialESCBytesTest){
        -:  691:    // input buffer with sequential ESC bytes
        1:  692:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xDB, 0xDD, 0xC0};
        1:  693:    uint16_t input_length = 6;
        -:  694:    // output buffer after decoding
        -:  695:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  696:    uint16_t output_length;
        -:  697:    bool result;
        -:  698:
        -:  699:    // expected buffer
        1:  700:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xDB, 0xDB};
        1:  701:    uint16_t expected_length = 2;
        1:  702:    bool expected_result = true;
        -:  703:
        -:  704:    // decoding
        1:  705:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  705-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  706:
        -:  707:    // Assertions
       1*:  708:    EXPECT_EQ(result, expected_result);
        1:  708-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  708-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  708-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  708-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  708-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  708-block  5
call   16 never executed
call   17 never executed
        1:  708-block  6
call   18 returned 1
    $$$$$:  708-block  7
call   19 never executed
    $$$$$:  708-block  8
    $$$$$:  708-block  9
call   20 never executed
    $$$$$:  708-block 10
    $$$$$:  708-block 11
call   21 never executed
       1*:  709:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  709-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  709-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  709-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  709-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  709-block  4
call   16 never executed
call   17 never executed
        1:  709-block  5
call   18 returned 1
    $$$$$:  709-block  6
call   19 never executed
    $$$$$:  709-block  7
    $$$$$:  709-block  8
call   20 never executed
    $$$$$:  709-block  9
    $$$$$:  709-block 10
call   21 never executed
        3:  710:    for(int i = 0; i < expected_length; i++){
        3:  710-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
       2*:  711:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        2:  711-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  711-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  711-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  711-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  711-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  711-block  5
call   16 never executed
call   17 never executed
        2:  711-block  6
call   18 returned 2
    $$$$$:  711-block  7
call   19 never executed
    $$$$$:  711-block  8
    $$$$$:  711-block  9
call   20 never executed
    $$$$$:  711-block 10
    $$$$$:  711-block 11
call   21 never executed
        -:  712:    }
        1:  713:}
        1:  713-block  0
------------------
        -:  714:
        4:  715:TEST(slip_decoding_testsSuite, MixedESC_ENDAndESC_ESCBytesTest){
        -:  716:    // input buffer with mixed ESC + ESC_END and ESC + ESC_ESC sequences
        1:  717:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDB, 0xDC, 0xDB, 0xDD, 0xC0};
        1:  718:    uint16_t input_length = 10;
        -:  719:    // output buffer after decoding
        -:  720:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  721:    uint16_t output_length;
        -:  722:    bool result;
        -:  723:
        -:  724:    // expected buffer
        1:  725:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xC0, 0xDB};
        1:  726:    uint16_t expected_length = 4;
        1:  727:    bool expected_result = true;
        -:  728:
        -:  729:    // decoding
        1:  730:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  731:
        -:  732:    // Assertions
       1*:  733:    EXPECT_EQ(result, expected_result);
       1*:  734:    EXPECT_EQ(output_length, expected_length);
        5:  735:    for(int i = 0; i < expected_length; i++){
       4*:  736:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  737:    }
        1:  738:}
------------------
_ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_TestC1Ev:
function _ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  715:TEST(slip_decoding_testsSuite, MixedESC_ENDAndESC_ESCBytesTest){
        1:  715-block  0
call    0 returned 1
------------------
_ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_TestD0Ev:
function _ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  715:TEST(slip_decoding_testsSuite, MixedESC_ENDAndESC_ESCBytesTest){
        1:  715-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_TestD1Ev:
function _ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  715:TEST(slip_decoding_testsSuite, MixedESC_ENDAndESC_ESCBytesTest){
        1:  715-block  0
call    0 returned 1
------------------
_ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_Test8TestBodyEv:
function _ZN61slip_decoding_testsSuite_MixedESC_ENDAndESC_ESCBytesTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  715:TEST(slip_decoding_testsSuite, MixedESC_ENDAndESC_ESCBytesTest){
        -:  716:    // input buffer with mixed ESC + ESC_END and ESC + ESC_ESC sequences
        1:  717:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDB, 0xDC, 0xDB, 0xDD, 0xC0};
        1:  718:    uint16_t input_length = 10;
        -:  719:    // output buffer after decoding
        -:  720:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  721:    uint16_t output_length;
        -:  722:    bool result;
        -:  723:
        -:  724:    // expected buffer
        1:  725:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xC0, 0xDB};
        1:  726:    uint16_t expected_length = 4;
        1:  727:    bool expected_result = true;
        -:  728:
        -:  729:    // decoding
        1:  730:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  730-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  731:
        -:  732:    // Assertions
       1*:  733:    EXPECT_EQ(result, expected_result);
        1:  733-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  733-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  733-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  733-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  733-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  733-block  5
call   16 never executed
call   17 never executed
        1:  733-block  6
call   18 returned 1
    $$$$$:  733-block  7
call   19 never executed
    $$$$$:  733-block  8
    $$$$$:  733-block  9
call   20 never executed
    $$$$$:  733-block 10
    $$$$$:  733-block 11
call   21 never executed
       1*:  734:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  734-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  734-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  734-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  734-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  734-block  4
call   16 never executed
call   17 never executed
        1:  734-block  5
call   18 returned 1
    $$$$$:  734-block  6
call   19 never executed
    $$$$$:  734-block  7
    $$$$$:  734-block  8
call   20 never executed
    $$$$$:  734-block  9
    $$$$$:  734-block 10
call   21 never executed
        5:  735:    for(int i = 0; i < expected_length; i++){
        5:  735-block  0
branch  0 taken 4
branch  1 taken 1 (fallthrough)
       4*:  736:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        4:  736-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  736-block  1
call    3 returned 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    %%%%%:  736-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  736-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  736-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  736-block  5
call   16 never executed
call   17 never executed
        4:  736-block  6
call   18 returned 4
    $$$$$:  736-block  7
call   19 never executed
    $$$$$:  736-block  8
    $$$$$:  736-block  9
call   20 never executed
    $$$$$:  736-block 10
    $$$$$:  736-block 11
call   21 never executed
        -:  737:    }
        1:  738:}
        1:  738-block  0
------------------
        -:  739:
        4:  740:TEST(slip_decoding_testsSuite, MaximumPayloadSizeTest){
        -:  741:    // input buffer with maximum data size
        -:  742:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1:  743:    memset(input_buffer, 0x01, UART_BUFFER_SIZE);
        1:  744:    input_buffer[0] = 0xC0;
        1:  745:    input_buffer[UART_BUFFER_SIZE - 1] = 0xC0;
        1:  746:    uint16_t input_length = UART_BUFFER_SIZE;
        -:  747:    // output buffer after decoding
        -:  748:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  749:    uint16_t output_length;
        -:  750:    bool result;
        -:  751:
        -:  752:    // expected result
        -:  753:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1:  754:    memset(expected_buffer, 0x01, UART_BUFFER_SIZE - 2);
        1:  755:    uint16_t expected_length = UART_BUFFER_SIZE - 2;
        1:  756:    bool expected_result = true;
        -:  757:
        -:  758:    // decoding
        1:  759:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  760:
        -:  761:    // Assertions
       1*:  762:    EXPECT_EQ(result, expected_result);
       1*:  763:    EXPECT_EQ(output_length, expected_length);
      255:  764:    for(int i = 0; i < expected_length; i++){
     254*:  765:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  766:    }
        1:  767:}
------------------
_ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_TestC1Ev:
function _ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  740:TEST(slip_decoding_testsSuite, MaximumPayloadSizeTest){
        1:  740-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_TestD0Ev:
function _ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  740:TEST(slip_decoding_testsSuite, MaximumPayloadSizeTest){
        1:  740-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_TestD1Ev:
function _ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  740:TEST(slip_decoding_testsSuite, MaximumPayloadSizeTest){
        1:  740-block  0
call    0 returned 1
------------------
_ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_Test8TestBodyEv:
function _ZN52slip_decoding_testsSuite_MaximumPayloadSizeTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  740:TEST(slip_decoding_testsSuite, MaximumPayloadSizeTest){
        -:  741:    // input buffer with maximum data size
        -:  742:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1:  743:    memset(input_buffer, 0x01, UART_BUFFER_SIZE);
        1:  744:    input_buffer[0] = 0xC0;
        1:  745:    input_buffer[UART_BUFFER_SIZE - 1] = 0xC0;
        1:  746:    uint16_t input_length = UART_BUFFER_SIZE;
        -:  747:    // output buffer after decoding
        -:  748:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  749:    uint16_t output_length;
        -:  750:    bool result;
        -:  751:
        -:  752:    // expected result
        -:  753:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1:  754:    memset(expected_buffer, 0x01, UART_BUFFER_SIZE - 2);
        1:  755:    uint16_t expected_length = UART_BUFFER_SIZE - 2;
        1:  756:    bool expected_result = true;
        -:  757:
        -:  758:    // decoding
        1:  759:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  759-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  760:
        -:  761:    // Assertions
       1*:  762:    EXPECT_EQ(result, expected_result);
        1:  762-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  762-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  762-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  762-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  762-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  762-block  5
call   16 never executed
call   17 never executed
        1:  762-block  6
call   18 returned 1
    $$$$$:  762-block  7
call   19 never executed
    $$$$$:  762-block  8
    $$$$$:  762-block  9
call   20 never executed
    $$$$$:  762-block 10
    $$$$$:  762-block 11
call   21 never executed
       1*:  763:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  763-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  763-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  763-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  763-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  763-block  4
call   16 never executed
call   17 never executed
        1:  763-block  5
call   18 returned 1
    $$$$$:  763-block  6
call   19 never executed
    $$$$$:  763-block  7
    $$$$$:  763-block  8
call   20 never executed
    $$$$$:  763-block  9
    $$$$$:  763-block 10
call   21 never executed
      255:  764:    for(int i = 0; i < expected_length; i++){
      255:  764-block  0
branch  0 taken 254
branch  1 taken 1 (fallthrough)
     254*:  765:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
      254:  765-block  0
call    0 returned 254
branch  1 taken 254 (fallthrough)
branch  2 taken 0 (throw)
      254:  765-block  1
call    3 returned 254
branch  4 taken 0 (fallthrough)
branch  5 taken 254
    %%%%%:  765-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  765-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  765-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  765-block  5
call   16 never executed
call   17 never executed
      254:  765-block  6
call   18 returned 254
    $$$$$:  765-block  7
call   19 never executed
    $$$$$:  765-block  8
    $$$$$:  765-block  9
call   20 never executed
    $$$$$:  765-block 10
    $$$$$:  765-block 11
call   21 never executed
        -:  766:    }
        1:  767:}
        1:  767-block  0
------------------
        -:  768:
        4:  769:TEST(slip_decoding_testsSuite, CheckAllFourSpecialCharacters) {
        -:  770:    // input buffer with all four special characters
        1:  771:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD, 0xC0};
        1:  772:    uint16_t input_length = 8;
        -:  773:    // output buffer after decoding
        -:  774:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  775:    uint16_t output_length;
        -:  776:    bool result;
        -:  777:
        -:  778:    // expected buffer
        1:  779:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDD};
        1:  780:    uint16_t expected_length = 4;
        1:  781:    bool expected_result = true;
        -:  782:
        -:  783:    // decoding
        1:  784:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  785:
        -:  786:    // Assertions
       1*:  787:    EXPECT_EQ(result, expected_result);
       1*:  788:    EXPECT_EQ(output_length, expected_length);
        5:  789:    for(int i = 0; i < expected_length; i++){
       4*:  790:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  791:    }
        1:  792:}
------------------
_ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_TestC1Ev:
function _ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  769:TEST(slip_decoding_testsSuite, CheckAllFourSpecialCharacters) {
        1:  769-block  0
call    0 returned 1
------------------
_ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_TestD0Ev:
function _ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  769:TEST(slip_decoding_testsSuite, CheckAllFourSpecialCharacters) {
        1:  769-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_TestD1Ev:
function _ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  769:TEST(slip_decoding_testsSuite, CheckAllFourSpecialCharacters) {
        1:  769-block  0
call    0 returned 1
------------------
_ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_Test8TestBodyEv:
function _ZN59slip_decoding_testsSuite_CheckAllFourSpecialCharacters_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  769:TEST(slip_decoding_testsSuite, CheckAllFourSpecialCharacters) {
        -:  770:    // input buffer with all four special characters
        1:  771:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD, 0xC0};
        1:  772:    uint16_t input_length = 8;
        -:  773:    // output buffer after decoding
        -:  774:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  775:    uint16_t output_length;
        -:  776:    bool result;
        -:  777:
        -:  778:    // expected buffer
        1:  779:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDD};
        1:  780:    uint16_t expected_length = 4;
        1:  781:    bool expected_result = true;
        -:  782:
        -:  783:    // decoding
        1:  784:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  784-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  785:
        -:  786:    // Assertions
       1*:  787:    EXPECT_EQ(result, expected_result);
        1:  787-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  787-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  787-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  787-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  787-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  787-block  5
call   16 never executed
call   17 never executed
        1:  787-block  6
call   18 returned 1
    $$$$$:  787-block  7
call   19 never executed
    $$$$$:  787-block  8
    $$$$$:  787-block  9
call   20 never executed
    $$$$$:  787-block 10
    $$$$$:  787-block 11
call   21 never executed
       1*:  788:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  788-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  788-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  788-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  788-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  788-block  4
call   16 never executed
call   17 never executed
        1:  788-block  5
call   18 returned 1
    $$$$$:  788-block  6
call   19 never executed
    $$$$$:  788-block  7
    $$$$$:  788-block  8
call   20 never executed
    $$$$$:  788-block  9
    $$$$$:  788-block 10
call   21 never executed
        5:  789:    for(int i = 0; i < expected_length; i++){
        5:  789-block  0
branch  0 taken 4
branch  1 taken 1 (fallthrough)
       4*:  790:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        4:  790-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  790-block  1
call    3 returned 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    %%%%%:  790-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  790-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  790-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  790-block  5
call   16 never executed
call   17 never executed
        4:  790-block  6
call   18 returned 4
    $$$$$:  790-block  7
call   19 never executed
    $$$$$:  790-block  8
    $$$$$:  790-block  9
call   20 never executed
    $$$$$:  790-block 10
    $$$$$:  790-block 11
call   21 never executed
        -:  791:    }
        1:  792:}
        1:  792-block  0
------------------
        -:  793:
        4:  794:TEST(slip_decoding_testsSuite, LengthZeroTest){
        -:  795:    // input buffer with length zero
        1:  796:    uint8_t input_buffer[UART_BUFFER_SIZE] = {};
        1:  797:    uint16_t input_length = 0;
        -:  798:    // output buffer after decoding
        -:  799:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  800:    uint16_t output_length;
        -:  801:    bool result;
        -:  802:
        -:  803:    // expected result
        1:  804:    bool expected_result = false;
        -:  805:
        -:  806:    // decoding
        1:  807:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  808:
        -:  809:    // Assertions
       1*:  810:    EXPECT_EQ(result, expected_result);
        1:  811:}
------------------
_ZN44slip_decoding_testsSuite_LengthZeroTest_TestC1Ev:
function _ZN44slip_decoding_testsSuite_LengthZeroTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  794:TEST(slip_decoding_testsSuite, LengthZeroTest){
        1:  794-block  0
call    0 returned 1
------------------
_ZN44slip_decoding_testsSuite_LengthZeroTest_TestD0Ev:
function _ZN44slip_decoding_testsSuite_LengthZeroTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  794:TEST(slip_decoding_testsSuite, LengthZeroTest){
        1:  794-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44slip_decoding_testsSuite_LengthZeroTest_TestD1Ev:
function _ZN44slip_decoding_testsSuite_LengthZeroTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  794:TEST(slip_decoding_testsSuite, LengthZeroTest){
        1:  794-block  0
call    0 returned 1
------------------
_ZN44slip_decoding_testsSuite_LengthZeroTest_Test8TestBodyEv:
function _ZN44slip_decoding_testsSuite_LengthZeroTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1:  794:TEST(slip_decoding_testsSuite, LengthZeroTest){
        -:  795:    // input buffer with length zero
        1:  796:    uint8_t input_buffer[UART_BUFFER_SIZE] = {};
        1:  797:    uint16_t input_length = 0;
        -:  798:    // output buffer after decoding
        -:  799:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  800:    uint16_t output_length;
        -:  801:    bool result;
        -:  802:
        -:  803:    // expected result
        1:  804:    bool expected_result = false;
        -:  805:
        -:  806:    // decoding
        1:  807:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  807-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  808:
        -:  809:    // Assertions
       1*:  810:    EXPECT_EQ(result, expected_result);
        1:  810-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  810-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  810-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  810-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  810-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  810-block  5
call   16 never executed
call   17 never executed
        1:  810-block  6
call   18 returned 1
    $$$$$:  810-block  7
call   19 never executed
    $$$$$:  810-block  8
    $$$$$:  810-block  9
call   20 never executed
    $$$$$:  810-block 10
    $$$$$:  810-block 11
call   21 never executed
        1:  811:}
------------------
        -:  812:
        4:  813:TEST(slip_decoding_testsSuite, StartOrEndByteNotENDTest){
        -:  814:    // input buffer with incorrect start or end byte
        1:  815:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0x01, 0x02, 0x03};
        1:  816:    uint16_t input_length = 3;
        -:  817:    // output buffer after decoding
        -:  818:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  819:    uint16_t output_length;
        -:  820:    bool result;
        -:  821:
        -:  822:    // expected result
        1:  823:    bool expected_result = false;
        -:  824:
        -:  825:    // decoding
        1:  826:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  827:
        -:  828:    // Assertions
       1*:  829:    EXPECT_EQ(result, expected_result);
        1:  830:}
------------------
_ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_TestC1Ev:
function _ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  813:TEST(slip_decoding_testsSuite, StartOrEndByteNotENDTest){
        1:  813-block  0
call    0 returned 1
------------------
_ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_TestD0Ev:
function _ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  813:TEST(slip_decoding_testsSuite, StartOrEndByteNotENDTest){
        1:  813-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_TestD1Ev:
function _ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  813:TEST(slip_decoding_testsSuite, StartOrEndByteNotENDTest){
        1:  813-block  0
call    0 returned 1
------------------
_ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_Test8TestBodyEv:
function _ZN54slip_decoding_testsSuite_StartOrEndByteNotENDTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1:  813:TEST(slip_decoding_testsSuite, StartOrEndByteNotENDTest){
        -:  814:    // input buffer with incorrect start or end byte
        1:  815:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0x01, 0x02, 0x03};
        1:  816:    uint16_t input_length = 3;
        -:  817:    // output buffer after decoding
        -:  818:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  819:    uint16_t output_length;
        -:  820:    bool result;
        -:  821:
        -:  822:    // expected result
        1:  823:    bool expected_result = false;
        -:  824:
        -:  825:    // decoding
        1:  826:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  826-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  827:
        -:  828:    // Assertions
       1*:  829:    EXPECT_EQ(result, expected_result);
        1:  829-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  829-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  829-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  829-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  829-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  829-block  5
call   16 never executed
call   17 never executed
        1:  829-block  6
call   18 returned 1
    $$$$$:  829-block  7
call   19 never executed
    $$$$$:  829-block  8
    $$$$$:  829-block  9
call   20 never executed
    $$$$$:  829-block 10
    $$$$$:  829-block 11
call   21 never executed
        1:  830:}
------------------
        4:  831:TEST(slip_decoding_testsSuite, testFirstCharacter){
        -:  832:    // input buffer with all four special characters
        1:  833:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD, 0xC0};
        1:  834:    uint16_t input_length = 8;
        -:  835:    // output buffer after decoding
        -:  836:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  837:    uint16_t output_length;
        -:  838:    bool result;
        -:  839:
        -:  840:    // decoding
        1:  841:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  842:
        -:  843:    // Assertions
       1*:  844:    EXPECT_FALSE(result);
        1:  845:}
------------------
_ZN48slip_decoding_testsSuite_testFirstCharacter_TestC1Ev:
function _ZN48slip_decoding_testsSuite_testFirstCharacter_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  831:TEST(slip_decoding_testsSuite, testFirstCharacter){
        1:  831-block  0
call    0 returned 1
------------------
_ZN48slip_decoding_testsSuite_testFirstCharacter_TestD0Ev:
function _ZN48slip_decoding_testsSuite_testFirstCharacter_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  831:TEST(slip_decoding_testsSuite, testFirstCharacter){
        1:  831-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48slip_decoding_testsSuite_testFirstCharacter_TestD1Ev:
function _ZN48slip_decoding_testsSuite_testFirstCharacter_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  831:TEST(slip_decoding_testsSuite, testFirstCharacter){
        1:  831-block  0
call    0 returned 1
------------------
_ZN48slip_decoding_testsSuite_testFirstCharacter_Test8TestBodyEv:
function _ZN48slip_decoding_testsSuite_testFirstCharacter_Test8TestBodyEv called 1 returned 100% blocks executed 25%
        1:  831:TEST(slip_decoding_testsSuite, testFirstCharacter){
        -:  832:    // input buffer with all four special characters
        1:  833:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD, 0xC0};
        1:  834:    uint16_t input_length = 8;
        -:  835:    // output buffer after decoding
        -:  836:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  837:    uint16_t output_length;
        -:  838:    bool result;
        -:  839:
        -:  840:    // decoding
        1:  841:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  841-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  842:
        -:  843:    // Assertions
       1*:  844:    EXPECT_FALSE(result);
        1:  844-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  844-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  844-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  844-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  844-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  844-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  844-block  6
call   20 returned 1
    $$$$$:  844-block  7
call   21 never executed
    $$$$$:  844-block  8
call   22 never executed
    $$$$$:  844-block  9
    $$$$$:  844-block 10
    $$$$$:  844-block 11
call   23 never executed
    $$$$$:  844-block 12
    $$$$$:  844-block 13
call   24 never executed
        1:  845:}
------------------
        -:  846:
        4:  847:TEST(slip_decoding_testsSuite, testlastCharacter){
        -:  848:    // input buffer with all four special characters
        1:  849:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD};
        1:  850:    uint16_t input_length = 8;
        -:  851:    // output buffer after decoding
        -:  852:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  853:    uint16_t output_length;
        -:  854:    bool result;
        -:  855:
        -:  856:    // decoding
        1:  857:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  858:
        -:  859:    // Assertions
       1*:  860:    EXPECT_FALSE(result);
        1:  861:}
------------------
_ZN47slip_decoding_testsSuite_testlastCharacter_TestC1Ev:
function _ZN47slip_decoding_testsSuite_testlastCharacter_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  847:TEST(slip_decoding_testsSuite, testlastCharacter){
        1:  847-block  0
call    0 returned 1
------------------
_ZN47slip_decoding_testsSuite_testlastCharacter_TestD0Ev:
function _ZN47slip_decoding_testsSuite_testlastCharacter_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  847:TEST(slip_decoding_testsSuite, testlastCharacter){
        1:  847-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47slip_decoding_testsSuite_testlastCharacter_TestD1Ev:
function _ZN47slip_decoding_testsSuite_testlastCharacter_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  847:TEST(slip_decoding_testsSuite, testlastCharacter){
        1:  847-block  0
call    0 returned 1
------------------
_ZN47slip_decoding_testsSuite_testlastCharacter_Test8TestBodyEv:
function _ZN47slip_decoding_testsSuite_testlastCharacter_Test8TestBodyEv called 1 returned 100% blocks executed 25%
        1:  847:TEST(slip_decoding_testsSuite, testlastCharacter){
        -:  848:    // input buffer with all four special characters
        1:  849:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD};
        1:  850:    uint16_t input_length = 8;
        -:  851:    // output buffer after decoding
        -:  852:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  853:    uint16_t output_length;
        -:  854:    bool result;
        -:  855:
        -:  856:    // decoding
        1:  857:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  857-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  858:
        -:  859:    // Assertions
       1*:  860:    EXPECT_FALSE(result);
        1:  860-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  860-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  860-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  860-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  860-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  860-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  860-block  6
call   20 returned 1
    $$$$$:  860-block  7
call   21 never executed
    $$$$$:  860-block  8
call   22 never executed
    $$$$$:  860-block  9
    $$$$$:  860-block 10
    $$$$$:  860-block 11
call   23 never executed
    $$$$$:  860-block 12
    $$$$$:  860-block 13
call   24 never executed
        1:  861:}
------------------
        -:  862:
        4:  863:TEST(slip_decoding_testsSuite, isEscapedTest){
        -:  864:    // input buffer with all four special characters
        1:  865:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xDB, 0x02, 0xC0};
        1:  866:    uint16_t input_length = 6;
        -:  867:    // output buffer after decoding
        -:  868:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  869:    uint16_t output_length;
        -:  870:    bool result;
        -:  871:
        -:  872:    // decoding
        1:  873:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        -:  874:
        -:  875:    // Assertions
        -:  876:    // Assertions
       1*:  877:    EXPECT_FALSE(result);
        1:  878:}
------------------
_ZN43slip_decoding_testsSuite_isEscapedTest_TestC1Ev:
function _ZN43slip_decoding_testsSuite_isEscapedTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  863:TEST(slip_decoding_testsSuite, isEscapedTest){
        1:  863-block  0
call    0 returned 1
------------------
_ZN43slip_decoding_testsSuite_isEscapedTest_TestD0Ev:
function _ZN43slip_decoding_testsSuite_isEscapedTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  863:TEST(slip_decoding_testsSuite, isEscapedTest){
        1:  863-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN43slip_decoding_testsSuite_isEscapedTest_TestD1Ev:
function _ZN43slip_decoding_testsSuite_isEscapedTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  863:TEST(slip_decoding_testsSuite, isEscapedTest){
        1:  863-block  0
call    0 returned 1
------------------
_ZN43slip_decoding_testsSuite_isEscapedTest_Test8TestBodyEv:
function _ZN43slip_decoding_testsSuite_isEscapedTest_Test8TestBodyEv called 1 returned 100% blocks executed 25%
        1:  863:TEST(slip_decoding_testsSuite, isEscapedTest){
        -:  864:    // input buffer with all four special characters
        1:  865:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xDB, 0x02, 0xC0};
        1:  866:    uint16_t input_length = 6;
        -:  867:    // output buffer after decoding
        -:  868:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  869:    uint16_t output_length;
        -:  870:    bool result;
        -:  871:
        -:  872:    // decoding
        1:  873:    result = slip_decode(input_buffer, input_length, output_buffer, &output_length);
        1:  873-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  874:
        -:  875:    // Assertions
        -:  876:    // Assertions
       1*:  877:    EXPECT_FALSE(result);
        1:  877-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  877-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  877-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  877-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  877-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  877-block  5
call   17 never executed
call   18 never executed
call   19 never executed
        1:  877-block  6
call   20 returned 1
    $$$$$:  877-block  7
call   21 never executed
    $$$$$:  877-block  8
call   22 never executed
    $$$$$:  877-block  9
    $$$$$:  877-block 10
    $$$$$:  877-block 11
call   23 never executed
    $$$$$:  877-block 12
    $$$$$:  877-block 13
call   24 never executed
        1:  878:}
------------------
        -:  879:
        -:  880:/*
        -:  881: * slip_encoding_tests.cpp file
        -:  882: *
        -:  883: * Testing file for SLIP encoding method. Multiple tests are executed here to demonstrate that the method behaves as expected. Below is a list of all tested functionalities and situations.
        -:  884: * Created by Henri Vanhuynegem on 06/06/2024.
        -:  885: * Last edited: 07/06/2024.
        -:  886: *
        -:  887: * Tests:
        -:  888: * - Normal data test: Ensure regular data bytes are passed through unchanged.
        -:  889: * - Start byte test: Verify the output starts with the END byte.
        -:  890: * - End byte test: Verify the output ends with the END byte.
        -:  891: * - Empty buffer test: Handle encoding when the input buffer is empty.
        -:  892: * - Buffer larger than UART buffer test: Handle encoding when the input buffer exceeds the UART buffer size.
        -:  893: * - Buffer smaller than UART buffer but after encoding, it is larger: Handle encoding when input buffer expands and exceeds UART buffer size after encoding.
        -:  894: * - END replacement test: Replace END bytes in the input buffer with ESC + ESC_END.
        -:  895: * - ESC replacement test: Replace ESC bytes in the input buffer with ESC + ESC_ESC.
        -:  896: * - Sequential END bytes test: Handle sequential END bytes correctly.
        -:  897: * - Sequential ESC bytes test: Handle sequential ESC bytes correctly.
        -:  898: * - Mixed END and ESC bytes test: Handle a mixture of END and ESC bytes correctly.
        -:  899: * - Maximum payload size test: Verify encoding with the maximum allowable input buffer size.
        -:  900: * - Buffer overflow test: Check for buffer overflow when encoding.
        -:  901: * - ESC overflow test: Check for not enough space for the ESC and ESC_ESC sequence.
        -:  902: * - Maximum encodable data test: Handle encoding expansion up to UART buffer size.
        -:  903: * - Mixed special characters test: Check encoding of a mixture of special characters.
        -:  904: */
        -:  905:
        -:  906:
        4:  907:TEST(slip_encoding_testsSuite, NormalDataTest){
        -:  908:    // input buffer with data
        1:  909:    uint8_t input_buffer[UART_BUFFER_SIZE] = "Hi";
        1:  910:    uint16_t input_length = 2;
        -:  911:    // output buffer after encoding
        -:  912:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  913:    uint16_t output_length;
        -:  914:    bool result;
        -:  915:
        -:  916:    // expected buffer
        1:  917:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xc0, 0x48, 0x69, 0xc0};
        1:  918:    uint16_t expected_length = 4;
        1:  919:    bool expected_result = true;
        -:  920:
        -:  921:    // encoding
        1:  922:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -:  923:
        -:  924:    // Assertions
       1*:  925:    EXPECT_EQ(result, expected_result);
       1*:  926:    EXPECT_EQ(output_length, 4);
        5:  927:    for(int i = 0; i < expected_length; i++){
       4*:  928:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  929:    }
        1:  930:}
------------------
_ZN44slip_encoding_testsSuite_NormalDataTest_TestC1Ev:
function _ZN44slip_encoding_testsSuite_NormalDataTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  907:TEST(slip_encoding_testsSuite, NormalDataTest){
        1:  907-block  0
call    0 returned 1
------------------
_ZN44slip_encoding_testsSuite_NormalDataTest_TestD0Ev:
function _ZN44slip_encoding_testsSuite_NormalDataTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  907:TEST(slip_encoding_testsSuite, NormalDataTest){
        1:  907-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44slip_encoding_testsSuite_NormalDataTest_TestD1Ev:
function _ZN44slip_encoding_testsSuite_NormalDataTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  907:TEST(slip_encoding_testsSuite, NormalDataTest){
        1:  907-block  0
call    0 returned 1
------------------
_ZN44slip_encoding_testsSuite_NormalDataTest_Test8TestBodyEv:
function _ZN44slip_encoding_testsSuite_NormalDataTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  907:TEST(slip_encoding_testsSuite, NormalDataTest){
        -:  908:    // input buffer with data
        1:  909:    uint8_t input_buffer[UART_BUFFER_SIZE] = "Hi";
        1:  910:    uint16_t input_length = 2;
        -:  911:    // output buffer after encoding
        -:  912:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  913:    uint16_t output_length;
        -:  914:    bool result;
        -:  915:
        -:  916:    // expected buffer
        1:  917:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xc0, 0x48, 0x69, 0xc0};
        1:  918:    uint16_t expected_length = 4;
        1:  919:    bool expected_result = true;
        -:  920:
        -:  921:    // encoding
        1:  922:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1:  922-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  923:
        -:  924:    // Assertions
       1*:  925:    EXPECT_EQ(result, expected_result);
        1:  925-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  925-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  925-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  925-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  925-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  925-block  5
call   16 never executed
call   17 never executed
        1:  925-block  6
call   18 returned 1
    $$$$$:  925-block  7
call   19 never executed
    $$$$$:  925-block  8
    $$$$$:  925-block  9
call   20 never executed
    $$$$$:  925-block 10
    $$$$$:  925-block 11
call   21 never executed
       1*:  926:    EXPECT_EQ(output_length, 4);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  926-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  926-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  926-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  926-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  926-block  4
call   16 never executed
call   17 never executed
        1:  926-block  5
call   18 returned 1
    $$$$$:  926-block  6
    $$$$$:  926-block  7
call   19 never executed
    $$$$$:  926-block  8
    $$$$$:  926-block  9
call   20 never executed
    $$$$$:  926-block 10
    $$$$$:  926-block 11
call   21 never executed
        5:  927:    for(int i = 0; i < expected_length; i++){
        5:  927-block  0
branch  0 taken 4
branch  1 taken 1 (fallthrough)
       4*:  928:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        4:  928-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  928-block  1
call    3 returned 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    %%%%%:  928-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  928-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  928-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  928-block  5
call   16 never executed
call   17 never executed
        4:  928-block  6
call   18 returned 4
    $$$$$:  928-block  7
call   19 never executed
    $$$$$:  928-block  8
    $$$$$:  928-block  9
call   20 never executed
    $$$$$:  928-block 10
    $$$$$:  928-block 11
call   21 never executed
        -:  929:    }
        1:  930:}
        1:  930-block  0
------------------
        -:  931:
        4:  932:TEST(slip_encoding_testsSuite, StartByteTest){
        -:  933:    // input buffer with data
        1:  934:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0x01,0x02};
        1:  935:    uint16_t input_length = 2;
        -:  936:    // output buffer after encoding
        -:  937:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  938:    uint16_t output_length;
        -:  939:    bool result;
        -:  940:
        -:  941:    // expected character
        1:  942:    uint8_t expected_character = 0xc0;
        1:  943:    bool expected_result = true;
        -:  944:
        -:  945:    // encoding
        1:  946:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -:  947:
        -:  948:    // Assertions
       1*:  949:    EXPECT_EQ(result, expected_result);
       1*:  950:    EXPECT_EQ(output_buffer[0], expected_character);
        -:  951:
        1:  952:}
------------------
_ZN43slip_encoding_testsSuite_StartByteTest_TestC1Ev:
function _ZN43slip_encoding_testsSuite_StartByteTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  932:TEST(slip_encoding_testsSuite, StartByteTest){
        1:  932-block  0
call    0 returned 1
------------------
_ZN43slip_encoding_testsSuite_StartByteTest_TestD0Ev:
function _ZN43slip_encoding_testsSuite_StartByteTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  932:TEST(slip_encoding_testsSuite, StartByteTest){
        1:  932-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN43slip_encoding_testsSuite_StartByteTest_TestD1Ev:
function _ZN43slip_encoding_testsSuite_StartByteTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  932:TEST(slip_encoding_testsSuite, StartByteTest){
        1:  932-block  0
call    0 returned 1
------------------
_ZN43slip_encoding_testsSuite_StartByteTest_Test8TestBodyEv:
function _ZN43slip_encoding_testsSuite_StartByteTest_Test8TestBodyEv called 1 returned 100% blocks executed 26%
        1:  932:TEST(slip_encoding_testsSuite, StartByteTest){
        -:  933:    // input buffer with data
        1:  934:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0x01,0x02};
        1:  935:    uint16_t input_length = 2;
        -:  936:    // output buffer after encoding
        -:  937:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  938:    uint16_t output_length;
        -:  939:    bool result;
        -:  940:
        -:  941:    // expected character
        1:  942:    uint8_t expected_character = 0xc0;
        1:  943:    bool expected_result = true;
        -:  944:
        -:  945:    // encoding
        1:  946:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1:  946-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  947:
        -:  948:    // Assertions
       1*:  949:    EXPECT_EQ(result, expected_result);
        1:  949-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  949-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  949-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  949-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  949-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  949-block  5
call   16 never executed
call   17 never executed
        1:  949-block  6
call   18 returned 1
    $$$$$:  949-block  7
call   19 never executed
    $$$$$:  949-block  8
    $$$$$:  949-block  9
call   20 never executed
    $$$$$:  949-block 10
    $$$$$:  949-block 11
call   21 never executed
       1*:  950:    EXPECT_EQ(output_buffer[0], expected_character);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  950-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  950-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  950-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  950-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  950-block  4
call   16 never executed
call   17 never executed
        1:  950-block  5
call   18 returned 1
    $$$$$:  950-block  6
call   19 never executed
    $$$$$:  950-block  7
    $$$$$:  950-block  8
call   20 never executed
    $$$$$:  950-block  9
    $$$$$:  950-block 10
call   21 never executed
        -:  951:
        1:  952:}
------------------
        -:  953:
        4:  954:TEST(slip_encoding_testsSuite, EndByteTest){
        -:  955:    // input buffer with data
        1:  956:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0x01,0x02};
        1:  957:    uint16_t input_length = 2;
        -:  958:    // output buffer after encoding
        -:  959:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  960:    uint16_t output_length;
        -:  961:    bool result;
        -:  962:
        -:  963:    // expected character
        1:  964:    uint8_t expected_character = 0xc0;
        1:  965:    bool expected_result = true;
        -:  966:
        -:  967:    // encoding
        1:  968:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -:  969:
        -:  970:    // Assertions
       1*:  971:    EXPECT_EQ(result, expected_result);
       1*:  972:    EXPECT_EQ(output_buffer[3], expected_character);
        1:  973:}
------------------
_ZN41slip_encoding_testsSuite_EndByteTest_TestC1Ev:
function _ZN41slip_encoding_testsSuite_EndByteTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  954:TEST(slip_encoding_testsSuite, EndByteTest){
        1:  954-block  0
call    0 returned 1
------------------
_ZN41slip_encoding_testsSuite_EndByteTest_TestD0Ev:
function _ZN41slip_encoding_testsSuite_EndByteTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  954:TEST(slip_encoding_testsSuite, EndByteTest){
        1:  954-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41slip_encoding_testsSuite_EndByteTest_TestD1Ev:
function _ZN41slip_encoding_testsSuite_EndByteTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  954:TEST(slip_encoding_testsSuite, EndByteTest){
        1:  954-block  0
call    0 returned 1
------------------
_ZN41slip_encoding_testsSuite_EndByteTest_Test8TestBodyEv:
function _ZN41slip_encoding_testsSuite_EndByteTest_Test8TestBodyEv called 1 returned 100% blocks executed 26%
        1:  954:TEST(slip_encoding_testsSuite, EndByteTest){
        -:  955:    // input buffer with data
        1:  956:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0x01,0x02};
        1:  957:    uint16_t input_length = 2;
        -:  958:    // output buffer after encoding
        -:  959:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  960:    uint16_t output_length;
        -:  961:    bool result;
        -:  962:
        -:  963:    // expected character
        1:  964:    uint8_t expected_character = 0xc0;
        1:  965:    bool expected_result = true;
        -:  966:
        -:  967:    // encoding
        1:  968:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1:  968-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  969:
        -:  970:    // Assertions
       1*:  971:    EXPECT_EQ(result, expected_result);
        1:  971-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  971-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  971-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  971-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  971-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  971-block  5
call   16 never executed
call   17 never executed
        1:  971-block  6
call   18 returned 1
    $$$$$:  971-block  7
call   19 never executed
    $$$$$:  971-block  8
    $$$$$:  971-block  9
call   20 never executed
    $$$$$:  971-block 10
    $$$$$:  971-block 11
call   21 never executed
       1*:  972:    EXPECT_EQ(output_buffer[3], expected_character);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  972-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  972-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  972-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  972-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  972-block  4
call   16 never executed
call   17 never executed
        1:  972-block  5
call   18 returned 1
    $$$$$:  972-block  6
call   19 never executed
    $$$$$:  972-block  7
    $$$$$:  972-block  8
call   20 never executed
    $$$$$:  972-block  9
    $$$$$:  972-block 10
call   21 never executed
        1:  973:}
------------------
        -:  974:
        4:  975:TEST(slip_encoding_testsSuite, EmptyBufferTest){
        -:  976:    // input buffer with data
        1:  977:    uint8_t input_buffer[UART_BUFFER_SIZE] = {};
        1:  978:    uint16_t input_length = 0;
        -:  979:    // output buffer after encoding
        -:  980:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  981:    uint16_t output_length;
        -:  982:
        -:  983:    // expected buffer
        1:  984:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xc0, 0xc0};
        1:  985:    uint16_t expected_length = 2;
        -:  986:
        -:  987:    // encoding
        1:  988:    slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -:  989:
        -:  990:    // Assertions
       1*:  991:    EXPECT_EQ(output_length, 2);
        3:  992:    for(int i = 0; i < expected_length; i++){
       2*:  993:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -:  994:    }
        1:  995:}
------------------
_ZN45slip_encoding_testsSuite_EmptyBufferTest_TestC1Ev:
function _ZN45slip_encoding_testsSuite_EmptyBufferTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  975:TEST(slip_encoding_testsSuite, EmptyBufferTest){
        1:  975-block  0
call    0 returned 1
------------------
_ZN45slip_encoding_testsSuite_EmptyBufferTest_TestD0Ev:
function _ZN45slip_encoding_testsSuite_EmptyBufferTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  975:TEST(slip_encoding_testsSuite, EmptyBufferTest){
        1:  975-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN45slip_encoding_testsSuite_EmptyBufferTest_TestD1Ev:
function _ZN45slip_encoding_testsSuite_EmptyBufferTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  975:TEST(slip_encoding_testsSuite, EmptyBufferTest){
        1:  975-block  0
call    0 returned 1
------------------
_ZN45slip_encoding_testsSuite_EmptyBufferTest_Test8TestBodyEv:
function _ZN45slip_encoding_testsSuite_EmptyBufferTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1:  975:TEST(slip_encoding_testsSuite, EmptyBufferTest){
        -:  976:    // input buffer with data
        1:  977:    uint8_t input_buffer[UART_BUFFER_SIZE] = {};
        1:  978:    uint16_t input_length = 0;
        -:  979:    // output buffer after encoding
        -:  980:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -:  981:    uint16_t output_length;
        -:  982:
        -:  983:    // expected buffer
        1:  984:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xc0, 0xc0};
        1:  985:    uint16_t expected_length = 2;
        -:  986:
        -:  987:    // encoding
        1:  988:    slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1:  988-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  989:
        -:  990:    // Assertions
       1*:  991:    EXPECT_EQ(output_length, 2);
        1:  991-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  991-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  991-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  991-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  991-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  991-block  5
call   16 never executed
call   17 never executed
        1:  991-block  6
call   18 returned 1
    $$$$$:  991-block  7
    $$$$$:  991-block  8
call   19 never executed
    $$$$$:  991-block  9
    $$$$$:  991-block 10
call   20 never executed
    $$$$$:  991-block 11
    $$$$$:  991-block 12
call   21 never executed
        3:  992:    for(int i = 0; i < expected_length; i++){
        3:  992-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
       2*:  993:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        2:  993-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  993-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  993-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  993-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  993-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  993-block  5
call   16 never executed
call   17 never executed
        2:  993-block  6
call   18 returned 2
    $$$$$:  993-block  7
call   19 never executed
    $$$$$:  993-block  8
    $$$$$:  993-block  9
call   20 never executed
    $$$$$:  993-block 10
    $$$$$:  993-block 11
call   21 never executed
        -:  994:    }
        1:  995:}
        1:  995-block  0
------------------
        -:  996:
        4:  997:TEST(slip_encoding_testsSuite, BufferLargerThanUARTBufferTest){
        -:  998:    // input buffer filled with 1 for a length of 356
        -:  999:    uint8_t input_buffer[UART_BUFFER_SIZE + 100]; // 256 + 100
        1: 1000:    memset(input_buffer, 1, sizeof(input_buffer));
        1: 1001:    uint16_t input_length = 356;
        -: 1002:    bool result;
        -: 1003:
        -: 1004:    // output buffer after encoding
        -: 1005:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1006:    uint16_t output_length;
        1: 1007:    bool expected_result = false;
        -: 1008:
        -: 1009:    // expected buffer
        -: 1010:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1: 1011:    memset(expected_buffer, 1, UART_BUFFER_SIZE);
        1: 1012:    expected_buffer[0] = 0xc0;
        1: 1013:    expected_buffer[255] = 0xc0;
        1: 1014:    uint16_t expected_length = 256;
        -: 1015:
        -: 1016:    // encoding
        1: 1017:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1018:
        -: 1019:    // Assertions
       1*: 1020:    EXPECT_EQ(result, expected_result);
        1: 1021:}
------------------
_ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_TestC1Ev:
function _ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  997:TEST(slip_encoding_testsSuite, BufferLargerThanUARTBufferTest){
        1:  997-block  0
call    0 returned 1
------------------
_ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_TestD0Ev:
function _ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  997:TEST(slip_encoding_testsSuite, BufferLargerThanUARTBufferTest){
        1:  997-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_TestD1Ev:
function _ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  997:TEST(slip_encoding_testsSuite, BufferLargerThanUARTBufferTest){
        1:  997-block  0
call    0 returned 1
------------------
_ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_Test8TestBodyEv:
function _ZN60slip_encoding_testsSuite_BufferLargerThanUARTBufferTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1:  997:TEST(slip_encoding_testsSuite, BufferLargerThanUARTBufferTest){
        -:  998:    // input buffer filled with 1 for a length of 356
        -:  999:    uint8_t input_buffer[UART_BUFFER_SIZE + 100]; // 256 + 100
        1: 1000:    memset(input_buffer, 1, sizeof(input_buffer));
        1: 1001:    uint16_t input_length = 356;
        -: 1002:    bool result;
        -: 1003:
        -: 1004:    // output buffer after encoding
        -: 1005:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1006:    uint16_t output_length;
        1: 1007:    bool expected_result = false;
        -: 1008:
        -: 1009:    // expected buffer
        -: 1010:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1: 1011:    memset(expected_buffer, 1, UART_BUFFER_SIZE);
        1: 1012:    expected_buffer[0] = 0xc0;
        1: 1013:    expected_buffer[255] = 0xc0;
        1: 1014:    uint16_t expected_length = 256;
        -: 1015:
        -: 1016:    // encoding
        1: 1017:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1017-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1018:
        -: 1019:    // Assertions
       1*: 1020:    EXPECT_EQ(result, expected_result);
        1: 1020-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1020-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1020-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1020-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1020-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1020-block  5
call   16 never executed
call   17 never executed
        1: 1020-block  6
call   18 returned 1
    $$$$$: 1020-block  7
call   19 never executed
    $$$$$: 1020-block  8
    $$$$$: 1020-block  9
call   20 never executed
    $$$$$: 1020-block 10
    $$$$$: 1020-block 11
call   21 never executed
        1: 1021:}
------------------
        -: 1022:
        4: 1023:TEST(slip_encoding_testsSuite, BufferSmallerThanUARTBufferBeforeEncodingTest){
        -: 1024:    // input buffer with data that will expand during encoding
        -: 1025:    uint8_t input_buffer[UART_BUFFER_SIZE - 20]; // 256 + 100
        1: 1026:    memset(input_buffer, 0xC0, sizeof(input_buffer));
        1: 1027:    uint16_t input_length = UART_BUFFER_SIZE - 20;
        -: 1028:    bool result;
        -: 1029:
        -: 1030:    // output buffer after encoding
        -: 1031:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1032:    uint16_t output_length;
        -: 1033:
        -: 1034:    // expected result
        1: 1035:    bool expected_result = false;
        -: 1036:
        -: 1037:    // encoding
        1: 1038:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1039:
        -: 1040:    // Assertions
       1*: 1041:    EXPECT_EQ(result, expected_result);
        1: 1042:}
------------------
_ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_TestC1Ev:
function _ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1023:TEST(slip_encoding_testsSuite, BufferSmallerThanUARTBufferBeforeEncodingTest){
        1: 1023-block  0
call    0 returned 1
------------------
_ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_TestD0Ev:
function _ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1023:TEST(slip_encoding_testsSuite, BufferSmallerThanUARTBufferBeforeEncodingTest){
        1: 1023-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_TestD1Ev:
function _ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1023:TEST(slip_encoding_testsSuite, BufferSmallerThanUARTBufferBeforeEncodingTest){
        1: 1023-block  0
call    0 returned 1
------------------
_ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_Test8TestBodyEv:
function _ZN75slip_encoding_testsSuite_BufferSmallerThanUARTBufferBeforeEncodingTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1: 1023:TEST(slip_encoding_testsSuite, BufferSmallerThanUARTBufferBeforeEncodingTest){
        -: 1024:    // input buffer with data that will expand during encoding
        -: 1025:    uint8_t input_buffer[UART_BUFFER_SIZE - 20]; // 256 + 100
        1: 1026:    memset(input_buffer, 0xC0, sizeof(input_buffer));
        1: 1027:    uint16_t input_length = UART_BUFFER_SIZE - 20;
        -: 1028:    bool result;
        -: 1029:
        -: 1030:    // output buffer after encoding
        -: 1031:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1032:    uint16_t output_length;
        -: 1033:
        -: 1034:    // expected result
        1: 1035:    bool expected_result = false;
        -: 1036:
        -: 1037:    // encoding
        1: 1038:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1038-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1039:
        -: 1040:    // Assertions
       1*: 1041:    EXPECT_EQ(result, expected_result);
        1: 1041-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1041-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1041-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1041-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1041-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1041-block  5
call   16 never executed
call   17 never executed
        1: 1041-block  6
call   18 returned 1
    $$$$$: 1041-block  7
call   19 never executed
    $$$$$: 1041-block  8
    $$$$$: 1041-block  9
call   20 never executed
    $$$$$: 1041-block 10
    $$$$$: 1041-block 11
call   21 never executed
        1: 1042:}
------------------
        -: 1043:
        4: 1044:TEST(slip_encoding_testsSuite, ENDReplacementTest){
        -: 1045:    // input buffer with data containing END byte
        1: 1046:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0};
        1: 1047:    uint16_t input_length = 1;
        -: 1048:    // output buffer after encoding
        -: 1049:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1050:    uint16_t output_length;
        -: 1051:    bool result;
        -: 1052:
        -: 1053:    // expected buffer
        1: 1054:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xC0};
        1: 1055:    uint16_t expected_length = 4;
        1: 1056:    bool expected_result = true;
        -: 1057:
        -: 1058:    // encoding
        1: 1059:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1060:
        -: 1061:    // Assertions
       1*: 1062:    EXPECT_EQ(result, expected_result);
       1*: 1063:    EXPECT_EQ(output_length, expected_length);
        5: 1064:    for(int i = 0; i < expected_length; i++){
       4*: 1065:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -: 1066:    }
        1: 1067:}
------------------
_ZN48slip_encoding_testsSuite_ENDReplacementTest_TestC1Ev:
function _ZN48slip_encoding_testsSuite_ENDReplacementTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1044:TEST(slip_encoding_testsSuite, ENDReplacementTest){
        1: 1044-block  0
call    0 returned 1
------------------
_ZN48slip_encoding_testsSuite_ENDReplacementTest_TestD0Ev:
function _ZN48slip_encoding_testsSuite_ENDReplacementTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1044:TEST(slip_encoding_testsSuite, ENDReplacementTest){
        1: 1044-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48slip_encoding_testsSuite_ENDReplacementTest_TestD1Ev:
function _ZN48slip_encoding_testsSuite_ENDReplacementTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1044:TEST(slip_encoding_testsSuite, ENDReplacementTest){
        1: 1044-block  0
call    0 returned 1
------------------
_ZN48slip_encoding_testsSuite_ENDReplacementTest_Test8TestBodyEv:
function _ZN48slip_encoding_testsSuite_ENDReplacementTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1: 1044:TEST(slip_encoding_testsSuite, ENDReplacementTest){
        -: 1045:    // input buffer with data containing END byte
        1: 1046:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0};
        1: 1047:    uint16_t input_length = 1;
        -: 1048:    // output buffer after encoding
        -: 1049:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1050:    uint16_t output_length;
        -: 1051:    bool result;
        -: 1052:
        -: 1053:    // expected buffer
        1: 1054:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xC0};
        1: 1055:    uint16_t expected_length = 4;
        1: 1056:    bool expected_result = true;
        -: 1057:
        -: 1058:    // encoding
        1: 1059:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1059-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1060:
        -: 1061:    // Assertions
       1*: 1062:    EXPECT_EQ(result, expected_result);
        1: 1062-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1062-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1062-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1062-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1062-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1062-block  5
call   16 never executed
call   17 never executed
        1: 1062-block  6
call   18 returned 1
    $$$$$: 1062-block  7
call   19 never executed
    $$$$$: 1062-block  8
    $$$$$: 1062-block  9
call   20 never executed
    $$$$$: 1062-block 10
    $$$$$: 1062-block 11
call   21 never executed
       1*: 1063:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1063-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1063-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1063-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1063-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1063-block  4
call   16 never executed
call   17 never executed
        1: 1063-block  5
call   18 returned 1
    $$$$$: 1063-block  6
call   19 never executed
    $$$$$: 1063-block  7
    $$$$$: 1063-block  8
call   20 never executed
    $$$$$: 1063-block  9
    $$$$$: 1063-block 10
call   21 never executed
        5: 1064:    for(int i = 0; i < expected_length; i++){
        5: 1064-block  0
branch  0 taken 4
branch  1 taken 1 (fallthrough)
       4*: 1065:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        4: 1065-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1065-block  1
call    3 returned 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    %%%%%: 1065-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1065-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1065-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1065-block  5
call   16 never executed
call   17 never executed
        4: 1065-block  6
call   18 returned 4
    $$$$$: 1065-block  7
call   19 never executed
    $$$$$: 1065-block  8
    $$$$$: 1065-block  9
call   20 never executed
    $$$$$: 1065-block 10
    $$$$$: 1065-block 11
call   21 never executed
        -: 1066:    }
        1: 1067:}
        1: 1067-block  0
------------------
        -: 1068:
        4: 1069:TEST(slip_encoding_testsSuite, ESCReplacementTest){
        -: 1070:    // input buffer with data containing ESC byte
        1: 1071:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xDB};
        1: 1072:    uint16_t input_length = 1;
        -: 1073:    // output buffer after encoding
        -: 1074:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1075:    uint16_t output_length;
        -: 1076:    bool result;
        -: 1077:
        -: 1078:    // expected buffer
        1: 1079:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xC0};
        1: 1080:    uint16_t expected_length = 4;
        1: 1081:    bool expected_result = true;
        -: 1082:
        -: 1083:    // encoding
        1: 1084:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1085:
        -: 1086:    // Assertions
       1*: 1087:    EXPECT_EQ(result, expected_result);
       1*: 1088:    EXPECT_EQ(output_length, expected_length);
        5: 1089:    for(int i = 0; i < expected_length; i++){
       4*: 1090:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -: 1091:    }
        1: 1092:}
------------------
_ZN48slip_encoding_testsSuite_ESCReplacementTest_TestC1Ev:
function _ZN48slip_encoding_testsSuite_ESCReplacementTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1069:TEST(slip_encoding_testsSuite, ESCReplacementTest){
        1: 1069-block  0
call    0 returned 1
------------------
_ZN48slip_encoding_testsSuite_ESCReplacementTest_TestD0Ev:
function _ZN48slip_encoding_testsSuite_ESCReplacementTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1069:TEST(slip_encoding_testsSuite, ESCReplacementTest){
        1: 1069-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48slip_encoding_testsSuite_ESCReplacementTest_TestD1Ev:
function _ZN48slip_encoding_testsSuite_ESCReplacementTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1069:TEST(slip_encoding_testsSuite, ESCReplacementTest){
        1: 1069-block  0
call    0 returned 1
------------------
_ZN48slip_encoding_testsSuite_ESCReplacementTest_Test8TestBodyEv:
function _ZN48slip_encoding_testsSuite_ESCReplacementTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1: 1069:TEST(slip_encoding_testsSuite, ESCReplacementTest){
        -: 1070:    // input buffer with data containing ESC byte
        1: 1071:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xDB};
        1: 1072:    uint16_t input_length = 1;
        -: 1073:    // output buffer after encoding
        -: 1074:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1075:    uint16_t output_length;
        -: 1076:    bool result;
        -: 1077:
        -: 1078:    // expected buffer
        1: 1079:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xC0};
        1: 1080:    uint16_t expected_length = 4;
        1: 1081:    bool expected_result = true;
        -: 1082:
        -: 1083:    // encoding
        1: 1084:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1084-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1085:
        -: 1086:    // Assertions
       1*: 1087:    EXPECT_EQ(result, expected_result);
        1: 1087-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1087-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1087-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1087-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1087-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1087-block  5
call   16 never executed
call   17 never executed
        1: 1087-block  6
call   18 returned 1
    $$$$$: 1087-block  7
call   19 never executed
    $$$$$: 1087-block  8
    $$$$$: 1087-block  9
call   20 never executed
    $$$$$: 1087-block 10
    $$$$$: 1087-block 11
call   21 never executed
       1*: 1088:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1088-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1088-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1088-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1088-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1088-block  4
call   16 never executed
call   17 never executed
        1: 1088-block  5
call   18 returned 1
    $$$$$: 1088-block  6
call   19 never executed
    $$$$$: 1088-block  7
    $$$$$: 1088-block  8
call   20 never executed
    $$$$$: 1088-block  9
    $$$$$: 1088-block 10
call   21 never executed
        5: 1089:    for(int i = 0; i < expected_length; i++){
        5: 1089-block  0
branch  0 taken 4
branch  1 taken 1 (fallthrough)
       4*: 1090:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        4: 1090-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1090-block  1
call    3 returned 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    %%%%%: 1090-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1090-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1090-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1090-block  5
call   16 never executed
call   17 never executed
        4: 1090-block  6
call   18 returned 4
    $$$$$: 1090-block  7
call   19 never executed
    $$$$$: 1090-block  8
    $$$$$: 1090-block  9
call   20 never executed
    $$$$$: 1090-block 10
    $$$$$: 1090-block 11
call   21 never executed
        -: 1091:    }
        1: 1092:}
        1: 1092-block  0
------------------
        -: 1093:
        4: 1094:TEST(slip_encoding_testsSuite, SequentialENDBytesTest){
        -: 1095:    // input buffer with sequential END bytes
        1: 1096:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xC0};
        1: 1097:    uint16_t input_length = 2;
        -: 1098:    // output buffer after encoding
        -: 1099:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1100:    uint16_t output_length;
        -: 1101:    bool result;
        -: 1102:
        -: 1103:    // expected buffer
        1: 1104:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDC, 0xC0};
        1: 1105:    uint16_t expected_length = 6;
        1: 1106:    bool expected_result = true;
        -: 1107:
        -: 1108:    // encoding
        1: 1109:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1110:
        -: 1111:    // Assertions
       1*: 1112:    EXPECT_EQ(result, expected_result);
       1*: 1113:    EXPECT_EQ(output_length, expected_length);
        7: 1114:    for(int i = 0; i < expected_length; i++){
       6*: 1115:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -: 1116:    }
        1: 1117:}
------------------
_ZN52slip_encoding_testsSuite_SequentialENDBytesTest_TestC1Ev:
function _ZN52slip_encoding_testsSuite_SequentialENDBytesTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1094:TEST(slip_encoding_testsSuite, SequentialENDBytesTest){
        1: 1094-block  0
call    0 returned 1
------------------
_ZN52slip_encoding_testsSuite_SequentialENDBytesTest_TestD0Ev:
function _ZN52slip_encoding_testsSuite_SequentialENDBytesTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1094:TEST(slip_encoding_testsSuite, SequentialENDBytesTest){
        1: 1094-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_encoding_testsSuite_SequentialENDBytesTest_TestD1Ev:
function _ZN52slip_encoding_testsSuite_SequentialENDBytesTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1094:TEST(slip_encoding_testsSuite, SequentialENDBytesTest){
        1: 1094-block  0
call    0 returned 1
------------------
_ZN52slip_encoding_testsSuite_SequentialENDBytesTest_Test8TestBodyEv:
function _ZN52slip_encoding_testsSuite_SequentialENDBytesTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1: 1094:TEST(slip_encoding_testsSuite, SequentialENDBytesTest){
        -: 1095:    // input buffer with sequential END bytes
        1: 1096:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xC0};
        1: 1097:    uint16_t input_length = 2;
        -: 1098:    // output buffer after encoding
        -: 1099:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1100:    uint16_t output_length;
        -: 1101:    bool result;
        -: 1102:
        -: 1103:    // expected buffer
        1: 1104:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDC, 0xC0};
        1: 1105:    uint16_t expected_length = 6;
        1: 1106:    bool expected_result = true;
        -: 1107:
        -: 1108:    // encoding
        1: 1109:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1109-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1110:
        -: 1111:    // Assertions
       1*: 1112:    EXPECT_EQ(result, expected_result);
        1: 1112-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1112-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1112-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1112-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1112-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1112-block  5
call   16 never executed
call   17 never executed
        1: 1112-block  6
call   18 returned 1
    $$$$$: 1112-block  7
call   19 never executed
    $$$$$: 1112-block  8
    $$$$$: 1112-block  9
call   20 never executed
    $$$$$: 1112-block 10
    $$$$$: 1112-block 11
call   21 never executed
       1*: 1113:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1113-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1113-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1113-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1113-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1113-block  4
call   16 never executed
call   17 never executed
        1: 1113-block  5
call   18 returned 1
    $$$$$: 1113-block  6
call   19 never executed
    $$$$$: 1113-block  7
    $$$$$: 1113-block  8
call   20 never executed
    $$$$$: 1113-block  9
    $$$$$: 1113-block 10
call   21 never executed
        7: 1114:    for(int i = 0; i < expected_length; i++){
        7: 1114-block  0
branch  0 taken 6
branch  1 taken 1 (fallthrough)
       6*: 1115:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        6: 1115-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1115-block  1
call    3 returned 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
    %%%%%: 1115-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1115-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1115-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1115-block  5
call   16 never executed
call   17 never executed
        6: 1115-block  6
call   18 returned 6
    $$$$$: 1115-block  7
call   19 never executed
    $$$$$: 1115-block  8
    $$$$$: 1115-block  9
call   20 never executed
    $$$$$: 1115-block 10
    $$$$$: 1115-block 11
call   21 never executed
        -: 1116:    }
        1: 1117:}
        1: 1117-block  0
------------------
        -: 1118:
        4: 1119:TEST(slip_encoding_testsSuite, SequentialESCBytesTest){
        -: 1120:    // input buffer with sequential ESC bytes
        1: 1121:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xDB, 0xDB};
        1: 1122:    uint16_t input_length = 2;
        -: 1123:    // output buffer after encoding
        -: 1124:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1125:    uint16_t output_length;
        -: 1126:    bool result;
        -: 1127:
        -: 1128:    // expected buffer
        1: 1129:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xDB, 0xDD, 0xC0};
        1: 1130:    uint16_t expected_length = 6;
        1: 1131:    bool expected_result = true;
        -: 1132:
        -: 1133:    // encoding
        1: 1134:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1135:
        -: 1136:    // Assertions
       1*: 1137:    EXPECT_EQ(result, expected_result);
       1*: 1138:    EXPECT_EQ(output_length, expected_length);
        7: 1139:    for(int i = 0; i < expected_length; i++){
       6*: 1140:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -: 1141:    }
        1: 1142:}
------------------
_ZN52slip_encoding_testsSuite_SequentialESCBytesTest_TestC1Ev:
function _ZN52slip_encoding_testsSuite_SequentialESCBytesTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1119:TEST(slip_encoding_testsSuite, SequentialESCBytesTest){
        1: 1119-block  0
call    0 returned 1
------------------
_ZN52slip_encoding_testsSuite_SequentialESCBytesTest_TestD0Ev:
function _ZN52slip_encoding_testsSuite_SequentialESCBytesTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1119:TEST(slip_encoding_testsSuite, SequentialESCBytesTest){
        1: 1119-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_encoding_testsSuite_SequentialESCBytesTest_TestD1Ev:
function _ZN52slip_encoding_testsSuite_SequentialESCBytesTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1119:TEST(slip_encoding_testsSuite, SequentialESCBytesTest){
        1: 1119-block  0
call    0 returned 1
------------------
_ZN52slip_encoding_testsSuite_SequentialESCBytesTest_Test8TestBodyEv:
function _ZN52slip_encoding_testsSuite_SequentialESCBytesTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1: 1119:TEST(slip_encoding_testsSuite, SequentialESCBytesTest){
        -: 1120:    // input buffer with sequential ESC bytes
        1: 1121:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xDB, 0xDB};
        1: 1122:    uint16_t input_length = 2;
        -: 1123:    // output buffer after encoding
        -: 1124:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1125:    uint16_t output_length;
        -: 1126:    bool result;
        -: 1127:
        -: 1128:    // expected buffer
        1: 1129:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDD, 0xDB, 0xDD, 0xC0};
        1: 1130:    uint16_t expected_length = 6;
        1: 1131:    bool expected_result = true;
        -: 1132:
        -: 1133:    // encoding
        1: 1134:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1134-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1135:
        -: 1136:    // Assertions
       1*: 1137:    EXPECT_EQ(result, expected_result);
        1: 1137-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1137-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1137-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1137-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1137-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1137-block  5
call   16 never executed
call   17 never executed
        1: 1137-block  6
call   18 returned 1
    $$$$$: 1137-block  7
call   19 never executed
    $$$$$: 1137-block  8
    $$$$$: 1137-block  9
call   20 never executed
    $$$$$: 1137-block 10
    $$$$$: 1137-block 11
call   21 never executed
       1*: 1138:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1138-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1138-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1138-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1138-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1138-block  4
call   16 never executed
call   17 never executed
        1: 1138-block  5
call   18 returned 1
    $$$$$: 1138-block  6
call   19 never executed
    $$$$$: 1138-block  7
    $$$$$: 1138-block  8
call   20 never executed
    $$$$$: 1138-block  9
    $$$$$: 1138-block 10
call   21 never executed
        7: 1139:    for(int i = 0; i < expected_length; i++){
        7: 1139-block  0
branch  0 taken 6
branch  1 taken 1 (fallthrough)
       6*: 1140:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        6: 1140-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1140-block  1
call    3 returned 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
    %%%%%: 1140-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1140-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1140-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1140-block  5
call   16 never executed
call   17 never executed
        6: 1140-block  6
call   18 returned 6
    $$$$$: 1140-block  7
call   19 never executed
    $$$$$: 1140-block  8
    $$$$$: 1140-block  9
call   20 never executed
    $$$$$: 1140-block 10
    $$$$$: 1140-block 11
call   21 never executed
        -: 1141:    }
        1: 1142:}
        1: 1142-block  0
------------------
        -: 1143:
        4: 1144:TEST(slip_encoding_testsSuite, MixedENDandESCBytesTest){
        -: 1145:    // input buffer with mixed END and ESC bytes
        1: 1146:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xC0, 0xDB};
        1: 1147:    uint16_t input_length = 4;
        -: 1148:    // output buffer after encoding
        -: 1149:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1150:    uint16_t output_length;
        -: 1151:    bool result;
        -: 1152:
        -: 1153:    // expected buffer
        1: 1154:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDB, 0xDC, 0xDB, 0xDD, 0xC0};
        1: 1155:    uint16_t expected_length = 10;
        1: 1156:    bool expected_result = true;
        -: 1157:
        -: 1158:    // encoding
        1: 1159:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1160:
        -: 1161:    // Assertions
       1*: 1162:    EXPECT_EQ(result, expected_result);
       1*: 1163:    EXPECT_EQ(output_length, expected_length);
       11: 1164:    for(int i = 0; i < expected_length; i++){
      10*: 1165:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -: 1166:    }
        1: 1167:}
------------------
_ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_TestC1Ev:
function _ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1144:TEST(slip_encoding_testsSuite, MixedENDandESCBytesTest){
        1: 1144-block  0
call    0 returned 1
------------------
_ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_TestD0Ev:
function _ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1144:TEST(slip_encoding_testsSuite, MixedENDandESCBytesTest){
        1: 1144-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_TestD1Ev:
function _ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1144:TEST(slip_encoding_testsSuite, MixedENDandESCBytesTest){
        1: 1144-block  0
call    0 returned 1
------------------
_ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_Test8TestBodyEv:
function _ZN53slip_encoding_testsSuite_MixedENDandESCBytesTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1: 1144:TEST(slip_encoding_testsSuite, MixedENDandESCBytesTest){
        -: 1145:    // input buffer with mixed END and ESC bytes
        1: 1146:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xC0, 0xDB};
        1: 1147:    uint16_t input_length = 4;
        -: 1148:    // output buffer after encoding
        -: 1149:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1150:    uint16_t output_length;
        -: 1151:    bool result;
        -: 1152:
        -: 1153:    // expected buffer
        1: 1154:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDB, 0xDC, 0xDB, 0xDD, 0xC0};
        1: 1155:    uint16_t expected_length = 10;
        1: 1156:    bool expected_result = true;
        -: 1157:
        -: 1158:    // encoding
        1: 1159:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1159-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1160:
        -: 1161:    // Assertions
       1*: 1162:    EXPECT_EQ(result, expected_result);
        1: 1162-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1162-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1162-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1162-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1162-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1162-block  5
call   16 never executed
call   17 never executed
        1: 1162-block  6
call   18 returned 1
    $$$$$: 1162-block  7
call   19 never executed
    $$$$$: 1162-block  8
    $$$$$: 1162-block  9
call   20 never executed
    $$$$$: 1162-block 10
    $$$$$: 1162-block 11
call   21 never executed
       1*: 1163:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1163-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1163-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1163-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1163-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1163-block  4
call   16 never executed
call   17 never executed
        1: 1163-block  5
call   18 returned 1
    $$$$$: 1163-block  6
call   19 never executed
    $$$$$: 1163-block  7
    $$$$$: 1163-block  8
call   20 never executed
    $$$$$: 1163-block  9
    $$$$$: 1163-block 10
call   21 never executed
       11: 1164:    for(int i = 0; i < expected_length; i++){
       11: 1164-block  0
branch  0 taken 10
branch  1 taken 1 (fallthrough)
      10*: 1165:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
       10: 1165-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 1165-block  1
call    3 returned 10
branch  4 taken 0 (fallthrough)
branch  5 taken 10
    %%%%%: 1165-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1165-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1165-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1165-block  5
call   16 never executed
call   17 never executed
       10: 1165-block  6
call   18 returned 10
    $$$$$: 1165-block  7
call   19 never executed
    $$$$$: 1165-block  8
    $$$$$: 1165-block  9
call   20 never executed
    $$$$$: 1165-block 10
    $$$$$: 1165-block 11
call   21 never executed
        -: 1166:    }
        1: 1167:}
        1: 1167-block  0
------------------
        -: 1168:
        4: 1169:TEST(slip_encoding_testsSuite, MaximumPayloadSizeTest){
        -: 1170:    // input buffer with maximum data size
        -: 1171:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1: 1172:    memset(input_buffer, 0x01, UART_BUFFER_SIZE - 2);
        1: 1173:    uint16_t input_length = UART_BUFFER_SIZE - 2;
        -: 1174:    // output buffer after encoding
        -: 1175:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1176:    uint16_t output_length;
        -: 1177:    bool result;
        -: 1178:
        -: 1179:    // expected result
        -: 1180:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1: 1181:    memset(expected_buffer, 0x01, UART_BUFFER_SIZE);
        1: 1182:    expected_buffer[0] = 0xc0;
        1: 1183:    expected_buffer[255] = 0xc0;
        1: 1184:    uint16_t expected_length = UART_BUFFER_SIZE;
        1: 1185:    bool expected_result = true; // Since encoding should not overflow
        -: 1186:
        -: 1187:    // encoding
        1: 1188:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1189:
        -: 1190:    // Assertions
       1*: 1191:    EXPECT_EQ(result, expected_result);
       1*: 1192:    EXPECT_EQ(output_length, expected_length);
      257: 1193:    for(int i = 0; i < expected_length; i++){
     256*: 1194:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -: 1195:    }
        1: 1196:}
------------------
_ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_TestC1Ev:
function _ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1169:TEST(slip_encoding_testsSuite, MaximumPayloadSizeTest){
        1: 1169-block  0
call    0 returned 1
------------------
_ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_TestD0Ev:
function _ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1169:TEST(slip_encoding_testsSuite, MaximumPayloadSizeTest){
        1: 1169-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_TestD1Ev:
function _ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1169:TEST(slip_encoding_testsSuite, MaximumPayloadSizeTest){
        1: 1169-block  0
call    0 returned 1
------------------
_ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_Test8TestBodyEv:
function _ZN52slip_encoding_testsSuite_MaximumPayloadSizeTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1: 1169:TEST(slip_encoding_testsSuite, MaximumPayloadSizeTest){
        -: 1170:    // input buffer with maximum data size
        -: 1171:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1: 1172:    memset(input_buffer, 0x01, UART_BUFFER_SIZE - 2);
        1: 1173:    uint16_t input_length = UART_BUFFER_SIZE - 2;
        -: 1174:    // output buffer after encoding
        -: 1175:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1176:    uint16_t output_length;
        -: 1177:    bool result;
        -: 1178:
        -: 1179:    // expected result
        -: 1180:    uint8_t expected_buffer[UART_BUFFER_SIZE];
        1: 1181:    memset(expected_buffer, 0x01, UART_BUFFER_SIZE);
        1: 1182:    expected_buffer[0] = 0xc0;
        1: 1183:    expected_buffer[255] = 0xc0;
        1: 1184:    uint16_t expected_length = UART_BUFFER_SIZE;
        1: 1185:    bool expected_result = true; // Since encoding should not overflow
        -: 1186:
        -: 1187:    // encoding
        1: 1188:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1188-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1189:
        -: 1190:    // Assertions
       1*: 1191:    EXPECT_EQ(result, expected_result);
        1: 1191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1191-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1191-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1191-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1191-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1191-block  5
call   16 never executed
call   17 never executed
        1: 1191-block  6
call   18 returned 1
    $$$$$: 1191-block  7
call   19 never executed
    $$$$$: 1191-block  8
    $$$$$: 1191-block  9
call   20 never executed
    $$$$$: 1191-block 10
    $$$$$: 1191-block 11
call   21 never executed
       1*: 1192:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1192-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1192-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1192-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1192-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1192-block  4
call   16 never executed
call   17 never executed
        1: 1192-block  5
call   18 returned 1
    $$$$$: 1192-block  6
call   19 never executed
    $$$$$: 1192-block  7
    $$$$$: 1192-block  8
call   20 never executed
    $$$$$: 1192-block  9
    $$$$$: 1192-block 10
call   21 never executed
      257: 1193:    for(int i = 0; i < expected_length; i++){
      257: 1193-block  0
branch  0 taken 256
branch  1 taken 1 (fallthrough)
     256*: 1194:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
      256: 1194-block  0
call    0 returned 256
branch  1 taken 256 (fallthrough)
branch  2 taken 0 (throw)
      256: 1194-block  1
call    3 returned 256
branch  4 taken 0 (fallthrough)
branch  5 taken 256
    %%%%%: 1194-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1194-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1194-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1194-block  5
call   16 never executed
call   17 never executed
      256: 1194-block  6
call   18 returned 256
    $$$$$: 1194-block  7
call   19 never executed
    $$$$$: 1194-block  8
    $$$$$: 1194-block  9
call   20 never executed
    $$$$$: 1194-block 10
    $$$$$: 1194-block 11
call   21 never executed
        -: 1195:    }
        1: 1196:}
        1: 1196-block  0
------------------
        -: 1197:
        4: 1198:TEST(slip_encoding_testsSuite, BufferOverflowTest) {
        -: 1199:    // input buffer filled with 1 for a length equal to UART_BUFFER_SIZE
        -: 1200:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1: 1201:    memset(input_buffer, 1, sizeof(input_buffer)-1);
        1: 1202:    uint16_t input_length = UART_BUFFER_SIZE;
        -: 1203:    bool result;
        -: 1204:
        -: 1205:    // output buffer after encoding
        -: 1206:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1207:    uint16_t output_length;
        -: 1208:
        -: 1209:    // expected result
        1: 1210:    bool expected_result = false;
        -: 1211:
        -: 1212:    // encoding
        1: 1213:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1214:
        -: 1215:    // Assertions
       1*: 1216:    EXPECT_EQ(result, expected_result);
        1: 1217:}
------------------
_ZN48slip_encoding_testsSuite_BufferOverflowTest_TestC1Ev:
function _ZN48slip_encoding_testsSuite_BufferOverflowTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1198:TEST(slip_encoding_testsSuite, BufferOverflowTest) {
        1: 1198-block  0
call    0 returned 1
------------------
_ZN48slip_encoding_testsSuite_BufferOverflowTest_TestD0Ev:
function _ZN48slip_encoding_testsSuite_BufferOverflowTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1198:TEST(slip_encoding_testsSuite, BufferOverflowTest) {
        1: 1198-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48slip_encoding_testsSuite_BufferOverflowTest_TestD1Ev:
function _ZN48slip_encoding_testsSuite_BufferOverflowTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1198:TEST(slip_encoding_testsSuite, BufferOverflowTest) {
        1: 1198-block  0
call    0 returned 1
------------------
_ZN48slip_encoding_testsSuite_BufferOverflowTest_Test8TestBodyEv:
function _ZN48slip_encoding_testsSuite_BufferOverflowTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1: 1198:TEST(slip_encoding_testsSuite, BufferOverflowTest) {
        -: 1199:    // input buffer filled with 1 for a length equal to UART_BUFFER_SIZE
        -: 1200:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1: 1201:    memset(input_buffer, 1, sizeof(input_buffer)-1);
        1: 1202:    uint16_t input_length = UART_BUFFER_SIZE;
        -: 1203:    bool result;
        -: 1204:
        -: 1205:    // output buffer after encoding
        -: 1206:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1207:    uint16_t output_length;
        -: 1208:
        -: 1209:    // expected result
        1: 1210:    bool expected_result = false;
        -: 1211:
        -: 1212:    // encoding
        1: 1213:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1213-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1214:
        -: 1215:    // Assertions
       1*: 1216:    EXPECT_EQ(result, expected_result);
        1: 1216-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1216-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1216-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1216-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1216-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1216-block  5
call   16 never executed
call   17 never executed
        1: 1216-block  6
call   18 returned 1
    $$$$$: 1216-block  7
call   19 never executed
    $$$$$: 1216-block  8
    $$$$$: 1216-block  9
call   20 never executed
    $$$$$: 1216-block 10
    $$$$$: 1216-block 11
call   21 never executed
        1: 1217:}
------------------
        -: 1218:
        4: 1219:TEST(slip_encoding_testsSuite, EscOverflowTest) {
        -: 1220:    // input buffer filled with ESC characters, causing overflow
        -: 1221:    uint8_t input_buffer[UART_BUFFER_SIZE];
      257: 1222:    for (uint16_t i = 0; i < UART_BUFFER_SIZE; i++) {
      256: 1223:        input_buffer[i] = 0xDB; // ESC character
        -: 1224:    }
        1: 1225:    uint16_t input_length = UART_BUFFER_SIZE;
        -: 1226:    bool result;
        -: 1227:
        -: 1228:    // output buffer after encoding
        -: 1229:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1230:    uint16_t output_length;
        -: 1231:
        -: 1232:    // expected result
        1: 1233:    bool expected_result = false;
        -: 1234:
        -: 1235:    // encoding
        1: 1236:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1237:
        -: 1238:    // Assertions
       1*: 1239:    EXPECT_EQ(result, expected_result);
        1: 1240:}
------------------
_ZN45slip_encoding_testsSuite_EscOverflowTest_TestC1Ev:
function _ZN45slip_encoding_testsSuite_EscOverflowTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1219:TEST(slip_encoding_testsSuite, EscOverflowTest) {
        1: 1219-block  0
call    0 returned 1
------------------
_ZN45slip_encoding_testsSuite_EscOverflowTest_TestD0Ev:
function _ZN45slip_encoding_testsSuite_EscOverflowTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1219:TEST(slip_encoding_testsSuite, EscOverflowTest) {
        1: 1219-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN45slip_encoding_testsSuite_EscOverflowTest_TestD1Ev:
function _ZN45slip_encoding_testsSuite_EscOverflowTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1219:TEST(slip_encoding_testsSuite, EscOverflowTest) {
        1: 1219-block  0
call    0 returned 1
------------------
_ZN45slip_encoding_testsSuite_EscOverflowTest_Test8TestBodyEv:
function _ZN45slip_encoding_testsSuite_EscOverflowTest_Test8TestBodyEv called 1 returned 100% blocks executed 38%
        1: 1219:TEST(slip_encoding_testsSuite, EscOverflowTest) {
        -: 1220:    // input buffer filled with ESC characters, causing overflow
        -: 1221:    uint8_t input_buffer[UART_BUFFER_SIZE];
      257: 1222:    for (uint16_t i = 0; i < UART_BUFFER_SIZE; i++) {
        1: 1222-block  0
      257: 1222-block  1
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256: 1223:        input_buffer[i] = 0xDB; // ESC character
      256: 1223-block  0
        -: 1224:    }
        1: 1225:    uint16_t input_length = UART_BUFFER_SIZE;
        -: 1226:    bool result;
        -: 1227:
        -: 1228:    // output buffer after encoding
        -: 1229:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1230:    uint16_t output_length;
        -: 1231:
        -: 1232:    // expected result
        1: 1233:    bool expected_result = false;
        -: 1234:
        -: 1235:    // encoding
        1: 1236:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1236-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1237:
        -: 1238:    // Assertions
       1*: 1239:    EXPECT_EQ(result, expected_result);
        1: 1239-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1239-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1239-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1239-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1239-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1239-block  5
call   16 never executed
call   17 never executed
        1: 1239-block  6
call   18 returned 1
    $$$$$: 1239-block  7
call   19 never executed
    $$$$$: 1239-block  8
    $$$$$: 1239-block  9
call   20 never executed
    $$$$$: 1239-block 10
    $$$$$: 1239-block 11
call   21 never executed
        1: 1240:}
------------------
        -: 1241:
        4: 1242:TEST(slip_encoding_testsSuite, MaximumEncodableDataTest) {
        -: 1243:    // input buffer with data that would expand to just fit within UART_BUFFER_SIZE
        -: 1244:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1: 1245:    memset(input_buffer, 0xC0, (UART_BUFFER_SIZE-2) / 2); // fill with END bytes
        1: 1246:    uint16_t input_length = (UART_BUFFER_SIZE-2) / 2;
        -: 1247:    // output buffer after encoding
        -: 1248:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1249:    uint16_t output_length;
        -: 1250:    bool result;
        -: 1251:
        -: 1252:    // expected result
        1: 1253:    bool expected_result = true;
        -: 1254:
        -: 1255:    // encoding
        1: 1256:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1257:
        -: 1258:    // Assertions
       1*: 1259:    EXPECT_EQ(result, expected_result);
        1: 1260:}
------------------
_ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_TestC1Ev:
function _ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1242:TEST(slip_encoding_testsSuite, MaximumEncodableDataTest) {
        1: 1242-block  0
call    0 returned 1
------------------
_ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_TestD0Ev:
function _ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1242:TEST(slip_encoding_testsSuite, MaximumEncodableDataTest) {
        1: 1242-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_TestD1Ev:
function _ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1242:TEST(slip_encoding_testsSuite, MaximumEncodableDataTest) {
        1: 1242-block  0
call    0 returned 1
------------------
_ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_Test8TestBodyEv:
function _ZN54slip_encoding_testsSuite_MaximumEncodableDataTest_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1: 1242:TEST(slip_encoding_testsSuite, MaximumEncodableDataTest) {
        -: 1243:    // input buffer with data that would expand to just fit within UART_BUFFER_SIZE
        -: 1244:    uint8_t input_buffer[UART_BUFFER_SIZE];
        1: 1245:    memset(input_buffer, 0xC0, (UART_BUFFER_SIZE-2) / 2); // fill with END bytes
        1: 1246:    uint16_t input_length = (UART_BUFFER_SIZE-2) / 2;
        -: 1247:    // output buffer after encoding
        -: 1248:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1249:    uint16_t output_length;
        -: 1250:    bool result;
        -: 1251:
        -: 1252:    // expected result
        1: 1253:    bool expected_result = true;
        -: 1254:
        -: 1255:    // encoding
        1: 1256:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1257:
        -: 1258:    // Assertions
       1*: 1259:    EXPECT_EQ(result, expected_result);
        1: 1259-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1259-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1259-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1259-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1259-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1259-block  5
call   16 never executed
call   17 never executed
        1: 1259-block  6
call   18 returned 1
    $$$$$: 1259-block  7
call   19 never executed
    $$$$$: 1259-block  8
    $$$$$: 1259-block  9
call   20 never executed
    $$$$$: 1259-block 10
    $$$$$: 1259-block 11
call   21 never executed
        1: 1260:}
------------------
        -: 1261:
        4: 1262:TEST(slip_encoding_testsSuite, MixedSpecialCharactersTest) {
        -: 1263:    // input buffer with mixed special characters
        1: 1264:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDD}; // END
        1: 1265:    uint16_t input_length = 4;
        -: 1266:    // output buffer after encoding
        -: 1267:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1268:    uint16_t output_length;
        -: 1269:    bool result;
        -: 1270:
        -: 1271:    // expected buffer
        1: 1272:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD, 0xC0};
        1: 1273:    uint16_t expected_length = 8;
        1: 1274:    bool expected_result = true;
        -: 1275:
        -: 1276:    // encoding
        1: 1277:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        -: 1278:
        -: 1279:    // Assertions
       1*: 1280:    EXPECT_EQ(result, expected_result);
       1*: 1281:    EXPECT_EQ(output_length, expected_length);
        9: 1282:    for(int i = 0; i < expected_length; i++){
       8*: 1283:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        -: 1284:    }
        1: 1285:}
------------------
_ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_TestC1Ev:
function _ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1262:TEST(slip_encoding_testsSuite, MixedSpecialCharactersTest) {
        1: 1262-block  0
call    0 returned 1
------------------
_ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_TestD0Ev:
function _ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1262:TEST(slip_encoding_testsSuite, MixedSpecialCharactersTest) {
        1: 1262-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_TestD1Ev:
function _ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1262:TEST(slip_encoding_testsSuite, MixedSpecialCharactersTest) {
        1: 1262-block  0
call    0 returned 1
------------------
_ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_Test8TestBodyEv:
function _ZN56slip_encoding_testsSuite_MixedSpecialCharactersTest_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1: 1262:TEST(slip_encoding_testsSuite, MixedSpecialCharactersTest) {
        -: 1263:    // input buffer with mixed special characters
        1: 1264:    uint8_t input_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDD}; // END
        1: 1265:    uint16_t input_length = 4;
        -: 1266:    // output buffer after encoding
        -: 1267:    uint8_t output_buffer[UART_BUFFER_SIZE];
        -: 1268:    uint16_t output_length;
        -: 1269:    bool result;
        -: 1270:
        -: 1271:    // expected buffer
        1: 1272:    uint8_t expected_buffer[UART_BUFFER_SIZE] = {0xC0, 0xDB, 0xDC, 0xDB, 0xDD, 0xDC, 0xDD, 0xC0};
        1: 1273:    uint16_t expected_length = 8;
        1: 1274:    bool expected_result = true;
        -: 1275:
        -: 1276:    // encoding
        1: 1277:    result = slip_encode(input_buffer, input_length, output_buffer, &output_length);
        1: 1277-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 1278:
        -: 1279:    // Assertions
       1*: 1280:    EXPECT_EQ(result, expected_result);
        1: 1280-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1280-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1280-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1280-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1280-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1280-block  5
call   16 never executed
call   17 never executed
        1: 1280-block  6
call   18 returned 1
    $$$$$: 1280-block  7
call   19 never executed
    $$$$$: 1280-block  8
    $$$$$: 1280-block  9
call   20 never executed
    $$$$$: 1280-block 10
    $$$$$: 1280-block 11
call   21 never executed
       1*: 1281:    EXPECT_EQ(output_length, expected_length);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1281-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1281-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1281-block  2
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1281-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1281-block  4
call   16 never executed
call   17 never executed
        1: 1281-block  5
call   18 returned 1
    $$$$$: 1281-block  6
call   19 never executed
    $$$$$: 1281-block  7
    $$$$$: 1281-block  8
call   20 never executed
    $$$$$: 1281-block  9
    $$$$$: 1281-block 10
call   21 never executed
        9: 1282:    for(int i = 0; i < expected_length; i++){
        9: 1282-block  0
branch  0 taken 8
branch  1 taken 1 (fallthrough)
       8*: 1283:        EXPECT_EQ(output_buffer[i], expected_buffer[i]);
        8: 1283-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1283-block  1
call    3 returned 8
branch  4 taken 0 (fallthrough)
branch  5 taken 8
    %%%%%: 1283-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1283-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 1283-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1283-block  5
call   16 never executed
call   17 never executed
        8: 1283-block  6
call   18 returned 8
    $$$$$: 1283-block  7
call   19 never executed
    $$$$$: 1283-block  8
    $$$$$: 1283-block  9
call   20 never executed
    $$$$$: 1283-block 10
    $$$$$: 1283-block 11
call   21 never executed
        -: 1284:    }
        1: 1285:}
        1: 1285-block  0
------------------
        -: 1286:
        -: 1287:/*
        -: 1288: * supercap_readout_test.cpp file
        -: 1289: *
        -: 1290: * Testing file for ADC to voltage conversion function. Multiple tests are executed here to demonstrate that the method behaves as expected. Below is a list of all tested functionalities and situations.
        -: 1291: * Created by Henri Vanhuynegem on 16/06/2024.
        -: 1292: * Last edited: 16/06/2024.
        -: 1293: *
        -: 1294: * Tests for convert_adc_to_voltage function:
        -: 1295: * - Zero value test: This test checks whether the function correctly converts an ADC value of 0 to 0.0 V.
        -: 1296: * - Max value test: This test checks whether the function correctly converts the maximum ADC value (4095) to the maximum voltage (3.64 V).
        -: 1297: * - Mid value test: This test verifies the conversion when the ADC value is half of the maximum value.
        -: 1298: * - Quarter value test: This test verifies the conversion when the ADC value is a quarter of the maximum value.
        -: 1299: * - Three-quarters value test: This test verifies the conversion when the ADC value is three-quarters of the maximum value.
        -: 1300: * - Arbitrary value test: This test verifies the conversion for an arbitrary ADC value (2048).
        -: 1301: */
        -: 1302:
        -: 1303:#include "supercap_readout.h"
        -: 1304:
        -: 1305:// Constants
        -: 1306:#define ADC_MAX_VALUE        4095      // 12-bit ADC resolution (2^12 - 1)
        -: 1307:#define MAX_VOLTAGE          3.64      // Reference voltage for ADC (measured 3.64 V)
        -: 1308:
        -: 1309:
        -: 1310:
        -: 1311:// Test cases for convert_adc_to_voltage function
        4: 1312:TEST(AdcConversionTest, ZeroValue) {
        1: 1313:    volatile unsigned int adc_value = 0;
        1: 1314:    float expected_voltage = 0.0;
       1*: 1315:    EXPECT_FLOAT_EQ(convert_adc_to_voltage(adc_value), expected_voltage);
        1: 1316:}
------------------
_ZN32AdcConversionTest_ZeroValue_TestC1Ev:
function _ZN32AdcConversionTest_ZeroValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1312:TEST(AdcConversionTest, ZeroValue) {
        1: 1312-block  0
call    0 returned 1
------------------
_ZN32AdcConversionTest_ZeroValue_TestD0Ev:
function _ZN32AdcConversionTest_ZeroValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1312:TEST(AdcConversionTest, ZeroValue) {
        1: 1312-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN32AdcConversionTest_ZeroValue_TestD1Ev:
function _ZN32AdcConversionTest_ZeroValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1312:TEST(AdcConversionTest, ZeroValue) {
        1: 1312-block  0
call    0 returned 1
------------------
_ZN32AdcConversionTest_ZeroValue_Test8TestBodyEv:
function _ZN32AdcConversionTest_ZeroValue_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1312:TEST(AdcConversionTest, ZeroValue) {
        1: 1313:    volatile unsigned int adc_value = 0;
        1: 1314:    float expected_voltage = 0.0;
       1*: 1315:    EXPECT_FLOAT_EQ(convert_adc_to_voltage(adc_value), expected_voltage);
        1: 1315-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1315-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1315-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1315-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1315-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1315-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1315-block  6
call   19 never executed
call   20 never executed
        1: 1315-block  7
call   21 returned 1
    $$$$$: 1315-block  8
call   22 never executed
    $$$$$: 1315-block  9
    $$$$$: 1315-block 10
call   23 never executed
    $$$$$: 1315-block 11
    $$$$$: 1315-block 12
call   24 never executed
        1: 1316:}
------------------
        -: 1317:
        4: 1318:TEST(AdcConversionTest, MaxValue) {
        1: 1319:    volatile unsigned int adc_value = ADC_MAX_VALUE;
        1: 1320:    float expected_voltage = MAX_VOLTAGE;
       1*: 1321:    EXPECT_FLOAT_EQ(convert_adc_to_voltage(adc_value), expected_voltage);
        1: 1322:}
------------------
_ZN31AdcConversionTest_MaxValue_TestC1Ev:
function _ZN31AdcConversionTest_MaxValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1318:TEST(AdcConversionTest, MaxValue) {
        1: 1318-block  0
call    0 returned 1
------------------
_ZN31AdcConversionTest_MaxValue_TestD0Ev:
function _ZN31AdcConversionTest_MaxValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1318:TEST(AdcConversionTest, MaxValue) {
        1: 1318-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN31AdcConversionTest_MaxValue_TestD1Ev:
function _ZN31AdcConversionTest_MaxValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1318:TEST(AdcConversionTest, MaxValue) {
        1: 1318-block  0
call    0 returned 1
------------------
_ZN31AdcConversionTest_MaxValue_Test8TestBodyEv:
function _ZN31AdcConversionTest_MaxValue_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1318:TEST(AdcConversionTest, MaxValue) {
        1: 1319:    volatile unsigned int adc_value = ADC_MAX_VALUE;
        1: 1320:    float expected_voltage = MAX_VOLTAGE;
       1*: 1321:    EXPECT_FLOAT_EQ(convert_adc_to_voltage(adc_value), expected_voltage);
        1: 1321-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1321-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1321-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1321-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1321-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1321-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1321-block  6
call   19 never executed
call   20 never executed
        1: 1321-block  7
call   21 returned 1
    $$$$$: 1321-block  8
call   22 never executed
    $$$$$: 1321-block  9
    $$$$$: 1321-block 10
call   23 never executed
    $$$$$: 1321-block 11
    $$$$$: 1321-block 12
call   24 never executed
        1: 1322:}
------------------
        -: 1323:
        4: 1324:TEST(AdcConversionTest, MidValue) {
        1: 1325:    volatile unsigned int adc_value = ADC_MAX_VALUE / 2;
        1: 1326:    float expected_voltage = MAX_VOLTAGE / 2;
       1*: 1327:    EXPECT_NEAR(convert_adc_to_voltage(adc_value), expected_voltage, 0.01);
        -: 1328:
        1: 1329:}
------------------
_ZN31AdcConversionTest_MidValue_TestC1Ev:
function _ZN31AdcConversionTest_MidValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1324:TEST(AdcConversionTest, MidValue) {
        1: 1324-block  0
call    0 returned 1
------------------
_ZN31AdcConversionTest_MidValue_TestD0Ev:
function _ZN31AdcConversionTest_MidValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1324:TEST(AdcConversionTest, MidValue) {
        1: 1324-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN31AdcConversionTest_MidValue_TestD1Ev:
function _ZN31AdcConversionTest_MidValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1324:TEST(AdcConversionTest, MidValue) {
        1: 1324-block  0
call    0 returned 1
------------------
_ZN31AdcConversionTest_MidValue_Test8TestBodyEv:
function _ZN31AdcConversionTest_MidValue_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1324:TEST(AdcConversionTest, MidValue) {
        1: 1325:    volatile unsigned int adc_value = ADC_MAX_VALUE / 2;
        1: 1326:    float expected_voltage = MAX_VOLTAGE / 2;
       1*: 1327:    EXPECT_NEAR(convert_adc_to_voltage(adc_value), expected_voltage, 0.01);
        1: 1327-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1327-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1327-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1327-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1327-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1327-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1327-block  6
call   19 never executed
call   20 never executed
        1: 1327-block  7
call   21 returned 1
    $$$$$: 1327-block  8
call   22 never executed
    $$$$$: 1327-block  9
    $$$$$: 1327-block 10
call   23 never executed
    $$$$$: 1327-block 11
    $$$$$: 1327-block 12
call   24 never executed
        -: 1328:
        1: 1329:}
------------------
        -: 1330:
        4: 1331:TEST(AdcConversionTest, QuarterValue) {
        1: 1332:    volatile unsigned int adc_value = ADC_MAX_VALUE / 4;
        1: 1333:    float expected_voltage = MAX_VOLTAGE / 4;
       1*: 1334:    EXPECT_NEAR(convert_adc_to_voltage(adc_value), expected_voltage, 0.01);
        1: 1335:}
------------------
_ZN35AdcConversionTest_QuarterValue_TestC1Ev:
function _ZN35AdcConversionTest_QuarterValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1331:TEST(AdcConversionTest, QuarterValue) {
        1: 1331-block  0
call    0 returned 1
------------------
_ZN35AdcConversionTest_QuarterValue_TestD0Ev:
function _ZN35AdcConversionTest_QuarterValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1331:TEST(AdcConversionTest, QuarterValue) {
        1: 1331-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN35AdcConversionTest_QuarterValue_TestD1Ev:
function _ZN35AdcConversionTest_QuarterValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1331:TEST(AdcConversionTest, QuarterValue) {
        1: 1331-block  0
call    0 returned 1
------------------
_ZN35AdcConversionTest_QuarterValue_Test8TestBodyEv:
function _ZN35AdcConversionTest_QuarterValue_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1331:TEST(AdcConversionTest, QuarterValue) {
        1: 1332:    volatile unsigned int adc_value = ADC_MAX_VALUE / 4;
        1: 1333:    float expected_voltage = MAX_VOLTAGE / 4;
       1*: 1334:    EXPECT_NEAR(convert_adc_to_voltage(adc_value), expected_voltage, 0.01);
        1: 1334-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1334-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1334-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1334-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1334-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1334-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1334-block  6
call   19 never executed
call   20 never executed
        1: 1334-block  7
call   21 returned 1
    $$$$$: 1334-block  8
call   22 never executed
    $$$$$: 1334-block  9
    $$$$$: 1334-block 10
call   23 never executed
    $$$$$: 1334-block 11
    $$$$$: 1334-block 12
call   24 never executed
        1: 1335:}
------------------
        -: 1336:
        4: 1337:TEST(AdcConversionTest, ThreeQuartersValue) {
        1: 1338:    volatile unsigned int adc_value = 3 * (ADC_MAX_VALUE / 4);
        1: 1339:    float expected_voltage = 3 * (MAX_VOLTAGE / 4);
       1*: 1340:    EXPECT_NEAR(convert_adc_to_voltage(adc_value), expected_voltage, 0.01);
        1: 1341:}
------------------
_ZN41AdcConversionTest_ThreeQuartersValue_TestC1Ev:
function _ZN41AdcConversionTest_ThreeQuartersValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1337:TEST(AdcConversionTest, ThreeQuartersValue) {
        1: 1337-block  0
call    0 returned 1
------------------
_ZN41AdcConversionTest_ThreeQuartersValue_TestD0Ev:
function _ZN41AdcConversionTest_ThreeQuartersValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1337:TEST(AdcConversionTest, ThreeQuartersValue) {
        1: 1337-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41AdcConversionTest_ThreeQuartersValue_TestD1Ev:
function _ZN41AdcConversionTest_ThreeQuartersValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1337:TEST(AdcConversionTest, ThreeQuartersValue) {
        1: 1337-block  0
call    0 returned 1
------------------
_ZN41AdcConversionTest_ThreeQuartersValue_Test8TestBodyEv:
function _ZN41AdcConversionTest_ThreeQuartersValue_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1337:TEST(AdcConversionTest, ThreeQuartersValue) {
        1: 1338:    volatile unsigned int adc_value = 3 * (ADC_MAX_VALUE / 4);
        1: 1339:    float expected_voltage = 3 * (MAX_VOLTAGE / 4);
       1*: 1340:    EXPECT_NEAR(convert_adc_to_voltage(adc_value), expected_voltage, 0.01);
        1: 1340-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1340-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1340-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1340-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1340-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1340-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1340-block  6
call   19 never executed
call   20 never executed
        1: 1340-block  7
call   21 returned 1
    $$$$$: 1340-block  8
call   22 never executed
    $$$$$: 1340-block  9
    $$$$$: 1340-block 10
call   23 never executed
    $$$$$: 1340-block 11
    $$$$$: 1340-block 12
call   24 never executed
        1: 1341:}
------------------
        -: 1342:
        4: 1343:TEST(AdcConversionTest, ArbitraryValue) {
        1: 1344:    volatile unsigned int adc_value = 2048; // Arbitrary value
        1: 1345:    float expected_voltage = (2048 * (float)MAX_VOLTAGE) / (float)ADC_MAX_VALUE;
       1*: 1346:    EXPECT_FLOAT_EQ(convert_adc_to_voltage(adc_value), expected_voltage);
        1: 1347:}
------------------
_ZN37AdcConversionTest_ArbitraryValue_TestC1Ev:
function _ZN37AdcConversionTest_ArbitraryValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1343:TEST(AdcConversionTest, ArbitraryValue) {
        1: 1343-block  0
call    0 returned 1
------------------
_ZN37AdcConversionTest_ArbitraryValue_TestD0Ev:
function _ZN37AdcConversionTest_ArbitraryValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1343:TEST(AdcConversionTest, ArbitraryValue) {
        1: 1343-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN37AdcConversionTest_ArbitraryValue_TestD1Ev:
function _ZN37AdcConversionTest_ArbitraryValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1343:TEST(AdcConversionTest, ArbitraryValue) {
        1: 1343-block  0
call    0 returned 1
------------------
_ZN37AdcConversionTest_ArbitraryValue_Test8TestBodyEv:
function _ZN37AdcConversionTest_ArbitraryValue_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1343:TEST(AdcConversionTest, ArbitraryValue) {
        1: 1344:    volatile unsigned int adc_value = 2048; // Arbitrary value
        1: 1345:    float expected_voltage = (2048 * (float)MAX_VOLTAGE) / (float)ADC_MAX_VALUE;
       1*: 1346:    EXPECT_FLOAT_EQ(convert_adc_to_voltage(adc_value), expected_voltage);
        1: 1346-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1346-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1346-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1346-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1346-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1346-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1346-block  6
call   19 never executed
call   20 never executed
        1: 1346-block  7
call   21 returned 1
    $$$$$: 1346-block  8
call   22 never executed
    $$$$$: 1346-block  9
    $$$$$: 1346-block 10
call   23 never executed
    $$$$$: 1346-block 11
    $$$$$: 1346-block 12
call   24 never executed
        1: 1347:}
------------------
        -: 1348:
        -: 1349:/*
        -: 1350: * temp_sensors_test.cpp file
        -: 1351: *
        -: 1352: * Testing file for frequency calculation method and frequency to temperature conversion. Multiple tests are executed here to demonstrate that the methods behave as expected. Below is a list of all tested functionalities and situations.
        -: 1353: * Created by Henri Vanhuynegem on 16/06/2024.
        -: 1354: * Last edited: 16/06/2024.
        -: 1355: *
        -: 1356: * calculateFrequency Tests:
        -: 1357: * - Zero period test: This test checks whether the function returns zero if the period is zero.
        -: 1358: * - Positive period test: This test checks whether the function correctly calculates the frequency for a given positive period.
        -: 1359: * - Small period test: This test verifies the function with a non-zero, small period.
        -: 1360: *
        -: 1361: * frequency_to_temperature Tests:
        -: 1362: * - Zero frequency test: This test ensures that a default error value is returned if the frequency is zero.
        -: 1363: * - Positive frequency test: This test verifies the temperature conversion for a given positive frequency.
        -: 1364: * - Small frequency test: This test verifies the function with a small frequency.
        -: 1365: * - Frequency in range test: This test checks the temperature conversion for a frequency within the expected range.
        -: 1366: * - Frequency in range test 2: This test checks the temperature conversion for another frequency within the expected range.
        -: 1367: * - Frequency in range test 3: This test checks the temperature conversion for yet another frequency within the expected range.
        -: 1368: */
        -: 1369:
        -: 1370:
        -: 1371:#include "temp_sensors.h"
        -: 1372:
        -: 1373:// Test cases for calculateFrequency function
        4: 1374:TEST(FrequencyCalculationTest, ZeroPeriod) {
        1: 1375:    float period = 0.0;
        1: 1376:    float expected_frequency = 0.0;
       1*: 1377:    EXPECT_FLOAT_EQ(calculateFrequency(period), expected_frequency);
        1: 1378:}
------------------
_ZN40FrequencyCalculationTest_ZeroPeriod_TestC1Ev:
function _ZN40FrequencyCalculationTest_ZeroPeriod_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1374:TEST(FrequencyCalculationTest, ZeroPeriod) {
        1: 1374-block  0
call    0 returned 1
------------------
_ZN40FrequencyCalculationTest_ZeroPeriod_TestD0Ev:
function _ZN40FrequencyCalculationTest_ZeroPeriod_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1374:TEST(FrequencyCalculationTest, ZeroPeriod) {
        1: 1374-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN40FrequencyCalculationTest_ZeroPeriod_TestD1Ev:
function _ZN40FrequencyCalculationTest_ZeroPeriod_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1374:TEST(FrequencyCalculationTest, ZeroPeriod) {
        1: 1374-block  0
call    0 returned 1
------------------
_ZN40FrequencyCalculationTest_ZeroPeriod_Test8TestBodyEv:
function _ZN40FrequencyCalculationTest_ZeroPeriod_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1374:TEST(FrequencyCalculationTest, ZeroPeriod) {
        1: 1375:    float period = 0.0;
        1: 1376:    float expected_frequency = 0.0;
       1*: 1377:    EXPECT_FLOAT_EQ(calculateFrequency(period), expected_frequency);
        1: 1377-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1377-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1377-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1377-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1377-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1377-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1377-block  6
call   19 never executed
call   20 never executed
        1: 1377-block  7
call   21 returned 1
    $$$$$: 1377-block  8
call   22 never executed
    $$$$$: 1377-block  9
    $$$$$: 1377-block 10
call   23 never executed
    $$$$$: 1377-block 11
    $$$$$: 1377-block 12
call   24 never executed
        1: 1378:}
------------------
        -: 1379:
        4: 1380:TEST(FrequencyCalculationTest, PositivePeriod) {
        1: 1381:    float period = 2.0;
        1: 1382:    float expected_frequency = 2000000.0;
       1*: 1383:    EXPECT_FLOAT_EQ(calculateFrequency(period), expected_frequency);
        1: 1384:}
------------------
_ZN44FrequencyCalculationTest_PositivePeriod_TestC1Ev:
function _ZN44FrequencyCalculationTest_PositivePeriod_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1380:TEST(FrequencyCalculationTest, PositivePeriod) {
        1: 1380-block  0
call    0 returned 1
------------------
_ZN44FrequencyCalculationTest_PositivePeriod_TestD0Ev:
function _ZN44FrequencyCalculationTest_PositivePeriod_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1380:TEST(FrequencyCalculationTest, PositivePeriod) {
        1: 1380-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44FrequencyCalculationTest_PositivePeriod_TestD1Ev:
function _ZN44FrequencyCalculationTest_PositivePeriod_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1380:TEST(FrequencyCalculationTest, PositivePeriod) {
        1: 1380-block  0
call    0 returned 1
------------------
_ZN44FrequencyCalculationTest_PositivePeriod_Test8TestBodyEv:
function _ZN44FrequencyCalculationTest_PositivePeriod_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1380:TEST(FrequencyCalculationTest, PositivePeriod) {
        1: 1381:    float period = 2.0;
        1: 1382:    float expected_frequency = 2000000.0;
       1*: 1383:    EXPECT_FLOAT_EQ(calculateFrequency(period), expected_frequency);
        1: 1383-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1383-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1383-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1383-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1383-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1383-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1383-block  6
call   19 never executed
call   20 never executed
        1: 1383-block  7
call   21 returned 1
    $$$$$: 1383-block  8
call   22 never executed
    $$$$$: 1383-block  9
    $$$$$: 1383-block 10
call   23 never executed
    $$$$$: 1383-block 11
    $$$$$: 1383-block 12
call   24 never executed
        1: 1384:}
------------------
        -: 1385:
        4: 1386:TEST(FrequencyCalculationTest, SmallPeriod) {
        1: 1387:    float period = 12;
        1: 1388:    float expected_frequency = 333333.333333;
       1*: 1389:    EXPECT_FLOAT_EQ(calculateFrequency(period), expected_frequency);
        1: 1390:}
------------------
_ZN41FrequencyCalculationTest_SmallPeriod_TestC1Ev:
function _ZN41FrequencyCalculationTest_SmallPeriod_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1386:TEST(FrequencyCalculationTest, SmallPeriod) {
        1: 1386-block  0
call    0 returned 1
------------------
_ZN41FrequencyCalculationTest_SmallPeriod_TestD0Ev:
function _ZN41FrequencyCalculationTest_SmallPeriod_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1386:TEST(FrequencyCalculationTest, SmallPeriod) {
        1: 1386-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41FrequencyCalculationTest_SmallPeriod_TestD1Ev:
function _ZN41FrequencyCalculationTest_SmallPeriod_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1386:TEST(FrequencyCalculationTest, SmallPeriod) {
        1: 1386-block  0
call    0 returned 1
------------------
_ZN41FrequencyCalculationTest_SmallPeriod_Test8TestBodyEv:
function _ZN41FrequencyCalculationTest_SmallPeriod_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1386:TEST(FrequencyCalculationTest, SmallPeriod) {
        1: 1387:    float period = 12;
        1: 1388:    float expected_frequency = 333333.333333;
       1*: 1389:    EXPECT_FLOAT_EQ(calculateFrequency(period), expected_frequency);
        1: 1389-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1389-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1389-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1389-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1389-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1389-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1389-block  6
call   19 never executed
call   20 never executed
        1: 1389-block  7
call   21 returned 1
    $$$$$: 1389-block  8
call   22 never executed
    $$$$$: 1389-block  9
    $$$$$: 1389-block 10
call   23 never executed
    $$$$$: 1389-block 11
    $$$$$: 1389-block 12
call   24 never executed
        1: 1390:}
------------------
        -: 1391:
        -: 1392:// Test cases for frequency_to_temperature function
        4: 1393:TEST(FrequencyToTemperatureTest, ZeroFrequency) {
        1: 1394:    float frequency = 0.0;
        1: 1395:    float expected_temperature = -99.0; // result from (1/0 - 1000) / 3.85, where 1/0 is theoretically infinite
       1*: 1396:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1397:}
------------------
_ZN45FrequencyToTemperatureTest_ZeroFrequency_TestC1Ev:
function _ZN45FrequencyToTemperatureTest_ZeroFrequency_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1393:TEST(FrequencyToTemperatureTest, ZeroFrequency) {
        1: 1393-block  0
call    0 returned 1
------------------
_ZN45FrequencyToTemperatureTest_ZeroFrequency_TestD0Ev:
function _ZN45FrequencyToTemperatureTest_ZeroFrequency_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1393:TEST(FrequencyToTemperatureTest, ZeroFrequency) {
        1: 1393-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN45FrequencyToTemperatureTest_ZeroFrequency_TestD1Ev:
function _ZN45FrequencyToTemperatureTest_ZeroFrequency_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1393:TEST(FrequencyToTemperatureTest, ZeroFrequency) {
        1: 1393-block  0
call    0 returned 1
------------------
_ZN45FrequencyToTemperatureTest_ZeroFrequency_Test8TestBodyEv:
function _ZN45FrequencyToTemperatureTest_ZeroFrequency_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1393:TEST(FrequencyToTemperatureTest, ZeroFrequency) {
        1: 1394:    float frequency = 0.0;
        1: 1395:    float expected_temperature = -99.0; // result from (1/0 - 1000) / 3.85, where 1/0 is theoretically infinite
       1*: 1396:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1396-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1396-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1396-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1396-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1396-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1396-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1396-block  6
call   19 never executed
call   20 never executed
        1: 1396-block  7
call   21 returned 1
    $$$$$: 1396-block  8
call   22 never executed
    $$$$$: 1396-block  9
    $$$$$: 1396-block 10
call   23 never executed
    $$$$$: 1396-block 11
    $$$$$: 1396-block 12
call   24 never executed
        1: 1397:}
------------------
        -: 1398:
        4: 1399:TEST(FrequencyToTemperatureTest, PositiveFrequency) {
        1: 1400:    float frequency = 2000000.0;
        1: 1401:    float expected_temperature = -99.0;
       1*: 1402:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1403:}
------------------
_ZN49FrequencyToTemperatureTest_PositiveFrequency_TestC1Ev:
function _ZN49FrequencyToTemperatureTest_PositiveFrequency_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1399:TEST(FrequencyToTemperatureTest, PositiveFrequency) {
        1: 1399-block  0
call    0 returned 1
------------------
_ZN49FrequencyToTemperatureTest_PositiveFrequency_TestD0Ev:
function _ZN49FrequencyToTemperatureTest_PositiveFrequency_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1399:TEST(FrequencyToTemperatureTest, PositiveFrequency) {
        1: 1399-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49FrequencyToTemperatureTest_PositiveFrequency_TestD1Ev:
function _ZN49FrequencyToTemperatureTest_PositiveFrequency_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1399:TEST(FrequencyToTemperatureTest, PositiveFrequency) {
        1: 1399-block  0
call    0 returned 1
------------------
_ZN49FrequencyToTemperatureTest_PositiveFrequency_Test8TestBodyEv:
function _ZN49FrequencyToTemperatureTest_PositiveFrequency_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1399:TEST(FrequencyToTemperatureTest, PositiveFrequency) {
        1: 1400:    float frequency = 2000000.0;
        1: 1401:    float expected_temperature = -99.0;
       1*: 1402:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1402-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1402-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1402-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1402-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1402-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1402-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1402-block  6
call   19 never executed
call   20 never executed
        1: 1402-block  7
call   21 returned 1
    $$$$$: 1402-block  8
call   22 never executed
    $$$$$: 1402-block  9
    $$$$$: 1402-block 10
call   23 never executed
    $$$$$: 1402-block 11
    $$$$$: 1402-block 12
call   24 never executed
        1: 1403:}
------------------
        -: 1404:
        4: 1405:TEST(FrequencyToTemperatureTest, SmallFrequency) {
        1: 1406:    float frequency = 1.0;
        1: 1407:    float expected_temperature = -99.0;
       1*: 1408:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1409:}
------------------
_ZN46FrequencyToTemperatureTest_SmallFrequency_TestC1Ev:
function _ZN46FrequencyToTemperatureTest_SmallFrequency_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1405:TEST(FrequencyToTemperatureTest, SmallFrequency) {
        1: 1405-block  0
call    0 returned 1
------------------
_ZN46FrequencyToTemperatureTest_SmallFrequency_TestD0Ev:
function _ZN46FrequencyToTemperatureTest_SmallFrequency_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1405:TEST(FrequencyToTemperatureTest, SmallFrequency) {
        1: 1405-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN46FrequencyToTemperatureTest_SmallFrequency_TestD1Ev:
function _ZN46FrequencyToTemperatureTest_SmallFrequency_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1405:TEST(FrequencyToTemperatureTest, SmallFrequency) {
        1: 1405-block  0
call    0 returned 1
------------------
_ZN46FrequencyToTemperatureTest_SmallFrequency_Test8TestBodyEv:
function _ZN46FrequencyToTemperatureTest_SmallFrequency_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1405:TEST(FrequencyToTemperatureTest, SmallFrequency) {
        1: 1406:    float frequency = 1.0;
        1: 1407:    float expected_temperature = -99.0;
       1*: 1408:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1408-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1408-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1408-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1408-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1408-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1408-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1408-block  6
call   19 never executed
call   20 never executed
        1: 1408-block  7
call   21 returned 1
    $$$$$: 1408-block  8
call   22 never executed
    $$$$$: 1408-block  9
    $$$$$: 1408-block 10
call   23 never executed
    $$$$$: 1408-block 11
    $$$$$: 1408-block 12
call   24 never executed
        1: 1409:}
------------------
        -: 1410:
        4: 1411:TEST(FrequencyToTemperatureTest, FrequencyInRange) {
        1: 1412:    float frequency = 150;
        1: 1413:    float expected_temperature = 710.77972;
       1*: 1414:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1415:}
------------------
_ZN48FrequencyToTemperatureTest_FrequencyInRange_TestC1Ev:
function _ZN48FrequencyToTemperatureTest_FrequencyInRange_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1411:TEST(FrequencyToTemperatureTest, FrequencyInRange) {
        1: 1411-block  0
call    0 returned 1
------------------
_ZN48FrequencyToTemperatureTest_FrequencyInRange_TestD0Ev:
function _ZN48FrequencyToTemperatureTest_FrequencyInRange_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1411:TEST(FrequencyToTemperatureTest, FrequencyInRange) {
        1: 1411-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48FrequencyToTemperatureTest_FrequencyInRange_TestD1Ev:
function _ZN48FrequencyToTemperatureTest_FrequencyInRange_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1411:TEST(FrequencyToTemperatureTest, FrequencyInRange) {
        1: 1411-block  0
call    0 returned 1
------------------
_ZN48FrequencyToTemperatureTest_FrequencyInRange_Test8TestBodyEv:
function _ZN48FrequencyToTemperatureTest_FrequencyInRange_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1411:TEST(FrequencyToTemperatureTest, FrequencyInRange) {
        1: 1412:    float frequency = 150;
        1: 1413:    float expected_temperature = 710.77972;
       1*: 1414:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1414-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1414-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1414-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1414-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1414-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1414-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1414-block  6
call   19 never executed
call   20 never executed
        1: 1414-block  7
call   21 returned 1
    $$$$$: 1414-block  8
call   22 never executed
    $$$$$: 1414-block  9
    $$$$$: 1414-block 10
call   23 never executed
    $$$$$: 1414-block 11
    $$$$$: 1414-block 12
call   24 never executed
        1: 1415:}
------------------
        -: 1416:
        4: 1417:TEST(FrequencyToTemperatureTest, FrequencyInRange2) {
        1: 1418:    float frequency = 600;
        1: 1419:    float expected_temperature = -17.110262;
       1*: 1420:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1421:}
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange2_TestC1Ev:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange2_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1417:TEST(FrequencyToTemperatureTest, FrequencyInRange2) {
        1: 1417-block  0
call    0 returned 1
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange2_TestD0Ev:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange2_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1417:TEST(FrequencyToTemperatureTest, FrequencyInRange2) {
        1: 1417-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange2_TestD1Ev:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange2_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1417:TEST(FrequencyToTemperatureTest, FrequencyInRange2) {
        1: 1417-block  0
call    0 returned 1
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange2_Test8TestBodyEv:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange2_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1417:TEST(FrequencyToTemperatureTest, FrequencyInRange2) {
        1: 1418:    float frequency = 600;
        1: 1419:    float expected_temperature = -17.110262;
       1*: 1420:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1420-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1420-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1420-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1420-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1420-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1420-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1420-block  6
call   19 never executed
call   20 never executed
        1: 1420-block  7
call   21 returned 1
    $$$$$: 1420-block  8
call   22 never executed
    $$$$$: 1420-block  9
    $$$$$: 1420-block 10
call   23 never executed
    $$$$$: 1420-block 11
    $$$$$: 1420-block 12
call   24 never executed
        1: 1421:}
------------------
        -: 1422:
        4: 1423:TEST(FrequencyToTemperatureTest, FrequencyInRange3) {
        1: 1424:    float frequency = 800;
        1: 1425:    float expected_temperature = -77.767761;
       1*: 1426:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1427:}
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange3_TestC1Ev:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange3_TestC1Ev called 1 returned 100% blocks executed 100%
        1: 1423:TEST(FrequencyToTemperatureTest, FrequencyInRange3) {
        1: 1423-block  0
call    0 returned 1
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange3_TestD0Ev:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange3_TestD0Ev called 1 returned 100% blocks executed 100%
        1: 1423:TEST(FrequencyToTemperatureTest, FrequencyInRange3) {
        1: 1423-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange3_TestD1Ev:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange3_TestD1Ev called 1 returned 100% blocks executed 100%
        1: 1423:TEST(FrequencyToTemperatureTest, FrequencyInRange3) {
        1: 1423-block  0
call    0 returned 1
------------------
_ZN49FrequencyToTemperatureTest_FrequencyInRange3_Test8TestBodyEv:
function _ZN49FrequencyToTemperatureTest_FrequencyInRange3_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1: 1423:TEST(FrequencyToTemperatureTest, FrequencyInRange3) {
        1: 1424:    float frequency = 800;
        1: 1425:    float expected_temperature = -77.767761;
       1*: 1426:    EXPECT_FLOAT_EQ(frequency_to_temperature(frequency), expected_temperature);
        1: 1426-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1426-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1426-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 1426-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1426-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 1426-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 1426-block  6
call   19 never executed
call   20 never executed
        1: 1426-block  7
call   21 returned 1
    $$$$$: 1426-block  8
call   22 never executed
    $$$$$: 1426-block  9
    $$$$$: 1426-block 10
call   23 never executed
    $$$$$: 1426-block 11
    $$$$$: 1426-block 12
call   24 never executed
        1: 1427:}
------------------
        -: 1428:
        -: 1429:
